import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { InkeepAnalyticsError } from "../models/errors/inkeepanalyticserror.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";
/**
 * Log Event
 */
export declare function eventsLog(client: InkeepAnalyticsCore, security: operations.LogEventSecurity, request: components.InsertEvent, options?: RequestOptions): APIPromise<Result<components.SelectEvent, errors.BadRequest | errors.Unauthorized | errors.Forbidden | errors.UnprocessableEntity | errors.InternalServerError | InkeepAnalyticsError | ResponseValidationError | ConnectionError | RequestAbortedError | RequestTimeoutError | InvalidRequestError | UnexpectedClientError | SDKValidationError>>;
//# sourceMappingURL=eventsLog.d.ts.map