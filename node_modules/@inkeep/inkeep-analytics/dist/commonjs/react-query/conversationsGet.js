"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConversationsGet = useConversationsGet;
exports.useConversationsGetSuspense = useConversationsGetSuspense;
exports.prefetchConversationsGet = prefetchConversationsGet;
exports.setConversationsGetData = setConversationsGetData;
exports.invalidateConversationsGet = invalidateConversationsGet;
exports.invalidateAllConversationsGet = invalidateAllConversationsGet;
exports.buildConversationsGetQuery = buildConversationsGetQuery;
exports.queryKeyConversationsGet = queryKeyConversationsGet;
const react_query_1 = require("@tanstack/react-query");
const conversationsGet_js_1 = require("../funcs/conversationsGet.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get Conversation
 */
function useConversationsGet(security, request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useQuery)({
        ...buildConversationsGetQuery(client, security, request, options),
        ...options,
    });
}
/**
 * Get Conversation
 */
function useConversationsGetSuspense(security, request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildConversationsGetQuery(client, security, request, options),
        ...options,
    });
}
function prefetchConversationsGet(queryClient, client$, security, request) {
    return queryClient.prefetchQuery({
        ...buildConversationsGetQuery(client$, security, request),
    });
}
function setConversationsGetData(client, queryKeyBase, data) {
    const key = queryKeyConversationsGet(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateConversationsGet(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversations",
            "get",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllConversationsGet(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "conversations", "get"],
    });
}
function buildConversationsGetQuery(client$, security, request, options) {
    return {
        queryKey: queryKeyConversationsGet(request.id),
        queryFn: async function conversationsGetQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, conversationsGet_js_1.conversationsGet)(client$, security, request, mergedOptions));
        },
    };
}
function queryKeyConversationsGet(id) {
    return ["@inkeep/inkeep-analytics", "conversations", "get", id];
}
//# sourceMappingURL=conversationsGet.js.map