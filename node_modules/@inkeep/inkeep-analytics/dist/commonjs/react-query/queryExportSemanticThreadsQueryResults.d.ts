import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryExportSemanticThreadsQueryResultsMutationVariables = {
    request: components.QuerySemanticThreadsRequestBody;
    options?: RequestOptions;
};
export type QueryExportSemanticThreadsQueryResultsMutationData = ReadableStream<Uint8Array>;
/**
 * Export Semantic Threads Query Results
 */
export declare function useQueryExportSemanticThreadsQueryResultsMutation(options?: MutationHookOptions<QueryExportSemanticThreadsQueryResultsMutationData, Error, QueryExportSemanticThreadsQueryResultsMutationVariables>): UseMutationResult<QueryExportSemanticThreadsQueryResultsMutationData, Error, QueryExportSemanticThreadsQueryResultsMutationVariables>;
export declare function mutationKeyQueryExportSemanticThreadsQueryResults(): MutationKey;
export declare function buildQueryExportSemanticThreadsQueryResultsMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryExportSemanticThreadsQueryResultsMutationVariables) => Promise<QueryExportSemanticThreadsQueryResultsMutationData>;
};
//# sourceMappingURL=queryExportSemanticThreadsQueryResults.d.ts.map