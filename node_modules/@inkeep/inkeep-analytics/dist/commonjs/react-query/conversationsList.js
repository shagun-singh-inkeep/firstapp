"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConversationsList = useConversationsList;
exports.useConversationsListSuspense = useConversationsListSuspense;
exports.prefetchConversationsList = prefetchConversationsList;
exports.setConversationsListData = setConversationsListData;
exports.invalidateConversationsList = invalidateConversationsList;
exports.invalidateAllConversationsList = invalidateAllConversationsList;
exports.buildConversationsListQuery = buildConversationsListQuery;
exports.queryKeyConversationsList = queryKeyConversationsList;
const react_query_1 = require("@tanstack/react-query");
const conversationsList_js_1 = require("../funcs/conversationsList.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get All Conversations
 */
function useConversationsList(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useQuery)({
        ...buildConversationsListQuery(client, request, options),
        ...options,
    });
}
/**
 * Get All Conversations
 */
function useConversationsListSuspense(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildConversationsListQuery(client, request, options),
        ...options,
    });
}
function prefetchConversationsList(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildConversationsListQuery(client$, request),
    });
}
function setConversationsListData(client, queryKeyBase, data) {
    const key = queryKeyConversationsList(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateConversationsList(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversations",
            "list",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllConversationsList(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "conversations", "list"],
    });
}
function buildConversationsListQuery(client$, request, options) {
    return {
        queryKey: queryKeyConversationsList({
            limit: request.limit,
            offset: request.offset,
        }),
        queryFn: async function conversationsListQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, conversationsList_js_1.conversationsList)(client$, request, mergedOptions));
        },
    };
}
function queryKeyConversationsList(parameters) {
    return ["@inkeep/inkeep-analytics", "conversations", "list", parameters];
}
//# sourceMappingURL=conversationsList.js.map