"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWeeklySearchUsers = useWeeklySearchUsers;
exports.useWeeklySearchUsersSuspense = useWeeklySearchUsersSuspense;
exports.prefetchWeeklySearchUsers = prefetchWeeklySearchUsers;
exports.setWeeklySearchUsersData = setWeeklySearchUsersData;
exports.invalidateWeeklySearchUsers = invalidateWeeklySearchUsers;
exports.invalidateAllWeeklySearchUsers = invalidateAllWeeklySearchUsers;
exports.buildWeeklySearchUsersQuery = buildWeeklySearchUsersQuery;
exports.queryKeyWeeklySearchUsers = queryKeyWeeklySearchUsers;
const react_query_1 = require("@tanstack/react-query");
const weeklySearchUsers_js_1 = require("../funcs/weeklySearchUsers.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Weekly Search Users
 */
function useWeeklySearchUsers(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useQuery)({
        ...buildWeeklySearchUsersQuery(client, request, options),
        ...options,
    });
}
/**
 * Weekly Search Users
 */
function useWeeklySearchUsersSuspense(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildWeeklySearchUsersQuery(client, request, options),
        ...options,
    });
}
function prefetchWeeklySearchUsers(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildWeeklySearchUsersQuery(client$, request),
    });
}
function setWeeklySearchUsersData(client, queryKeyBase, data) {
    const key = queryKeyWeeklySearchUsers(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateWeeklySearchUsers(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "weeklySearchUsers",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllWeeklySearchUsers(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "weeklySearchUsers"],
    });
}
function buildWeeklySearchUsersQuery(client$, request, options) {
    return {
        queryKey: queryKeyWeeklySearchUsers({
            after: request.after,
            projectId: request.projectId,
        }),
        queryFn: async function weeklySearchUsersQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, weeklySearchUsers_js_1.weeklySearchUsers)(client$, request, mergedOptions));
        },
    };
}
function queryKeyWeeklySearchUsers(parameters) {
    return ["@inkeep/inkeep-analytics", "weeklySearchUsers", parameters];
}
//# sourceMappingURL=weeklySearchUsers.js.map