import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type ConversationsLogMutationVariables = {
    security: operations.LogConversationSecurity;
    request: components.CreateConversation;
    options?: RequestOptions;
};
export type ConversationsLogMutationData = components.Conversation;
/**
 * Log Conversation
 *
 * @remarks
 * Logs a new conversation or updates an existing one with new messages. Always include all messages.
 *
 * **API Key Types:** `WEB`, `API`
 */
export declare function useConversationsLogMutation(options?: MutationHookOptions<ConversationsLogMutationData, Error, ConversationsLogMutationVariables>): UseMutationResult<ConversationsLogMutationData, Error, ConversationsLogMutationVariables>;
export declare function mutationKeyConversationsLog(): MutationKey;
export declare function buildConversationsLogMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: ConversationsLogMutationVariables) => Promise<ConversationsLogMutationData>;
};
//# sourceMappingURL=conversationsLog.d.ts.map