import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type FeedbackGetFeedbackByIdQueryData = operations.GetFeedbackByIdResponseBody;
/**
 * Get Feedback by ID
 */
export declare function useFeedbackGetFeedbackById(request: operations.GetFeedbackByIdRequest, options?: QueryHookOptions<FeedbackGetFeedbackByIdQueryData>): UseQueryResult<FeedbackGetFeedbackByIdQueryData, Error>;
/**
 * Get Feedback by ID
 */
export declare function useFeedbackGetFeedbackByIdSuspense(request: operations.GetFeedbackByIdRequest, options?: SuspenseQueryHookOptions<FeedbackGetFeedbackByIdQueryData>): UseSuspenseQueryResult<FeedbackGetFeedbackByIdQueryData, Error>;
export declare function prefetchFeedbackGetFeedbackById(queryClient: QueryClient, client$: InkeepAnalyticsCore, request: operations.GetFeedbackByIdRequest): Promise<void>;
export declare function setFeedbackGetFeedbackByIdData(client: QueryClient, queryKeyBase: [id: string], data: FeedbackGetFeedbackByIdQueryData): FeedbackGetFeedbackByIdQueryData | undefined;
export declare function invalidateFeedbackGetFeedbackById(client: QueryClient, queryKeyBase: TupleToPrefixes<[id: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllFeedbackGetFeedbackById(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildFeedbackGetFeedbackByIdQuery(client$: InkeepAnalyticsCore, request: operations.GetFeedbackByIdRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<FeedbackGetFeedbackByIdQueryData>;
};
export declare function queryKeyFeedbackGetFeedbackById(id: string): QueryKey;
//# sourceMappingURL=feedbackGetFeedbackById.d.ts.map