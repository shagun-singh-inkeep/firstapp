import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ConversationsGetQueryData = components.Conversation;
/**
 * Get Conversation
 */
export declare function useConversationsGet(security: operations.GetConversationSecurity, request: operations.GetConversationRequest, options?: QueryHookOptions<ConversationsGetQueryData>): UseQueryResult<ConversationsGetQueryData, Error>;
/**
 * Get Conversation
 */
export declare function useConversationsGetSuspense(security: operations.GetConversationSecurity, request: operations.GetConversationRequest, options?: SuspenseQueryHookOptions<ConversationsGetQueryData>): UseSuspenseQueryResult<ConversationsGetQueryData, Error>;
export declare function prefetchConversationsGet(queryClient: QueryClient, client$: InkeepAnalyticsCore, security: operations.GetConversationSecurity, request: operations.GetConversationRequest): Promise<void>;
export declare function setConversationsGetData(client: QueryClient, queryKeyBase: [id: string], data: ConversationsGetQueryData): ConversationsGetQueryData | undefined;
export declare function invalidateConversationsGet(client: QueryClient, queryKeyBase: TupleToPrefixes<[id: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllConversationsGet(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildConversationsGetQuery(client$: InkeepAnalyticsCore, security: operations.GetConversationSecurity, request: operations.GetConversationRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ConversationsGetQueryData>;
};
export declare function queryKeyConversationsGet(id: string): QueryKey;
//# sourceMappingURL=conversationsGet.d.ts.map