"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConversationGetConversationByExternalId = useConversationGetConversationByExternalId;
exports.useConversationGetConversationByExternalIdSuspense = useConversationGetConversationByExternalIdSuspense;
exports.prefetchConversationGetConversationByExternalId = prefetchConversationGetConversationByExternalId;
exports.setConversationGetConversationByExternalIdData = setConversationGetConversationByExternalIdData;
exports.invalidateConversationGetConversationByExternalId = invalidateConversationGetConversationByExternalId;
exports.invalidateAllConversationGetConversationByExternalId = invalidateAllConversationGetConversationByExternalId;
exports.buildConversationGetConversationByExternalIdQuery = buildConversationGetConversationByExternalIdQuery;
exports.queryKeyConversationGetConversationByExternalId = queryKeyConversationGetConversationByExternalId;
const react_query_1 = require("@tanstack/react-query");
const conversationGetConversationByExternalId_js_1 = require("../funcs/conversationGetConversationByExternalId.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get Conversation by External ID
 */
function useConversationGetConversationByExternalId(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useQuery)({
        ...buildConversationGetConversationByExternalIdQuery(client, request, options),
        ...options,
    });
}
/**
 * Get Conversation by External ID
 */
function useConversationGetConversationByExternalIdSuspense(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildConversationGetConversationByExternalIdQuery(client, request, options),
        ...options,
    });
}
function prefetchConversationGetConversationByExternalId(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildConversationGetConversationByExternalIdQuery(client$, request),
    });
}
function setConversationGetConversationByExternalIdData(client, queryKeyBase, data) {
    const key = queryKeyConversationGetConversationByExternalId(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateConversationGetConversationByExternalId(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversation",
            "getConversationByExternalId",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllConversationGetConversationByExternalId(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversation",
            "getConversationByExternalId",
        ],
    });
}
function buildConversationGetConversationByExternalIdQuery(client$, request, options) {
    return {
        queryKey: queryKeyConversationGetConversationByExternalId(request.externalId),
        queryFn: async function conversationGetConversationByExternalIdQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, conversationGetConversationByExternalId_js_1.conversationGetConversationByExternalId)(client$, request, mergedOptions));
        },
    };
}
function queryKeyConversationGetConversationByExternalId(externalId) {
    return [
        "@inkeep/inkeep-analytics",
        "conversation",
        "getConversationByExternalId",
        externalId,
    ];
}
//# sourceMappingURL=conversationGetConversationByExternalId.js.map