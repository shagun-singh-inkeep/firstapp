import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ConversationGetConversationByExternalIdQueryData = components.Conversation;
/**
 * Get Conversation by External ID
 */
export declare function useConversationGetConversationByExternalId(request: operations.GetConversationByExternalIdRequest, options?: QueryHookOptions<ConversationGetConversationByExternalIdQueryData>): UseQueryResult<ConversationGetConversationByExternalIdQueryData, Error>;
/**
 * Get Conversation by External ID
 */
export declare function useConversationGetConversationByExternalIdSuspense(request: operations.GetConversationByExternalIdRequest, options?: SuspenseQueryHookOptions<ConversationGetConversationByExternalIdQueryData>): UseSuspenseQueryResult<ConversationGetConversationByExternalIdQueryData, Error>;
export declare function prefetchConversationGetConversationByExternalId(queryClient: QueryClient, client$: InkeepAnalyticsCore, request: operations.GetConversationByExternalIdRequest): Promise<void>;
export declare function setConversationGetConversationByExternalIdData(client: QueryClient, queryKeyBase: [externalId: string], data: ConversationGetConversationByExternalIdQueryData): ConversationGetConversationByExternalIdQueryData | undefined;
export declare function invalidateConversationGetConversationByExternalId(client: QueryClient, queryKeyBase: TupleToPrefixes<[externalId: string]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllConversationGetConversationByExternalId(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildConversationGetConversationByExternalIdQuery(client$: InkeepAnalyticsCore, request: operations.GetConversationByExternalIdRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ConversationGetConversationByExternalIdQueryData>;
};
export declare function queryKeyConversationGetConversationByExternalId(externalId: string): QueryKey;
//# sourceMappingURL=conversationGetConversationByExternalId.d.ts.map