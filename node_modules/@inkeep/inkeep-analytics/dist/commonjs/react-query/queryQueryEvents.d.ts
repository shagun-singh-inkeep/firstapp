import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryQueryEventsMutationVariables = {
    security: operations.QueryEventsSecurity;
    request: components.QueryEventsRequestBody;
    options?: RequestOptions;
};
export type QueryQueryEventsMutationData = components.QueryEventsResponseBody;
/**
 * Query Events
 */
export declare function useQueryQueryEventsMutation(options?: MutationHookOptions<QueryQueryEventsMutationData, Error, QueryQueryEventsMutationVariables>): UseMutationResult<QueryQueryEventsMutationData, Error, QueryQueryEventsMutationVariables>;
export declare function mutationKeyQueryQueryEvents(): MutationKey;
export declare function buildQueryQueryEventsMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryQueryEventsMutationVariables) => Promise<QueryQueryEventsMutationData>;
};
//# sourceMappingURL=queryQueryEvents.d.ts.map