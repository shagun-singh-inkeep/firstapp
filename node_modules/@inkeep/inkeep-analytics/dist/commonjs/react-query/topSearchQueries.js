"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTopSearchQueries = useTopSearchQueries;
exports.useTopSearchQueriesSuspense = useTopSearchQueriesSuspense;
exports.prefetchTopSearchQueries = prefetchTopSearchQueries;
exports.setTopSearchQueriesData = setTopSearchQueriesData;
exports.invalidateTopSearchQueries = invalidateTopSearchQueries;
exports.invalidateAllTopSearchQueries = invalidateAllTopSearchQueries;
exports.buildTopSearchQueriesQuery = buildTopSearchQueriesQuery;
exports.queryKeyTopSearchQueries = queryKeyTopSearchQueries;
const react_query_1 = require("@tanstack/react-query");
const topSearchQueries_js_1 = require("../funcs/topSearchQueries.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Top Search Queries
 */
function useTopSearchQueries(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useQuery)({
        ...buildTopSearchQueriesQuery(client, request, options),
        ...options,
    });
}
/**
 * Top Search Queries
 */
function useTopSearchQueriesSuspense(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildTopSearchQueriesQuery(client, request, options),
        ...options,
    });
}
function prefetchTopSearchQueries(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildTopSearchQueriesQuery(client$, request),
    });
}
function setTopSearchQueriesData(client, queryKeyBase, data) {
    const key = queryKeyTopSearchQueries(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateTopSearchQueries(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "topSearchQueries", ...queryKeyBase],
    });
}
function invalidateAllTopSearchQueries(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "topSearchQueries"],
    });
}
function buildTopSearchQueriesQuery(client$, request, options) {
    return {
        queryKey: queryKeyTopSearchQueries({
            after: request.after,
            projectId: request.projectId,
        }),
        queryFn: async function topSearchQueriesQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, topSearchQueries_js_1.topSearchQueries)(client$, request, mergedOptions));
        },
    };
}
function queryKeyTopSearchQueries(parameters) {
    return ["@inkeep/inkeep-analytics", "topSearchQueries", parameters];
}
//# sourceMappingURL=topSearchQueries.js.map