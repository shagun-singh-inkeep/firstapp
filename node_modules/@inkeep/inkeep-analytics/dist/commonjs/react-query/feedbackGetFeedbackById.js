"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFeedbackGetFeedbackById = useFeedbackGetFeedbackById;
exports.useFeedbackGetFeedbackByIdSuspense = useFeedbackGetFeedbackByIdSuspense;
exports.prefetchFeedbackGetFeedbackById = prefetchFeedbackGetFeedbackById;
exports.setFeedbackGetFeedbackByIdData = setFeedbackGetFeedbackByIdData;
exports.invalidateFeedbackGetFeedbackById = invalidateFeedbackGetFeedbackById;
exports.invalidateAllFeedbackGetFeedbackById = invalidateAllFeedbackGetFeedbackById;
exports.buildFeedbackGetFeedbackByIdQuery = buildFeedbackGetFeedbackByIdQuery;
exports.queryKeyFeedbackGetFeedbackById = queryKeyFeedbackGetFeedbackById;
const react_query_1 = require("@tanstack/react-query");
const feedbackGetFeedbackById_js_1 = require("../funcs/feedbackGetFeedbackById.js");
const primitives_js_1 = require("../lib/primitives.js");
const fp_js_1 = require("../types/fp.js");
const _context_js_1 = require("./_context.js");
/**
 * Get Feedback by ID
 */
function useFeedbackGetFeedbackById(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useQuery)({
        ...buildFeedbackGetFeedbackByIdQuery(client, request, options),
        ...options,
    });
}
/**
 * Get Feedback by ID
 */
function useFeedbackGetFeedbackByIdSuspense(request, options) {
    const client = (0, _context_js_1.useInkeepAnalyticsContext)();
    return (0, react_query_1.useSuspenseQuery)({
        ...buildFeedbackGetFeedbackByIdQuery(client, request, options),
        ...options,
    });
}
function prefetchFeedbackGetFeedbackById(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildFeedbackGetFeedbackByIdQuery(client$, request),
    });
}
function setFeedbackGetFeedbackByIdData(client, queryKeyBase, data) {
    const key = queryKeyFeedbackGetFeedbackById(...queryKeyBase);
    return client.setQueryData(key, data);
}
function invalidateFeedbackGetFeedbackById(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "feedback",
            "getFeedbackById",
            ...queryKeyBase,
        ],
    });
}
function invalidateAllFeedbackGetFeedbackById(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "feedback", "getFeedbackById"],
    });
}
function buildFeedbackGetFeedbackByIdQuery(client$, request, options) {
    return {
        queryKey: queryKeyFeedbackGetFeedbackById(request.id),
        queryFn: async function feedbackGetFeedbackByIdQueryFn(ctx) {
            const sig = (0, primitives_js_1.combineSignals)(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return (0, fp_js_1.unwrapAsync)((0, feedbackGetFeedbackById_js_1.feedbackGetFeedbackById)(client$, request, mergedOptions));
        },
    };
}
function queryKeyFeedbackGetFeedbackById(id) {
    return ["@inkeep/inkeep-analytics", "feedback", "getFeedbackById", id];
}
//# sourceMappingURL=feedbackGetFeedbackById.js.map