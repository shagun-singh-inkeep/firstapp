import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type QuerySemanticThreadsSecurity = {
    webIntegrationKey?: string | undefined;
    apiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const QuerySemanticThreadsSecurity$inboundSchema: z.ZodType<QuerySemanticThreadsSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsSecurity$Outbound = {
    WebIntegrationKey?: string | undefined;
    ApiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const QuerySemanticThreadsSecurity$outboundSchema: z.ZodType<QuerySemanticThreadsSecurity$Outbound, z.ZodTypeDef, QuerySemanticThreadsSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsSecurity$ {
    /** @deprecated use `QuerySemanticThreadsSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsSecurity$Outbound, z.ZodTypeDef, QuerySemanticThreadsSecurity>;
    /** @deprecated use `QuerySemanticThreadsSecurity$Outbound` instead. */
    type Outbound = QuerySemanticThreadsSecurity$Outbound;
}
export declare function querySemanticThreadsSecurityToJSON(querySemanticThreadsSecurity: QuerySemanticThreadsSecurity): string;
export declare function querySemanticThreadsSecurityFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsSecurity, SDKValidationError>;
//# sourceMappingURL=querysemanticthreads.d.ts.map