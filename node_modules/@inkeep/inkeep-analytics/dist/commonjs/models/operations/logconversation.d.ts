import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type LogConversationSecurity = {
    webIntegrationKey?: string | undefined;
    apiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const LogConversationSecurity$inboundSchema: z.ZodType<LogConversationSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type LogConversationSecurity$Outbound = {
    WebIntegrationKey?: string | undefined;
    ApiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const LogConversationSecurity$outboundSchema: z.ZodType<LogConversationSecurity$Outbound, z.ZodTypeDef, LogConversationSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogConversationSecurity$ {
    /** @deprecated use `LogConversationSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogConversationSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogConversationSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogConversationSecurity$Outbound, z.ZodTypeDef, LogConversationSecurity>;
    /** @deprecated use `LogConversationSecurity$Outbound` instead. */
    type Outbound = LogConversationSecurity$Outbound;
}
export declare function logConversationSecurityToJSON(logConversationSecurity: LogConversationSecurity): string;
export declare function logConversationSecurityFromJSON(jsonString: string): SafeParseResult<LogConversationSecurity, SDKValidationError>;
//# sourceMappingURL=logconversation.d.ts.map