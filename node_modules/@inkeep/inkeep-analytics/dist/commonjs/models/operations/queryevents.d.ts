import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type QueryEventsSecurity = {
    webIntegrationKey?: string | undefined;
    apiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const QueryEventsSecurity$inboundSchema: z.ZodType<QueryEventsSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryEventsSecurity$Outbound = {
    WebIntegrationKey?: string | undefined;
    ApiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const QueryEventsSecurity$outboundSchema: z.ZodType<QueryEventsSecurity$Outbound, z.ZodTypeDef, QueryEventsSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryEventsSecurity$ {
    /** @deprecated use `QueryEventsSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryEventsSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryEventsSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryEventsSecurity$Outbound, z.ZodTypeDef, QueryEventsSecurity>;
    /** @deprecated use `QueryEventsSecurity$Outbound` instead. */
    type Outbound = QueryEventsSecurity$Outbound;
}
export declare function queryEventsSecurityToJSON(queryEventsSecurity: QueryEventsSecurity): string;
export declare function queryEventsSecurityFromJSON(jsonString: string): SafeParseResult<QueryEventsSecurity, SDKValidationError>;
//# sourceMappingURL=queryevents.d.ts.map