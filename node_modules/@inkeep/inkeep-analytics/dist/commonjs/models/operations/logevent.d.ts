import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type LogEventSecurity = {
    webIntegrationKey?: string | undefined;
    apiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const LogEventSecurity$inboundSchema: z.ZodType<LogEventSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type LogEventSecurity$Outbound = {
    WebIntegrationKey?: string | undefined;
    ApiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const LogEventSecurity$outboundSchema: z.ZodType<LogEventSecurity$Outbound, z.ZodTypeDef, LogEventSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogEventSecurity$ {
    /** @deprecated use `LogEventSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogEventSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogEventSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogEventSecurity$Outbound, z.ZodTypeDef, LogEventSecurity>;
    /** @deprecated use `LogEventSecurity$Outbound` instead. */
    type Outbound = LogEventSecurity$Outbound;
}
export declare function logEventSecurityToJSON(logEventSecurity: LogEventSecurity): string;
export declare function logEventSecurityFromJSON(jsonString: string): SafeParseResult<LogEventSecurity, SDKValidationError>;
//# sourceMappingURL=logevent.d.ts.map