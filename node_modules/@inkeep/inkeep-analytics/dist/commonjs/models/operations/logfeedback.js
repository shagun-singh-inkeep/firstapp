"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogFeedbackResponseBody$ = exports.LogFeedbackResponseBody$outboundSchema = exports.LogFeedbackResponseBody$inboundSchema = exports.LogFeedbackUserProperties$ = exports.LogFeedbackUserProperties$outboundSchema = exports.LogFeedbackUserProperties$inboundSchema = exports.LogFeedbackUserType$ = exports.LogFeedbackUserType$outboundSchema = exports.LogFeedbackUserType$inboundSchema = exports.LogFeedbackUserId$ = exports.LogFeedbackUserId$outboundSchema = exports.LogFeedbackUserId$inboundSchema = exports.LogFeedbackId$ = exports.LogFeedbackId$outboundSchema = exports.LogFeedbackId$inboundSchema = exports.LogFeedbackReasons$ = exports.LogFeedbackReasons$outboundSchema = exports.LogFeedbackReasons$inboundSchema = exports.LogFeedbackType$ = exports.LogFeedbackType$outboundSchema = exports.LogFeedbackType$inboundSchema = exports.LogFeedbackRequestBody$ = exports.LogFeedbackRequestBody$outboundSchema = exports.LogFeedbackRequestBody$inboundSchema = exports.UserProperties$ = exports.UserProperties$outboundSchema = exports.UserProperties$inboundSchema = exports.UserType$ = exports.UserType$outboundSchema = exports.UserType$inboundSchema = exports.UserId$ = exports.UserId$outboundSchema = exports.UserId$inboundSchema = exports.Id$ = exports.Id$outboundSchema = exports.Id$inboundSchema = exports.Reasons$ = exports.Reasons$outboundSchema = exports.Reasons$inboundSchema = exports.Type$ = exports.Type$outboundSchema = exports.Type$inboundSchema = exports.LogFeedbackUserType = exports.LogFeedbackType = exports.UserType = exports.Type = void 0;
exports.reasonsToJSON = reasonsToJSON;
exports.reasonsFromJSON = reasonsFromJSON;
exports.idToJSON = idToJSON;
exports.idFromJSON = idFromJSON;
exports.userIdToJSON = userIdToJSON;
exports.userIdFromJSON = userIdFromJSON;
exports.userPropertiesToJSON = userPropertiesToJSON;
exports.userPropertiesFromJSON = userPropertiesFromJSON;
exports.logFeedbackRequestBodyToJSON = logFeedbackRequestBodyToJSON;
exports.logFeedbackRequestBodyFromJSON = logFeedbackRequestBodyFromJSON;
exports.logFeedbackReasonsToJSON = logFeedbackReasonsToJSON;
exports.logFeedbackReasonsFromJSON = logFeedbackReasonsFromJSON;
exports.logFeedbackIdToJSON = logFeedbackIdToJSON;
exports.logFeedbackIdFromJSON = logFeedbackIdFromJSON;
exports.logFeedbackUserIdToJSON = logFeedbackUserIdToJSON;
exports.logFeedbackUserIdFromJSON = logFeedbackUserIdFromJSON;
exports.logFeedbackUserPropertiesToJSON = logFeedbackUserPropertiesToJSON;
exports.logFeedbackUserPropertiesFromJSON = logFeedbackUserPropertiesFromJSON;
exports.logFeedbackResponseBodyToJSON = logFeedbackResponseBodyToJSON;
exports.logFeedbackResponseBodyFromJSON = logFeedbackResponseBodyFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
exports.Type = {
    Positive: "positive",
    Negative: "negative",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.UserType = {
    User: "user",
    Member: "member",
};
exports.LogFeedbackType = {
    Positive: "positive",
    Negative: "negative",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.LogFeedbackUserType = {
    User: "user",
    Member: "member",
};
/** @internal */
exports.Type$inboundSchema = z.nativeEnum(exports.Type);
/** @internal */
exports.Type$outboundSchema = exports.Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = exports.Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = exports.Type$outboundSchema;
})(Type$ || (exports.Type$ = Type$ = {}));
/** @internal */
exports.Reasons$inboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/** @internal */
exports.Reasons$outboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Reasons$;
(function (Reasons$) {
    /** @deprecated use `Reasons$inboundSchema` instead. */
    Reasons$.inboundSchema = exports.Reasons$inboundSchema;
    /** @deprecated use `Reasons$outboundSchema` instead. */
    Reasons$.outboundSchema = exports.Reasons$outboundSchema;
})(Reasons$ || (exports.Reasons$ = Reasons$ = {}));
function reasonsToJSON(reasons) {
    return JSON.stringify(exports.Reasons$outboundSchema.parse(reasons));
}
function reasonsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Reasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Reasons' from JSON`);
}
/** @internal */
exports.Id$inboundSchema = z.union([
    z.string(),
    z.number(),
]);
/** @internal */
exports.Id$outboundSchema = z
    .union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Id$;
(function (Id$) {
    /** @deprecated use `Id$inboundSchema` instead. */
    Id$.inboundSchema = exports.Id$inboundSchema;
    /** @deprecated use `Id$outboundSchema` instead. */
    Id$.outboundSchema = exports.Id$outboundSchema;
})(Id$ || (exports.Id$ = Id$ = {}));
function idToJSON(id) {
    return JSON.stringify(exports.Id$outboundSchema.parse(id));
}
function idFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Id$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Id' from JSON`);
}
/** @internal */
exports.UserId$inboundSchema = z
    .union([z.string(), z.number()]);
/** @internal */
exports.UserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UserId$;
(function (UserId$) {
    /** @deprecated use `UserId$inboundSchema` instead. */
    UserId$.inboundSchema = exports.UserId$inboundSchema;
    /** @deprecated use `UserId$outboundSchema` instead. */
    UserId$.outboundSchema = exports.UserId$outboundSchema;
})(UserId$ || (exports.UserId$ = UserId$ = {}));
function userIdToJSON(userId) {
    return JSON.stringify(exports.UserId$outboundSchema.parse(userId));
}
function userIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserId' from JSON`);
}
/** @internal */
exports.UserType$inboundSchema = z
    .nativeEnum(exports.UserType);
/** @internal */
exports.UserType$outboundSchema = exports.UserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UserType$;
(function (UserType$) {
    /** @deprecated use `UserType$inboundSchema` instead. */
    UserType$.inboundSchema = exports.UserType$inboundSchema;
    /** @deprecated use `UserType$outboundSchema` instead. */
    UserType$.outboundSchema = exports.UserType$outboundSchema;
})(UserType$ || (exports.UserType$ = UserType$ = {}));
/** @internal */
exports.UserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.UserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.UserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.UserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var UserProperties$;
(function (UserProperties$) {
    /** @deprecated use `UserProperties$inboundSchema` instead. */
    UserProperties$.inboundSchema = exports.UserProperties$inboundSchema;
    /** @deprecated use `UserProperties$outboundSchema` instead. */
    UserProperties$.outboundSchema = exports.UserProperties$outboundSchema;
})(UserProperties$ || (exports.UserProperties$ = UserProperties$ = {}));
function userPropertiesToJSON(userProperties) {
    return JSON.stringify(exports.UserProperties$outboundSchema.parse(userProperties));
}
function userPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserProperties' from JSON`);
}
/** @internal */
exports.LogFeedbackRequestBody$inboundSchema = z.object({
    id: z.string().optional(),
    type: exports.Type$inboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    reasons: z.nullable(z.array(z.lazy(() => exports.Reasons$inboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.UserProperties$inboundSchema))
        .optional(),
});
/** @internal */
exports.LogFeedbackRequestBody$outboundSchema = z.object({
    id: z.string().optional(),
    type: exports.Type$outboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    reasons: z.nullable(z.array(z.lazy(() => exports.Reasons$outboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.UserProperties$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackRequestBody$;
(function (LogFeedbackRequestBody$) {
    /** @deprecated use `LogFeedbackRequestBody$inboundSchema` instead. */
    LogFeedbackRequestBody$.inboundSchema = exports.LogFeedbackRequestBody$inboundSchema;
    /** @deprecated use `LogFeedbackRequestBody$outboundSchema` instead. */
    LogFeedbackRequestBody$.outboundSchema = exports.LogFeedbackRequestBody$outboundSchema;
})(LogFeedbackRequestBody$ || (exports.LogFeedbackRequestBody$ = LogFeedbackRequestBody$ = {}));
function logFeedbackRequestBodyToJSON(logFeedbackRequestBody) {
    return JSON.stringify(exports.LogFeedbackRequestBody$outboundSchema.parse(logFeedbackRequestBody));
}
function logFeedbackRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LogFeedbackRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackRequestBody' from JSON`);
}
/** @internal */
exports.LogFeedbackType$inboundSchema = z.nativeEnum(exports.LogFeedbackType);
/** @internal */
exports.LogFeedbackType$outboundSchema = exports.LogFeedbackType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackType$;
(function (LogFeedbackType$) {
    /** @deprecated use `LogFeedbackType$inboundSchema` instead. */
    LogFeedbackType$.inboundSchema = exports.LogFeedbackType$inboundSchema;
    /** @deprecated use `LogFeedbackType$outboundSchema` instead. */
    LogFeedbackType$.outboundSchema = exports.LogFeedbackType$outboundSchema;
})(LogFeedbackType$ || (exports.LogFeedbackType$ = LogFeedbackType$ = {}));
/** @internal */
exports.LogFeedbackReasons$inboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/** @internal */
exports.LogFeedbackReasons$outboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackReasons$;
(function (LogFeedbackReasons$) {
    /** @deprecated use `LogFeedbackReasons$inboundSchema` instead. */
    LogFeedbackReasons$.inboundSchema = exports.LogFeedbackReasons$inboundSchema;
    /** @deprecated use `LogFeedbackReasons$outboundSchema` instead. */
    LogFeedbackReasons$.outboundSchema = exports.LogFeedbackReasons$outboundSchema;
})(LogFeedbackReasons$ || (exports.LogFeedbackReasons$ = LogFeedbackReasons$ = {}));
function logFeedbackReasonsToJSON(logFeedbackReasons) {
    return JSON.stringify(exports.LogFeedbackReasons$outboundSchema.parse(logFeedbackReasons));
}
function logFeedbackReasonsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LogFeedbackReasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackReasons' from JSON`);
}
/** @internal */
exports.LogFeedbackId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.LogFeedbackId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackId$;
(function (LogFeedbackId$) {
    /** @deprecated use `LogFeedbackId$inboundSchema` instead. */
    LogFeedbackId$.inboundSchema = exports.LogFeedbackId$inboundSchema;
    /** @deprecated use `LogFeedbackId$outboundSchema` instead. */
    LogFeedbackId$.outboundSchema = exports.LogFeedbackId$outboundSchema;
})(LogFeedbackId$ || (exports.LogFeedbackId$ = LogFeedbackId$ = {}));
function logFeedbackIdToJSON(logFeedbackId) {
    return JSON.stringify(exports.LogFeedbackId$outboundSchema.parse(logFeedbackId));
}
function logFeedbackIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LogFeedbackId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackId' from JSON`);
}
/** @internal */
exports.LogFeedbackUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.LogFeedbackUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackUserId$;
(function (LogFeedbackUserId$) {
    /** @deprecated use `LogFeedbackUserId$inboundSchema` instead. */
    LogFeedbackUserId$.inboundSchema = exports.LogFeedbackUserId$inboundSchema;
    /** @deprecated use `LogFeedbackUserId$outboundSchema` instead. */
    LogFeedbackUserId$.outboundSchema = exports.LogFeedbackUserId$outboundSchema;
})(LogFeedbackUserId$ || (exports.LogFeedbackUserId$ = LogFeedbackUserId$ = {}));
function logFeedbackUserIdToJSON(logFeedbackUserId) {
    return JSON.stringify(exports.LogFeedbackUserId$outboundSchema.parse(logFeedbackUserId));
}
function logFeedbackUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LogFeedbackUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackUserId' from JSON`);
}
/** @internal */
exports.LogFeedbackUserType$inboundSchema = z.nativeEnum(exports.LogFeedbackUserType);
/** @internal */
exports.LogFeedbackUserType$outboundSchema = exports.LogFeedbackUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackUserType$;
(function (LogFeedbackUserType$) {
    /** @deprecated use `LogFeedbackUserType$inboundSchema` instead. */
    LogFeedbackUserType$.inboundSchema = exports.LogFeedbackUserType$inboundSchema;
    /** @deprecated use `LogFeedbackUserType$outboundSchema` instead. */
    LogFeedbackUserType$.outboundSchema = exports.LogFeedbackUserType$outboundSchema;
})(LogFeedbackUserType$ || (exports.LogFeedbackUserType$ = LogFeedbackUserType$ = {}));
/** @internal */
exports.LogFeedbackUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.LogFeedbackUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.LogFeedbackUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.LogFeedbackUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackUserProperties$;
(function (LogFeedbackUserProperties$) {
    /** @deprecated use `LogFeedbackUserProperties$inboundSchema` instead. */
    LogFeedbackUserProperties$.inboundSchema = exports.LogFeedbackUserProperties$inboundSchema;
    /** @deprecated use `LogFeedbackUserProperties$outboundSchema` instead. */
    LogFeedbackUserProperties$.outboundSchema = exports.LogFeedbackUserProperties$outboundSchema;
})(LogFeedbackUserProperties$ || (exports.LogFeedbackUserProperties$ = LogFeedbackUserProperties$ = {}));
function logFeedbackUserPropertiesToJSON(logFeedbackUserProperties) {
    return JSON.stringify(exports.LogFeedbackUserProperties$outboundSchema.parse(logFeedbackUserProperties));
}
function logFeedbackUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LogFeedbackUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackUserProperties' from JSON`);
}
/** @internal */
exports.LogFeedbackResponseBody$inboundSchema = z.object({
    id: z.string(),
    type: exports.LogFeedbackType$inboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    reasons: z.nullable(z.array(z.lazy(() => exports.LogFeedbackReasons$inboundSchema)))
        .optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.LogFeedbackUserProperties$inboundSchema)).optional(),
});
/** @internal */
exports.LogFeedbackResponseBody$outboundSchema = z.object({
    id: z.string(),
    type: exports.LogFeedbackType$outboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    reasons: z.nullable(z.array(z.lazy(() => exports.LogFeedbackReasons$outboundSchema)))
        .optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.LogFeedbackUserProperties$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LogFeedbackResponseBody$;
(function (LogFeedbackResponseBody$) {
    /** @deprecated use `LogFeedbackResponseBody$inboundSchema` instead. */
    LogFeedbackResponseBody$.inboundSchema = exports.LogFeedbackResponseBody$inboundSchema;
    /** @deprecated use `LogFeedbackResponseBody$outboundSchema` instead. */
    LogFeedbackResponseBody$.outboundSchema = exports.LogFeedbackResponseBody$outboundSchema;
})(LogFeedbackResponseBody$ || (exports.LogFeedbackResponseBody$ = LogFeedbackResponseBody$ = {}));
function logFeedbackResponseBodyToJSON(logFeedbackResponseBody) {
    return JSON.stringify(exports.LogFeedbackResponseBody$outboundSchema.parse(logFeedbackResponseBody));
}
function logFeedbackResponseBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LogFeedbackResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackResponseBody' from JSON`);
}
//# sourceMappingURL=logfeedback.js.map