"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertMessageEvent$ = exports.InsertMessageEvent$outboundSchema = exports.InsertMessageEvent$inboundSchema = exports.EntityType$ = exports.EntityType$outboundSchema = exports.EntityType$inboundSchema = exports.InsertMessageEventUserProperties$ = exports.InsertMessageEventUserProperties$outboundSchema = exports.InsertMessageEventUserProperties$inboundSchema = exports.InsertMessageEventUserType$ = exports.InsertMessageEventUserType$outboundSchema = exports.InsertMessageEventUserType$inboundSchema = exports.InsertMessageEventUserId$ = exports.InsertMessageEventUserId$outboundSchema = exports.InsertMessageEventUserId$inboundSchema = exports.InsertMessageEventId$ = exports.InsertMessageEventId$outboundSchema = exports.InsertMessageEventId$inboundSchema = exports.EntityType = exports.InsertMessageEventUserType = void 0;
exports.insertMessageEventIdToJSON = insertMessageEventIdToJSON;
exports.insertMessageEventIdFromJSON = insertMessageEventIdFromJSON;
exports.insertMessageEventUserIdToJSON = insertMessageEventUserIdToJSON;
exports.insertMessageEventUserIdFromJSON = insertMessageEventUserIdFromJSON;
exports.insertMessageEventUserPropertiesToJSON = insertMessageEventUserPropertiesToJSON;
exports.insertMessageEventUserPropertiesFromJSON = insertMessageEventUserPropertiesFromJSON;
exports.insertMessageEventToJSON = insertMessageEventToJSON;
exports.insertMessageEventFromJSON = insertMessageEventFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.InsertMessageEventUserType = {
    User: "user",
    Member: "member",
};
exports.EntityType = {
    Message: "message",
};
/** @internal */
exports.InsertMessageEventId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.InsertMessageEventId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertMessageEventId$;
(function (InsertMessageEventId$) {
    /** @deprecated use `InsertMessageEventId$inboundSchema` instead. */
    InsertMessageEventId$.inboundSchema = exports.InsertMessageEventId$inboundSchema;
    /** @deprecated use `InsertMessageEventId$outboundSchema` instead. */
    InsertMessageEventId$.outboundSchema = exports.InsertMessageEventId$outboundSchema;
})(InsertMessageEventId$ || (exports.InsertMessageEventId$ = InsertMessageEventId$ = {}));
function insertMessageEventIdToJSON(insertMessageEventId) {
    return JSON.stringify(exports.InsertMessageEventId$outboundSchema.parse(insertMessageEventId));
}
function insertMessageEventIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertMessageEventId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertMessageEventId' from JSON`);
}
/** @internal */
exports.InsertMessageEventUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.InsertMessageEventUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertMessageEventUserId$;
(function (InsertMessageEventUserId$) {
    /** @deprecated use `InsertMessageEventUserId$inboundSchema` instead. */
    InsertMessageEventUserId$.inboundSchema = exports.InsertMessageEventUserId$inboundSchema;
    /** @deprecated use `InsertMessageEventUserId$outboundSchema` instead. */
    InsertMessageEventUserId$.outboundSchema = exports.InsertMessageEventUserId$outboundSchema;
})(InsertMessageEventUserId$ || (exports.InsertMessageEventUserId$ = InsertMessageEventUserId$ = {}));
function insertMessageEventUserIdToJSON(insertMessageEventUserId) {
    return JSON.stringify(exports.InsertMessageEventUserId$outboundSchema.parse(insertMessageEventUserId));
}
function insertMessageEventUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertMessageEventUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertMessageEventUserId' from JSON`);
}
/** @internal */
exports.InsertMessageEventUserType$inboundSchema = z.nativeEnum(exports.InsertMessageEventUserType);
/** @internal */
exports.InsertMessageEventUserType$outboundSchema = exports.InsertMessageEventUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertMessageEventUserType$;
(function (InsertMessageEventUserType$) {
    /** @deprecated use `InsertMessageEventUserType$inboundSchema` instead. */
    InsertMessageEventUserType$.inboundSchema = exports.InsertMessageEventUserType$inboundSchema;
    /** @deprecated use `InsertMessageEventUserType$outboundSchema` instead. */
    InsertMessageEventUserType$.outboundSchema = exports.InsertMessageEventUserType$outboundSchema;
})(InsertMessageEventUserType$ || (exports.InsertMessageEventUserType$ = InsertMessageEventUserType$ = {}));
/** @internal */
exports.InsertMessageEventUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.InsertMessageEventUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.InsertMessageEventUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.InsertMessageEventUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertMessageEventUserProperties$;
(function (InsertMessageEventUserProperties$) {
    /** @deprecated use `InsertMessageEventUserProperties$inboundSchema` instead. */
    InsertMessageEventUserProperties$.inboundSchema = exports.InsertMessageEventUserProperties$inboundSchema;
    /** @deprecated use `InsertMessageEventUserProperties$outboundSchema` instead. */
    InsertMessageEventUserProperties$.outboundSchema = exports.InsertMessageEventUserProperties$outboundSchema;
})(InsertMessageEventUserProperties$ || (exports.InsertMessageEventUserProperties$ = InsertMessageEventUserProperties$ = {}));
function insertMessageEventUserPropertiesToJSON(insertMessageEventUserProperties) {
    return JSON.stringify(exports.InsertMessageEventUserProperties$outboundSchema.parse(insertMessageEventUserProperties));
}
function insertMessageEventUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertMessageEventUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertMessageEventUserProperties' from JSON`);
}
/** @internal */
exports.EntityType$inboundSchema = z
    .nativeEnum(exports.EntityType);
/** @internal */
exports.EntityType$outboundSchema = exports.EntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EntityType$;
(function (EntityType$) {
    /** @deprecated use `EntityType$inboundSchema` instead. */
    EntityType$.inboundSchema = exports.EntityType$inboundSchema;
    /** @deprecated use `EntityType$outboundSchema` instead. */
    EntityType$.outboundSchema = exports.EntityType$outboundSchema;
})(EntityType$ || (exports.EntityType$ = EntityType$ = {}));
/** @internal */
exports.InsertMessageEvent$inboundSchema = z.object({
    id: z.string().optional(),
    type: z.string(),
    messageId: z.string(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.InsertMessageEventUserProperties$inboundSchema)).optional(),
    entityType: exports.EntityType$inboundSchema,
});
/** @internal */
exports.InsertMessageEvent$outboundSchema = z.object({
    id: z.string().optional(),
    type: z.string(),
    messageId: z.string(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.InsertMessageEventUserProperties$outboundSchema)).optional(),
    entityType: exports.EntityType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertMessageEvent$;
(function (InsertMessageEvent$) {
    /** @deprecated use `InsertMessageEvent$inboundSchema` instead. */
    InsertMessageEvent$.inboundSchema = exports.InsertMessageEvent$inboundSchema;
    /** @deprecated use `InsertMessageEvent$outboundSchema` instead. */
    InsertMessageEvent$.outboundSchema = exports.InsertMessageEvent$outboundSchema;
})(InsertMessageEvent$ || (exports.InsertMessageEvent$ = InsertMessageEvent$ = {}));
function insertMessageEventToJSON(insertMessageEvent) {
    return JSON.stringify(exports.InsertMessageEvent$outboundSchema.parse(insertMessageEvent));
}
function insertMessageEventFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertMessageEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertMessageEvent' from JSON`);
}
//# sourceMappingURL=insertmessageevent.js.map