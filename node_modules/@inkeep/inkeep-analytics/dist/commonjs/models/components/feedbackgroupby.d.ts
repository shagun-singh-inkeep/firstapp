import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { FeedbackField } from "./feedbackfield.js";
/**
 * Group by options for feedback
 */
export type FeedbackGroupBy = {
    /**
     * Available fields for Feedback
     */
    field: FeedbackField;
    path?: Array<string> | undefined;
    includeInSelect?: boolean | undefined;
};
/** @internal */
export declare const FeedbackGroupBy$inboundSchema: z.ZodType<FeedbackGroupBy, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackGroupBy$Outbound = {
    field: string;
    path?: Array<string> | undefined;
    includeInSelect: boolean;
};
/** @internal */
export declare const FeedbackGroupBy$outboundSchema: z.ZodType<FeedbackGroupBy$Outbound, z.ZodTypeDef, FeedbackGroupBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackGroupBy$ {
    /** @deprecated use `FeedbackGroupBy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackGroupBy, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackGroupBy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackGroupBy$Outbound, z.ZodTypeDef, FeedbackGroupBy>;
    /** @deprecated use `FeedbackGroupBy$Outbound` instead. */
    type Outbound = FeedbackGroupBy$Outbound;
}
export declare function feedbackGroupByToJSON(feedbackGroupBy: FeedbackGroupBy): string;
export declare function feedbackGroupByFromJSON(jsonString: string): SafeParseResult<FeedbackGroupBy, SDKValidationError>;
//# sourceMappingURL=feedbackgroupby.d.ts.map