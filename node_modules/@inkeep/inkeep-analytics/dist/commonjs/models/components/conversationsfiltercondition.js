"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationsFilterCondition$ = exports.ConversationsFilterCondition$outboundSchema = exports.ConversationsFilterCondition$inboundSchema = exports.Condition$ = exports.Condition$outboundSchema = exports.Condition$inboundSchema = exports.Seven$ = exports.Seven$outboundSchema = exports.Seven$inboundSchema = exports.Value$ = exports.Value$outboundSchema = exports.Value$inboundSchema = exports.Four$ = exports.Four$outboundSchema = exports.Four$inboundSchema = void 0;
exports.fourToJSON = fourToJSON;
exports.fourFromJSON = fourFromJSON;
exports.valueToJSON = valueToJSON;
exports.valueFromJSON = valueFromJSON;
exports.sevenToJSON = sevenToJSON;
exports.sevenFromJSON = sevenFromJSON;
exports.conditionToJSON = conditionToJSON;
exports.conditionFromJSON = conditionFromJSON;
exports.conversationsFilterConditionToJSON = conversationsFilterConditionToJSON;
exports.conversationsFilterConditionFromJSON = conversationsFilterConditionFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const conversationsfield_js_1 = require("./conversationsfield.js");
const filteroperator_js_1 = require("./filteroperator.js");
/** @internal */
exports.Four$inboundSchema = z
    .union([z.string(), z.number(), z.boolean()]);
/** @internal */
exports.Four$outboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Four$;
(function (Four$) {
    /** @deprecated use `Four$inboundSchema` instead. */
    Four$.inboundSchema = exports.Four$inboundSchema;
    /** @deprecated use `Four$outboundSchema` instead. */
    Four$.outboundSchema = exports.Four$outboundSchema;
})(Four$ || (exports.Four$ = Four$ = {}));
function fourToJSON(four) {
    return JSON.stringify(exports.Four$outboundSchema.parse(four));
}
function fourFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Four$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Four' from JSON`);
}
/** @internal */
exports.Value$inboundSchema = z
    .union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/** @internal */
exports.Value$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Value$;
(function (Value$) {
    /** @deprecated use `Value$inboundSchema` instead. */
    Value$.inboundSchema = exports.Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    Value$.outboundSchema = exports.Value$outboundSchema;
})(Value$ || (exports.Value$ = Value$ = {}));
function valueToJSON(value) {
    return JSON.stringify(exports.Value$outboundSchema.parse(value));
}
function valueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Value$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Value' from JSON`);
}
/** @internal */
exports.Seven$inboundSchema = z
    .object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/** @internal */
exports.Seven$outboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Seven$;
(function (Seven$) {
    /** @deprecated use `Seven$inboundSchema` instead. */
    Seven$.inboundSchema = exports.Seven$inboundSchema;
    /** @deprecated use `Seven$outboundSchema` instead. */
    Seven$.outboundSchema = exports.Seven$outboundSchema;
})(Seven$ || (exports.Seven$ = Seven$ = {}));
function sevenToJSON(seven) {
    return JSON.stringify(exports.Seven$outboundSchema.parse(seven));
}
function sevenFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Seven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Seven' from JSON`);
}
/** @internal */
exports.Condition$inboundSchema = z.object({
    field: conversationsfield_js_1.ConversationsField$inboundSchema,
    operator: filteroperator_js_1.FilterOperator$inboundSchema,
    value: z.any().optional(),
});
/** @internal */
exports.Condition$outboundSchema = z.object({
    field: conversationsfield_js_1.ConversationsField$outboundSchema,
    operator: filteroperator_js_1.FilterOperator$outboundSchema,
    value: z.any().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Condition$;
(function (Condition$) {
    /** @deprecated use `Condition$inboundSchema` instead. */
    Condition$.inboundSchema = exports.Condition$inboundSchema;
    /** @deprecated use `Condition$outboundSchema` instead. */
    Condition$.outboundSchema = exports.Condition$outboundSchema;
})(Condition$ || (exports.Condition$ = Condition$ = {}));
function conditionToJSON(condition) {
    return JSON.stringify(exports.Condition$outboundSchema.parse(condition));
}
function conditionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Condition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Condition' from JSON`);
}
/** @internal */
exports.ConversationsFilterCondition$inboundSchema = z.object({
    condition: z.lazy(() => exports.Condition$inboundSchema),
});
/** @internal */
exports.ConversationsFilterCondition$outboundSchema = z.object({
    condition: z.lazy(() => exports.Condition$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ConversationsFilterCondition$;
(function (ConversationsFilterCondition$) {
    /** @deprecated use `ConversationsFilterCondition$inboundSchema` instead. */
    ConversationsFilterCondition$.inboundSchema = exports.ConversationsFilterCondition$inboundSchema;
    /** @deprecated use `ConversationsFilterCondition$outboundSchema` instead. */
    ConversationsFilterCondition$.outboundSchema = exports.ConversationsFilterCondition$outboundSchema;
})(ConversationsFilterCondition$ || (exports.ConversationsFilterCondition$ = ConversationsFilterCondition$ = {}));
function conversationsFilterConditionToJSON(conversationsFilterCondition) {
    return JSON.stringify(exports.ConversationsFilterCondition$outboundSchema.parse(conversationsFilterCondition));
}
function conversationsFilterConditionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ConversationsFilterCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConversationsFilterCondition' from JSON`);
}
//# sourceMappingURL=conversationsfiltercondition.js.map