import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SemanticThreadField } from "./semanticthreadfield.js";
/**
 * Group by options for semantic threads
 */
export type SemanticThreadGroupBy = {
    /**
     * Available fields for SemanticThread
     */
    field: SemanticThreadField;
    path?: Array<string> | undefined;
    includeInSelect?: boolean | undefined;
};
/** @internal */
export declare const SemanticThreadGroupBy$inboundSchema: z.ZodType<SemanticThreadGroupBy, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadGroupBy$Outbound = {
    field: string;
    path?: Array<string> | undefined;
    includeInSelect: boolean;
};
/** @internal */
export declare const SemanticThreadGroupBy$outboundSchema: z.ZodType<SemanticThreadGroupBy$Outbound, z.ZodTypeDef, SemanticThreadGroupBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadGroupBy$ {
    /** @deprecated use `SemanticThreadGroupBy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadGroupBy, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadGroupBy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadGroupBy$Outbound, z.ZodTypeDef, SemanticThreadGroupBy>;
    /** @deprecated use `SemanticThreadGroupBy$Outbound` instead. */
    type Outbound = SemanticThreadGroupBy$Outbound;
}
export declare function semanticThreadGroupByToJSON(semanticThreadGroupBy: SemanticThreadGroupBy): string;
export declare function semanticThreadGroupByFromJSON(jsonString: string): SafeParseResult<SemanticThreadGroupBy, SDKValidationError>;
//# sourceMappingURL=semanticthreadgroupby.d.ts.map