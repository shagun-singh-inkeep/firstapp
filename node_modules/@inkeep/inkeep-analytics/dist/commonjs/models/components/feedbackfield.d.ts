import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
/**
 * Available fields for Feedback
 */
export declare const FeedbackField: {
    readonly Id: "id";
    readonly Type: "type";
    readonly MessageId: "messageId";
    readonly CreatedAt: "createdAt";
    readonly OrganizationId: "organizationId";
    readonly Reasons: "reasons";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
    readonly ConversationId: "conversationId";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly UpdatedAt: "updatedAt";
    readonly Status: "status";
};
/**
 * Available fields for Feedback
 */
export type FeedbackField = ClosedEnum<typeof FeedbackField>;
/** @internal */
export declare const FeedbackField$inboundSchema: z.ZodNativeEnum<typeof FeedbackField>;
/** @internal */
export declare const FeedbackField$outboundSchema: z.ZodNativeEnum<typeof FeedbackField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackField$ {
    /** @deprecated use `FeedbackField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly Type: "type";
        readonly MessageId: "messageId";
        readonly CreatedAt: "createdAt";
        readonly OrganizationId: "organizationId";
        readonly Reasons: "reasons";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly ConversationId: "conversationId";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly UpdatedAt: "updatedAt";
        readonly Status: "status";
    }>;
    /** @deprecated use `FeedbackField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly Type: "type";
        readonly MessageId: "messageId";
        readonly CreatedAt: "createdAt";
        readonly OrganizationId: "organizationId";
        readonly Reasons: "reasons";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly ConversationId: "conversationId";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly UpdatedAt: "updatedAt";
        readonly Status: "status";
    }>;
}
//# sourceMappingURL=feedbackfield.d.ts.map