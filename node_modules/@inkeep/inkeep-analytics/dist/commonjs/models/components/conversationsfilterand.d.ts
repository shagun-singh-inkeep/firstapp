import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ConversationsFilter, ConversationsFilter$Outbound } from "./conversationsfilter.js";
export type And = ConversationsFilter;
/**
 * ConversationsFilter AND operator
 */
export type ConversationsFilterAND = {
    /**
     * ConversationsFilter AND condition
     */
    and: Array<ConversationsFilter>;
};
/** @internal */
export declare const And$inboundSchema: z.ZodType<And, z.ZodTypeDef, unknown>;
/** @internal */
export type And$Outbound = ConversationsFilter$Outbound;
/** @internal */
export declare const And$outboundSchema: z.ZodType<And$Outbound, z.ZodTypeDef, And>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace And$ {
    /** @deprecated use `And$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `And$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsFilter$Outbound, z.ZodTypeDef, ConversationsFilter>;
    /** @deprecated use `And$Outbound` instead. */
    type Outbound = And$Outbound;
}
export declare function andToJSON(and: And): string;
export declare function andFromJSON(jsonString: string): SafeParseResult<And, SDKValidationError>;
/** @internal */
export declare const ConversationsFilterAND$inboundSchema: z.ZodType<ConversationsFilterAND, z.ZodTypeDef, unknown>;
/** @internal */
export type ConversationsFilterAND$Outbound = {
    and: Array<ConversationsFilter$Outbound>;
};
/** @internal */
export declare const ConversationsFilterAND$outboundSchema: z.ZodType<ConversationsFilterAND$Outbound, z.ZodTypeDef, ConversationsFilterAND>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConversationsFilterAND$ {
    /** @deprecated use `ConversationsFilterAND$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsFilterAND, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConversationsFilterAND$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsFilterAND$Outbound, z.ZodTypeDef, ConversationsFilterAND>;
    /** @deprecated use `ConversationsFilterAND$Outbound` instead. */
    type Outbound = ConversationsFilterAND$Outbound;
}
export declare function conversationsFilterANDToJSON(conversationsFilterAND: ConversationsFilterAND): string;
export declare function conversationsFilterANDFromJSON(jsonString: string): SafeParseResult<ConversationsFilterAND, SDKValidationError>;
//# sourceMappingURL=conversationsfilterand.d.ts.map