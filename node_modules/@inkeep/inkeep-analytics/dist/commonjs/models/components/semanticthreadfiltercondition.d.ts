import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { FilterOperator } from "./filteroperator.js";
import { SemanticThreadField } from "./semanticthreadfield.js";
export type SemanticThreadFilterConditionValueValue4 = string | number | boolean;
export type SemanticThreadFilterConditionValueValue = string | number | boolean | Array<string | number | boolean | null>;
export type SemanticThreadFilterConditionValue7 = {
    path: Array<string>;
    value: string | number | boolean | Array<string | number | boolean | null> | null;
};
export type SemanticThreadFilterConditionCondition = {
    /**
     * Available fields for SemanticThread
     */
    field: SemanticThreadField;
    /**
     * Available operators for filtering data
     */
    operator: FilterOperator;
    /**
     * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
     */
    value?: any | undefined;
};
export type SemanticThreadFilterCondition = {
    condition: SemanticThreadFilterConditionCondition;
};
/** @internal */
export declare const SemanticThreadFilterConditionValueValue4$inboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue4, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterConditionValueValue4$Outbound = string | number | boolean;
/** @internal */
export declare const SemanticThreadFilterConditionValueValue4$outboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue4$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionValueValue4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterConditionValueValue4$ {
    /** @deprecated use `SemanticThreadFilterConditionValueValue4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue4, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterConditionValueValue4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue4$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionValueValue4>;
    /** @deprecated use `SemanticThreadFilterConditionValueValue4$Outbound` instead. */
    type Outbound = SemanticThreadFilterConditionValueValue4$Outbound;
}
export declare function semanticThreadFilterConditionValueValue4ToJSON(semanticThreadFilterConditionValueValue4: SemanticThreadFilterConditionValueValue4): string;
export declare function semanticThreadFilterConditionValueValue4FromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterConditionValueValue4, SDKValidationError>;
/** @internal */
export declare const SemanticThreadFilterConditionValueValue$inboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterConditionValueValue$Outbound = string | number | boolean | Array<string | number | boolean | null>;
/** @internal */
export declare const SemanticThreadFilterConditionValueValue$outboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionValueValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterConditionValueValue$ {
    /** @deprecated use `SemanticThreadFilterConditionValueValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterConditionValueValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterConditionValueValue$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionValueValue>;
    /** @deprecated use `SemanticThreadFilterConditionValueValue$Outbound` instead. */
    type Outbound = SemanticThreadFilterConditionValueValue$Outbound;
}
export declare function semanticThreadFilterConditionValueValueToJSON(semanticThreadFilterConditionValueValue: SemanticThreadFilterConditionValueValue): string;
export declare function semanticThreadFilterConditionValueValueFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterConditionValueValue, SDKValidationError>;
/** @internal */
export declare const SemanticThreadFilterConditionValue7$inboundSchema: z.ZodType<SemanticThreadFilterConditionValue7, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterConditionValue7$Outbound = {
    path: Array<string>;
    value: string | number | boolean | Array<string | number | boolean | null> | null;
};
/** @internal */
export declare const SemanticThreadFilterConditionValue7$outboundSchema: z.ZodType<SemanticThreadFilterConditionValue7$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionValue7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterConditionValue7$ {
    /** @deprecated use `SemanticThreadFilterConditionValue7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterConditionValue7, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterConditionValue7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterConditionValue7$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionValue7>;
    /** @deprecated use `SemanticThreadFilterConditionValue7$Outbound` instead. */
    type Outbound = SemanticThreadFilterConditionValue7$Outbound;
}
export declare function semanticThreadFilterConditionValue7ToJSON(semanticThreadFilterConditionValue7: SemanticThreadFilterConditionValue7): string;
export declare function semanticThreadFilterConditionValue7FromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterConditionValue7, SDKValidationError>;
/** @internal */
export declare const SemanticThreadFilterConditionCondition$inboundSchema: z.ZodType<SemanticThreadFilterConditionCondition, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterConditionCondition$Outbound = {
    field: string;
    operator: string;
    value?: any | undefined;
};
/** @internal */
export declare const SemanticThreadFilterConditionCondition$outboundSchema: z.ZodType<SemanticThreadFilterConditionCondition$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionCondition>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterConditionCondition$ {
    /** @deprecated use `SemanticThreadFilterConditionCondition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterConditionCondition, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterConditionCondition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterConditionCondition$Outbound, z.ZodTypeDef, SemanticThreadFilterConditionCondition>;
    /** @deprecated use `SemanticThreadFilterConditionCondition$Outbound` instead. */
    type Outbound = SemanticThreadFilterConditionCondition$Outbound;
}
export declare function semanticThreadFilterConditionConditionToJSON(semanticThreadFilterConditionCondition: SemanticThreadFilterConditionCondition): string;
export declare function semanticThreadFilterConditionConditionFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterConditionCondition, SDKValidationError>;
/** @internal */
export declare const SemanticThreadFilterCondition$inboundSchema: z.ZodType<SemanticThreadFilterCondition, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterCondition$Outbound = {
    condition: SemanticThreadFilterConditionCondition$Outbound;
};
/** @internal */
export declare const SemanticThreadFilterCondition$outboundSchema: z.ZodType<SemanticThreadFilterCondition$Outbound, z.ZodTypeDef, SemanticThreadFilterCondition>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterCondition$ {
    /** @deprecated use `SemanticThreadFilterCondition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterCondition, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterCondition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterCondition$Outbound, z.ZodTypeDef, SemanticThreadFilterCondition>;
    /** @deprecated use `SemanticThreadFilterCondition$Outbound` instead. */
    type Outbound = SemanticThreadFilterCondition$Outbound;
}
export declare function semanticThreadFilterConditionToJSON(semanticThreadFilterCondition: SemanticThreadFilterCondition): string;
export declare function semanticThreadFilterConditionFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterCondition, SDKValidationError>;
//# sourceMappingURL=semanticthreadfiltercondition.d.ts.map