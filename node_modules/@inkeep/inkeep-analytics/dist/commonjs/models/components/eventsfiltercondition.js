"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsFilterCondition$ = exports.EventsFilterCondition$outboundSchema = exports.EventsFilterCondition$inboundSchema = exports.EventsFilterConditionCondition$ = exports.EventsFilterConditionCondition$outboundSchema = exports.EventsFilterConditionCondition$inboundSchema = exports.EventsFilterConditionValue7$ = exports.EventsFilterConditionValue7$outboundSchema = exports.EventsFilterConditionValue7$inboundSchema = exports.EventsFilterConditionValueValue$ = exports.EventsFilterConditionValueValue$outboundSchema = exports.EventsFilterConditionValueValue$inboundSchema = exports.Value4$ = exports.Value4$outboundSchema = exports.Value4$inboundSchema = void 0;
exports.value4ToJSON = value4ToJSON;
exports.value4FromJSON = value4FromJSON;
exports.eventsFilterConditionValueValueToJSON = eventsFilterConditionValueValueToJSON;
exports.eventsFilterConditionValueValueFromJSON = eventsFilterConditionValueValueFromJSON;
exports.eventsFilterConditionValue7ToJSON = eventsFilterConditionValue7ToJSON;
exports.eventsFilterConditionValue7FromJSON = eventsFilterConditionValue7FromJSON;
exports.eventsFilterConditionConditionToJSON = eventsFilterConditionConditionToJSON;
exports.eventsFilterConditionConditionFromJSON = eventsFilterConditionConditionFromJSON;
exports.eventsFilterConditionToJSON = eventsFilterConditionToJSON;
exports.eventsFilterConditionFromJSON = eventsFilterConditionFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const eventsfield_js_1 = require("./eventsfield.js");
const filteroperator_js_1 = require("./filteroperator.js");
/** @internal */
exports.Value4$inboundSchema = z
    .union([z.string(), z.number(), z.boolean()]);
/** @internal */
exports.Value4$outboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Value4$;
(function (Value4$) {
    /** @deprecated use `Value4$inboundSchema` instead. */
    Value4$.inboundSchema = exports.Value4$inboundSchema;
    /** @deprecated use `Value4$outboundSchema` instead. */
    Value4$.outboundSchema = exports.Value4$outboundSchema;
})(Value4$ || (exports.Value4$ = Value4$ = {}));
function value4ToJSON(value4) {
    return JSON.stringify(exports.Value4$outboundSchema.parse(value4));
}
function value4FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Value4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Value4' from JSON`);
}
/** @internal */
exports.EventsFilterConditionValueValue$inboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/** @internal */
exports.EventsFilterConditionValueValue$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsFilterConditionValueValue$;
(function (EventsFilterConditionValueValue$) {
    /** @deprecated use `EventsFilterConditionValueValue$inboundSchema` instead. */
    EventsFilterConditionValueValue$.inboundSchema = exports.EventsFilterConditionValueValue$inboundSchema;
    /** @deprecated use `EventsFilterConditionValueValue$outboundSchema` instead. */
    EventsFilterConditionValueValue$.outboundSchema = exports.EventsFilterConditionValueValue$outboundSchema;
})(EventsFilterConditionValueValue$ || (exports.EventsFilterConditionValueValue$ = EventsFilterConditionValueValue$ = {}));
function eventsFilterConditionValueValueToJSON(eventsFilterConditionValueValue) {
    return JSON.stringify(exports.EventsFilterConditionValueValue$outboundSchema.parse(eventsFilterConditionValueValue));
}
function eventsFilterConditionValueValueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsFilterConditionValueValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterConditionValueValue' from JSON`);
}
/** @internal */
exports.EventsFilterConditionValue7$inboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/** @internal */
exports.EventsFilterConditionValue7$outboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsFilterConditionValue7$;
(function (EventsFilterConditionValue7$) {
    /** @deprecated use `EventsFilterConditionValue7$inboundSchema` instead. */
    EventsFilterConditionValue7$.inboundSchema = exports.EventsFilterConditionValue7$inboundSchema;
    /** @deprecated use `EventsFilterConditionValue7$outboundSchema` instead. */
    EventsFilterConditionValue7$.outboundSchema = exports.EventsFilterConditionValue7$outboundSchema;
})(EventsFilterConditionValue7$ || (exports.EventsFilterConditionValue7$ = EventsFilterConditionValue7$ = {}));
function eventsFilterConditionValue7ToJSON(eventsFilterConditionValue7) {
    return JSON.stringify(exports.EventsFilterConditionValue7$outboundSchema.parse(eventsFilterConditionValue7));
}
function eventsFilterConditionValue7FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsFilterConditionValue7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterConditionValue7' from JSON`);
}
/** @internal */
exports.EventsFilterConditionCondition$inboundSchema = z.object({
    field: eventsfield_js_1.EventsField$inboundSchema,
    operator: filteroperator_js_1.FilterOperator$inboundSchema,
    value: z.any().optional(),
});
/** @internal */
exports.EventsFilterConditionCondition$outboundSchema = z.object({
    field: eventsfield_js_1.EventsField$outboundSchema,
    operator: filteroperator_js_1.FilterOperator$outboundSchema,
    value: z.any().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsFilterConditionCondition$;
(function (EventsFilterConditionCondition$) {
    /** @deprecated use `EventsFilterConditionCondition$inboundSchema` instead. */
    EventsFilterConditionCondition$.inboundSchema = exports.EventsFilterConditionCondition$inboundSchema;
    /** @deprecated use `EventsFilterConditionCondition$outboundSchema` instead. */
    EventsFilterConditionCondition$.outboundSchema = exports.EventsFilterConditionCondition$outboundSchema;
})(EventsFilterConditionCondition$ || (exports.EventsFilterConditionCondition$ = EventsFilterConditionCondition$ = {}));
function eventsFilterConditionConditionToJSON(eventsFilterConditionCondition) {
    return JSON.stringify(exports.EventsFilterConditionCondition$outboundSchema.parse(eventsFilterConditionCondition));
}
function eventsFilterConditionConditionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsFilterConditionCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterConditionCondition' from JSON`);
}
/** @internal */
exports.EventsFilterCondition$inboundSchema = z.object({
    condition: z.lazy(() => exports.EventsFilterConditionCondition$inboundSchema),
});
/** @internal */
exports.EventsFilterCondition$outboundSchema = z.object({
    condition: z.lazy(() => exports.EventsFilterConditionCondition$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsFilterCondition$;
(function (EventsFilterCondition$) {
    /** @deprecated use `EventsFilterCondition$inboundSchema` instead. */
    EventsFilterCondition$.inboundSchema = exports.EventsFilterCondition$inboundSchema;
    /** @deprecated use `EventsFilterCondition$outboundSchema` instead. */
    EventsFilterCondition$.outboundSchema = exports.EventsFilterCondition$outboundSchema;
})(EventsFilterCondition$ || (exports.EventsFilterCondition$ = EventsFilterCondition$ = {}));
function eventsFilterConditionToJSON(eventsFilterCondition) {
    return JSON.stringify(exports.EventsFilterCondition$outboundSchema.parse(eventsFilterCondition));
}
function eventsFilterConditionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsFilterCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterCondition' from JSON`);
}
//# sourceMappingURL=eventsfiltercondition.js.map