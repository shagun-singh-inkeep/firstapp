"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemanticThreadFilterCondition$ = exports.SemanticThreadFilterCondition$outboundSchema = exports.SemanticThreadFilterCondition$inboundSchema = exports.SemanticThreadFilterConditionCondition$ = exports.SemanticThreadFilterConditionCondition$outboundSchema = exports.SemanticThreadFilterConditionCondition$inboundSchema = exports.SemanticThreadFilterConditionValue7$ = exports.SemanticThreadFilterConditionValue7$outboundSchema = exports.SemanticThreadFilterConditionValue7$inboundSchema = exports.SemanticThreadFilterConditionValueValue$ = exports.SemanticThreadFilterConditionValueValue$outboundSchema = exports.SemanticThreadFilterConditionValueValue$inboundSchema = exports.SemanticThreadFilterConditionValueValue4$ = exports.SemanticThreadFilterConditionValueValue4$outboundSchema = exports.SemanticThreadFilterConditionValueValue4$inboundSchema = void 0;
exports.semanticThreadFilterConditionValueValue4ToJSON = semanticThreadFilterConditionValueValue4ToJSON;
exports.semanticThreadFilterConditionValueValue4FromJSON = semanticThreadFilterConditionValueValue4FromJSON;
exports.semanticThreadFilterConditionValueValueToJSON = semanticThreadFilterConditionValueValueToJSON;
exports.semanticThreadFilterConditionValueValueFromJSON = semanticThreadFilterConditionValueValueFromJSON;
exports.semanticThreadFilterConditionValue7ToJSON = semanticThreadFilterConditionValue7ToJSON;
exports.semanticThreadFilterConditionValue7FromJSON = semanticThreadFilterConditionValue7FromJSON;
exports.semanticThreadFilterConditionConditionToJSON = semanticThreadFilterConditionConditionToJSON;
exports.semanticThreadFilterConditionConditionFromJSON = semanticThreadFilterConditionConditionFromJSON;
exports.semanticThreadFilterConditionToJSON = semanticThreadFilterConditionToJSON;
exports.semanticThreadFilterConditionFromJSON = semanticThreadFilterConditionFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const filteroperator_js_1 = require("./filteroperator.js");
const semanticthreadfield_js_1 = require("./semanticthreadfield.js");
/** @internal */
exports.SemanticThreadFilterConditionValueValue4$inboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/** @internal */
exports.SemanticThreadFilterConditionValueValue4$outboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadFilterConditionValueValue4$;
(function (SemanticThreadFilterConditionValueValue4$) {
    /** @deprecated use `SemanticThreadFilterConditionValueValue4$inboundSchema` instead. */
    SemanticThreadFilterConditionValueValue4$.inboundSchema = exports.SemanticThreadFilterConditionValueValue4$inboundSchema;
    /** @deprecated use `SemanticThreadFilterConditionValueValue4$outboundSchema` instead. */
    SemanticThreadFilterConditionValueValue4$.outboundSchema = exports.SemanticThreadFilterConditionValueValue4$outboundSchema;
})(SemanticThreadFilterConditionValueValue4$ || (exports.SemanticThreadFilterConditionValueValue4$ = SemanticThreadFilterConditionValueValue4$ = {}));
function semanticThreadFilterConditionValueValue4ToJSON(semanticThreadFilterConditionValueValue4) {
    return JSON.stringify(exports.SemanticThreadFilterConditionValueValue4$outboundSchema.parse(semanticThreadFilterConditionValueValue4));
}
function semanticThreadFilterConditionValueValue4FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadFilterConditionValueValue4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadFilterConditionValueValue4' from JSON`);
}
/** @internal */
exports.SemanticThreadFilterConditionValueValue$inboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/** @internal */
exports.SemanticThreadFilterConditionValueValue$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadFilterConditionValueValue$;
(function (SemanticThreadFilterConditionValueValue$) {
    /** @deprecated use `SemanticThreadFilterConditionValueValue$inboundSchema` instead. */
    SemanticThreadFilterConditionValueValue$.inboundSchema = exports.SemanticThreadFilterConditionValueValue$inboundSchema;
    /** @deprecated use `SemanticThreadFilterConditionValueValue$outboundSchema` instead. */
    SemanticThreadFilterConditionValueValue$.outboundSchema = exports.SemanticThreadFilterConditionValueValue$outboundSchema;
})(SemanticThreadFilterConditionValueValue$ || (exports.SemanticThreadFilterConditionValueValue$ = SemanticThreadFilterConditionValueValue$ = {}));
function semanticThreadFilterConditionValueValueToJSON(semanticThreadFilterConditionValueValue) {
    return JSON.stringify(exports.SemanticThreadFilterConditionValueValue$outboundSchema.parse(semanticThreadFilterConditionValueValue));
}
function semanticThreadFilterConditionValueValueFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadFilterConditionValueValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadFilterConditionValueValue' from JSON`);
}
/** @internal */
exports.SemanticThreadFilterConditionValue7$inboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/** @internal */
exports.SemanticThreadFilterConditionValue7$outboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadFilterConditionValue7$;
(function (SemanticThreadFilterConditionValue7$) {
    /** @deprecated use `SemanticThreadFilterConditionValue7$inboundSchema` instead. */
    SemanticThreadFilterConditionValue7$.inboundSchema = exports.SemanticThreadFilterConditionValue7$inboundSchema;
    /** @deprecated use `SemanticThreadFilterConditionValue7$outboundSchema` instead. */
    SemanticThreadFilterConditionValue7$.outboundSchema = exports.SemanticThreadFilterConditionValue7$outboundSchema;
})(SemanticThreadFilterConditionValue7$ || (exports.SemanticThreadFilterConditionValue7$ = SemanticThreadFilterConditionValue7$ = {}));
function semanticThreadFilterConditionValue7ToJSON(semanticThreadFilterConditionValue7) {
    return JSON.stringify(exports.SemanticThreadFilterConditionValue7$outboundSchema.parse(semanticThreadFilterConditionValue7));
}
function semanticThreadFilterConditionValue7FromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadFilterConditionValue7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadFilterConditionValue7' from JSON`);
}
/** @internal */
exports.SemanticThreadFilterConditionCondition$inboundSchema = z.object({
    field: semanticthreadfield_js_1.SemanticThreadField$inboundSchema,
    operator: filteroperator_js_1.FilterOperator$inboundSchema,
    value: z.any().optional(),
});
/** @internal */
exports.SemanticThreadFilterConditionCondition$outboundSchema = z.object({
    field: semanticthreadfield_js_1.SemanticThreadField$outboundSchema,
    operator: filteroperator_js_1.FilterOperator$outboundSchema,
    value: z.any().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadFilterConditionCondition$;
(function (SemanticThreadFilterConditionCondition$) {
    /** @deprecated use `SemanticThreadFilterConditionCondition$inboundSchema` instead. */
    SemanticThreadFilterConditionCondition$.inboundSchema = exports.SemanticThreadFilterConditionCondition$inboundSchema;
    /** @deprecated use `SemanticThreadFilterConditionCondition$outboundSchema` instead. */
    SemanticThreadFilterConditionCondition$.outboundSchema = exports.SemanticThreadFilterConditionCondition$outboundSchema;
})(SemanticThreadFilterConditionCondition$ || (exports.SemanticThreadFilterConditionCondition$ = SemanticThreadFilterConditionCondition$ = {}));
function semanticThreadFilterConditionConditionToJSON(semanticThreadFilterConditionCondition) {
    return JSON.stringify(exports.SemanticThreadFilterConditionCondition$outboundSchema.parse(semanticThreadFilterConditionCondition));
}
function semanticThreadFilterConditionConditionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadFilterConditionCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadFilterConditionCondition' from JSON`);
}
/** @internal */
exports.SemanticThreadFilterCondition$inboundSchema = z.object({
    condition: z.lazy(() => exports.SemanticThreadFilterConditionCondition$inboundSchema),
});
/** @internal */
exports.SemanticThreadFilterCondition$outboundSchema = z.object({
    condition: z.lazy(() => exports.SemanticThreadFilterConditionCondition$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadFilterCondition$;
(function (SemanticThreadFilterCondition$) {
    /** @deprecated use `SemanticThreadFilterCondition$inboundSchema` instead. */
    SemanticThreadFilterCondition$.inboundSchema = exports.SemanticThreadFilterCondition$inboundSchema;
    /** @deprecated use `SemanticThreadFilterCondition$outboundSchema` instead. */
    SemanticThreadFilterCondition$.outboundSchema = exports.SemanticThreadFilterCondition$outboundSchema;
})(SemanticThreadFilterCondition$ || (exports.SemanticThreadFilterCondition$ = SemanticThreadFilterCondition$ = {}));
function semanticThreadFilterConditionToJSON(semanticThreadFilterCondition) {
    return JSON.stringify(exports.SemanticThreadFilterCondition$outboundSchema.parse(semanticThreadFilterCondition));
}
function semanticThreadFilterConditionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadFilterCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadFilterCondition' from JSON`);
}
//# sourceMappingURL=semanticthreadfiltercondition.js.map