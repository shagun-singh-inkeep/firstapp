"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuerySemanticThreadsResponseData$ = exports.QuerySemanticThreadsResponseData$outboundSchema = exports.QuerySemanticThreadsResponseData$inboundSchema = exports.SemanticThreadResultItem$ = exports.SemanticThreadResultItem$outboundSchema = exports.SemanticThreadResultItem$inboundSchema = exports.QuerySemanticThreadsResponseDataUserProperties$ = exports.QuerySemanticThreadsResponseDataUserProperties$outboundSchema = exports.QuerySemanticThreadsResponseDataUserProperties$inboundSchema = exports.QuerySemanticThreadsResponseDataUserType$ = exports.QuerySemanticThreadsResponseDataUserType$outboundSchema = exports.QuerySemanticThreadsResponseDataUserType$inboundSchema = exports.QuerySemanticThreadsResponseDataUserId$ = exports.QuerySemanticThreadsResponseDataUserId$outboundSchema = exports.QuerySemanticThreadsResponseDataUserId$inboundSchema = exports.QuerySemanticThreadsResponseDataId$ = exports.QuerySemanticThreadsResponseDataId$outboundSchema = exports.QuerySemanticThreadsResponseDataId$inboundSchema = exports.QuerySemanticThreadsResponseDataUserType = void 0;
exports.querySemanticThreadsResponseDataIdToJSON = querySemanticThreadsResponseDataIdToJSON;
exports.querySemanticThreadsResponseDataIdFromJSON = querySemanticThreadsResponseDataIdFromJSON;
exports.querySemanticThreadsResponseDataUserIdToJSON = querySemanticThreadsResponseDataUserIdToJSON;
exports.querySemanticThreadsResponseDataUserIdFromJSON = querySemanticThreadsResponseDataUserIdFromJSON;
exports.querySemanticThreadsResponseDataUserPropertiesToJSON = querySemanticThreadsResponseDataUserPropertiesToJSON;
exports.querySemanticThreadsResponseDataUserPropertiesFromJSON = querySemanticThreadsResponseDataUserPropertiesFromJSON;
exports.semanticThreadResultItemToJSON = semanticThreadResultItemToJSON;
exports.semanticThreadResultItemFromJSON = semanticThreadResultItemFromJSON;
exports.querySemanticThreadsResponseDataToJSON = querySemanticThreadsResponseDataToJSON;
exports.querySemanticThreadsResponseDataFromJSON = querySemanticThreadsResponseDataFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.QuerySemanticThreadsResponseDataUserType = {
    User: "user",
    Member: "member",
};
/** @internal */
exports.QuerySemanticThreadsResponseDataId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.QuerySemanticThreadsResponseDataId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QuerySemanticThreadsResponseDataId$;
(function (QuerySemanticThreadsResponseDataId$) {
    /** @deprecated use `QuerySemanticThreadsResponseDataId$inboundSchema` instead. */
    QuerySemanticThreadsResponseDataId$.inboundSchema = exports.QuerySemanticThreadsResponseDataId$inboundSchema;
    /** @deprecated use `QuerySemanticThreadsResponseDataId$outboundSchema` instead. */
    QuerySemanticThreadsResponseDataId$.outboundSchema = exports.QuerySemanticThreadsResponseDataId$outboundSchema;
})(QuerySemanticThreadsResponseDataId$ || (exports.QuerySemanticThreadsResponseDataId$ = QuerySemanticThreadsResponseDataId$ = {}));
function querySemanticThreadsResponseDataIdToJSON(querySemanticThreadsResponseDataId) {
    return JSON.stringify(exports.QuerySemanticThreadsResponseDataId$outboundSchema.parse(querySemanticThreadsResponseDataId));
}
function querySemanticThreadsResponseDataIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QuerySemanticThreadsResponseDataId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QuerySemanticThreadsResponseDataId' from JSON`);
}
/** @internal */
exports.QuerySemanticThreadsResponseDataUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.QuerySemanticThreadsResponseDataUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QuerySemanticThreadsResponseDataUserId$;
(function (QuerySemanticThreadsResponseDataUserId$) {
    /** @deprecated use `QuerySemanticThreadsResponseDataUserId$inboundSchema` instead. */
    QuerySemanticThreadsResponseDataUserId$.inboundSchema = exports.QuerySemanticThreadsResponseDataUserId$inboundSchema;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserId$outboundSchema` instead. */
    QuerySemanticThreadsResponseDataUserId$.outboundSchema = exports.QuerySemanticThreadsResponseDataUserId$outboundSchema;
})(QuerySemanticThreadsResponseDataUserId$ || (exports.QuerySemanticThreadsResponseDataUserId$ = QuerySemanticThreadsResponseDataUserId$ = {}));
function querySemanticThreadsResponseDataUserIdToJSON(querySemanticThreadsResponseDataUserId) {
    return JSON.stringify(exports.QuerySemanticThreadsResponseDataUserId$outboundSchema.parse(querySemanticThreadsResponseDataUserId));
}
function querySemanticThreadsResponseDataUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QuerySemanticThreadsResponseDataUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QuerySemanticThreadsResponseDataUserId' from JSON`);
}
/** @internal */
exports.QuerySemanticThreadsResponseDataUserType$inboundSchema = z
    .nativeEnum(exports.QuerySemanticThreadsResponseDataUserType);
/** @internal */
exports.QuerySemanticThreadsResponseDataUserType$outboundSchema = exports.QuerySemanticThreadsResponseDataUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QuerySemanticThreadsResponseDataUserType$;
(function (QuerySemanticThreadsResponseDataUserType$) {
    /** @deprecated use `QuerySemanticThreadsResponseDataUserType$inboundSchema` instead. */
    QuerySemanticThreadsResponseDataUserType$.inboundSchema = exports.QuerySemanticThreadsResponseDataUserType$inboundSchema;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserType$outboundSchema` instead. */
    QuerySemanticThreadsResponseDataUserType$.outboundSchema = exports.QuerySemanticThreadsResponseDataUserType$outboundSchema;
})(QuerySemanticThreadsResponseDataUserType$ || (exports.QuerySemanticThreadsResponseDataUserType$ = QuerySemanticThreadsResponseDataUserType$ = {}));
/** @internal */
exports.QuerySemanticThreadsResponseDataUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.QuerySemanticThreadsResponseDataUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.QuerySemanticThreadsResponseDataUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.QuerySemanticThreadsResponseDataUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QuerySemanticThreadsResponseDataUserProperties$;
(function (QuerySemanticThreadsResponseDataUserProperties$) {
    /** @deprecated use `QuerySemanticThreadsResponseDataUserProperties$inboundSchema` instead. */
    QuerySemanticThreadsResponseDataUserProperties$.inboundSchema = exports.QuerySemanticThreadsResponseDataUserProperties$inboundSchema;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserProperties$outboundSchema` instead. */
    QuerySemanticThreadsResponseDataUserProperties$.outboundSchema = exports.QuerySemanticThreadsResponseDataUserProperties$outboundSchema;
})(QuerySemanticThreadsResponseDataUserProperties$ || (exports.QuerySemanticThreadsResponseDataUserProperties$ = QuerySemanticThreadsResponseDataUserProperties$ = {}));
function querySemanticThreadsResponseDataUserPropertiesToJSON(querySemanticThreadsResponseDataUserProperties) {
    return JSON.stringify(exports.QuerySemanticThreadsResponseDataUserProperties$outboundSchema.parse(querySemanticThreadsResponseDataUserProperties));
}
function querySemanticThreadsResponseDataUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QuerySemanticThreadsResponseDataUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QuerySemanticThreadsResponseDataUserProperties' from JSON`);
}
/** @internal */
exports.SemanticThreadResultItem$inboundSchema = z.object({
    id: z.string().optional(),
    messageIds: z.any().optional(),
    messagesCount: z.any().optional(),
    organizationId: z.string().optional(),
    question: z.string().optional(),
    questionLength: z.any().optional(),
    answer: z.string().optional(),
    isOnTopic: z.any().optional(),
    isClear: z.any().optional(),
    isDocumented: z.any().optional(),
    isFeatureSupported: z.any().optional(),
    isAnswerConfident: z.any().optional(),
    gapSummary: z.any().optional(),
    subject: z.any().optional(),
    category: z.any().optional(),
    languages: z.any().optional(),
    firstPartyEntities: z.any().optional(),
    thirdPartyEntities: z.any().optional(),
    emotion: z.any().optional(),
    sentiment: z.any().optional(),
    questionType: z.any().optional(),
    projectId: z.string().optional(),
    integrationId: z.string().optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.QuerySemanticThreadsResponseDataUserProperties$inboundSchema)).optional(),
    firstMessageTime: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    lastMessageTime: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    hasPositiveFeedback: z.boolean().optional(),
    hasNegativeFeedback: z.boolean().optional(),
    conversationIds: z.array(z.string()).optional(),
    areAIAnnotationsVerified: z.any().optional(),
    isInitialQuestionAnswer: z.boolean().optional(),
    sum: z.number().optional(),
    count: z.number().optional(),
    avg: z.number().optional(),
    min: z.number().optional(),
    max: z.number().optional(),
    id_hour: z.string().optional(),
    id_day: z.string().optional(),
    id_week: z.string().optional(),
    id_month: z.string().optional(),
    messageIds_hour: z.string().optional(),
    messageIds_day: z.string().optional(),
    messageIds_week: z.string().optional(),
    messageIds_month: z.string().optional(),
    messagesCount_hour: z.string().optional(),
    messagesCount_day: z.string().optional(),
    messagesCount_week: z.string().optional(),
    messagesCount_month: z.string().optional(),
    organizationId_hour: z.string().optional(),
    organizationId_day: z.string().optional(),
    organizationId_week: z.string().optional(),
    organizationId_month: z.string().optional(),
    question_hour: z.string().optional(),
    question_day: z.string().optional(),
    question_week: z.string().optional(),
    question_month: z.string().optional(),
    questionLength_hour: z.string().optional(),
    questionLength_day: z.string().optional(),
    questionLength_week: z.string().optional(),
    questionLength_month: z.string().optional(),
    answer_hour: z.string().optional(),
    answer_day: z.string().optional(),
    answer_week: z.string().optional(),
    answer_month: z.string().optional(),
    isOnTopic_hour: z.string().optional(),
    isOnTopic_day: z.string().optional(),
    isOnTopic_week: z.string().optional(),
    isOnTopic_month: z.string().optional(),
    isClear_hour: z.string().optional(),
    isClear_day: z.string().optional(),
    isClear_week: z.string().optional(),
    isClear_month: z.string().optional(),
    isDocumented_hour: z.string().optional(),
    isDocumented_day: z.string().optional(),
    isDocumented_week: z.string().optional(),
    isDocumented_month: z.string().optional(),
    isFeatureSupported_hour: z.string().optional(),
    isFeatureSupported_day: z.string().optional(),
    isFeatureSupported_week: z.string().optional(),
    isFeatureSupported_month: z.string().optional(),
    isAnswerConfident_hour: z.string().optional(),
    isAnswerConfident_day: z.string().optional(),
    isAnswerConfident_week: z.string().optional(),
    isAnswerConfident_month: z.string().optional(),
    gapSummary_hour: z.string().optional(),
    gapSummary_day: z.string().optional(),
    gapSummary_week: z.string().optional(),
    gapSummary_month: z.string().optional(),
    subject_hour: z.string().optional(),
    subject_day: z.string().optional(),
    subject_week: z.string().optional(),
    subject_month: z.string().optional(),
    category_hour: z.string().optional(),
    category_day: z.string().optional(),
    category_week: z.string().optional(),
    category_month: z.string().optional(),
    languages_hour: z.string().optional(),
    languages_day: z.string().optional(),
    languages_week: z.string().optional(),
    languages_month: z.string().optional(),
    firstPartyEntities_hour: z.string().optional(),
    firstPartyEntities_day: z.string().optional(),
    firstPartyEntities_week: z.string().optional(),
    firstPartyEntities_month: z.string().optional(),
    thirdPartyEntities_hour: z.string().optional(),
    thirdPartyEntities_day: z.string().optional(),
    thirdPartyEntities_week: z.string().optional(),
    thirdPartyEntities_month: z.string().optional(),
    emotion_hour: z.string().optional(),
    emotion_day: z.string().optional(),
    emotion_week: z.string().optional(),
    emotion_month: z.string().optional(),
    sentiment_hour: z.string().optional(),
    sentiment_day: z.string().optional(),
    sentiment_week: z.string().optional(),
    sentiment_month: z.string().optional(),
    questionType_hour: z.string().optional(),
    questionType_day: z.string().optional(),
    questionType_week: z.string().optional(),
    questionType_month: z.string().optional(),
    projectId_hour: z.string().optional(),
    projectId_day: z.string().optional(),
    projectId_week: z.string().optional(),
    projectId_month: z.string().optional(),
    integrationId_hour: z.string().optional(),
    integrationId_day: z.string().optional(),
    integrationId_week: z.string().optional(),
    integrationId_month: z.string().optional(),
    properties_hour: z.string().optional(),
    properties_day: z.string().optional(),
    properties_week: z.string().optional(),
    properties_month: z.string().optional(),
    userProperties_hour: z.string().optional(),
    userProperties_day: z.string().optional(),
    userProperties_week: z.string().optional(),
    userProperties_month: z.string().optional(),
    firstMessageTime_hour: z.string().optional(),
    firstMessageTime_day: z.string().optional(),
    firstMessageTime_week: z.string().optional(),
    firstMessageTime_month: z.string().optional(),
    lastMessageTime_hour: z.string().optional(),
    lastMessageTime_day: z.string().optional(),
    lastMessageTime_week: z.string().optional(),
    lastMessageTime_month: z.string().optional(),
    lastUpdated_hour: z.string().optional(),
    lastUpdated_day: z.string().optional(),
    lastUpdated_week: z.string().optional(),
    lastUpdated_month: z.string().optional(),
    hasPositiveFeedback_hour: z.string().optional(),
    hasPositiveFeedback_day: z.string().optional(),
    hasPositiveFeedback_week: z.string().optional(),
    hasPositiveFeedback_month: z.string().optional(),
    hasNegativeFeedback_hour: z.string().optional(),
    hasNegativeFeedback_day: z.string().optional(),
    hasNegativeFeedback_week: z.string().optional(),
    hasNegativeFeedback_month: z.string().optional(),
    conversationIds_hour: z.string().optional(),
    conversationIds_day: z.string().optional(),
    conversationIds_week: z.string().optional(),
    conversationIds_month: z.string().optional(),
    areAIAnnotationsVerified_hour: z.string().optional(),
    areAIAnnotationsVerified_day: z.string().optional(),
    areAIAnnotationsVerified_week: z.string().optional(),
    areAIAnnotationsVerified_month: z.string().optional(),
    isInitialQuestionAnswer_hour: z.string().optional(),
    isInitialQuestionAnswer_day: z.string().optional(),
    isInitialQuestionAnswer_week: z.string().optional(),
    isInitialQuestionAnswer_month: z.string().optional(),
    sum_id: z.number().optional(),
    sum_messageIds: z.number().optional(),
    sum_messagesCount: z.number().optional(),
    sum_organizationId: z.number().optional(),
    sum_question: z.number().optional(),
    sum_questionLength: z.number().optional(),
    sum_answer: z.number().optional(),
    sum_isOnTopic: z.number().optional(),
    sum_isClear: z.number().optional(),
    sum_isDocumented: z.number().optional(),
    sum_isFeatureSupported: z.number().optional(),
    sum_isAnswerConfident: z.number().optional(),
    sum_gapSummary: z.number().optional(),
    sum_subject: z.number().optional(),
    sum_category: z.number().optional(),
    sum_languages: z.number().optional(),
    sum_firstPartyEntities: z.number().optional(),
    sum_thirdPartyEntities: z.number().optional(),
    sum_emotion: z.number().optional(),
    sum_sentiment: z.number().optional(),
    sum_questionType: z.number().optional(),
    sum_projectId: z.number().optional(),
    sum_integrationId: z.number().optional(),
    sum_properties: z.number().optional(),
    sum_userProperties: z.number().optional(),
    sum_firstMessageTime: z.number().optional(),
    sum_lastMessageTime: z.number().optional(),
    sum_lastUpdated: z.number().optional(),
    sum_hasPositiveFeedback: z.number().optional(),
    sum_hasNegativeFeedback: z.number().optional(),
    sum_conversationIds: z.number().optional(),
    sum_areAIAnnotationsVerified: z.number().optional(),
    sum_isInitialQuestionAnswer: z.number().optional(),
    count_id: z.number().optional(),
    count_messageIds: z.number().optional(),
    count_messagesCount: z.number().optional(),
    count_organizationId: z.number().optional(),
    count_question: z.number().optional(),
    count_questionLength: z.number().optional(),
    count_answer: z.number().optional(),
    count_isOnTopic: z.number().optional(),
    count_isClear: z.number().optional(),
    count_isDocumented: z.number().optional(),
    count_isFeatureSupported: z.number().optional(),
    count_isAnswerConfident: z.number().optional(),
    count_gapSummary: z.number().optional(),
    count_subject: z.number().optional(),
    count_category: z.number().optional(),
    count_languages: z.number().optional(),
    count_firstPartyEntities: z.number().optional(),
    count_thirdPartyEntities: z.number().optional(),
    count_emotion: z.number().optional(),
    count_sentiment: z.number().optional(),
    count_questionType: z.number().optional(),
    count_projectId: z.number().optional(),
    count_integrationId: z.number().optional(),
    count_properties: z.number().optional(),
    count_userProperties: z.number().optional(),
    count_firstMessageTime: z.number().optional(),
    count_lastMessageTime: z.number().optional(),
    count_lastUpdated: z.number().optional(),
    count_hasPositiveFeedback: z.number().optional(),
    count_hasNegativeFeedback: z.number().optional(),
    count_conversationIds: z.number().optional(),
    count_areAIAnnotationsVerified: z.number().optional(),
    count_isInitialQuestionAnswer: z.number().optional(),
    avg_id: z.number().optional(),
    avg_messageIds: z.number().optional(),
    avg_messagesCount: z.number().optional(),
    avg_organizationId: z.number().optional(),
    avg_question: z.number().optional(),
    avg_questionLength: z.number().optional(),
    avg_answer: z.number().optional(),
    avg_isOnTopic: z.number().optional(),
    avg_isClear: z.number().optional(),
    avg_isDocumented: z.number().optional(),
    avg_isFeatureSupported: z.number().optional(),
    avg_isAnswerConfident: z.number().optional(),
    avg_gapSummary: z.number().optional(),
    avg_subject: z.number().optional(),
    avg_category: z.number().optional(),
    avg_languages: z.number().optional(),
    avg_firstPartyEntities: z.number().optional(),
    avg_thirdPartyEntities: z.number().optional(),
    avg_emotion: z.number().optional(),
    avg_sentiment: z.number().optional(),
    avg_questionType: z.number().optional(),
    avg_projectId: z.number().optional(),
    avg_integrationId: z.number().optional(),
    avg_properties: z.number().optional(),
    avg_userProperties: z.number().optional(),
    avg_firstMessageTime: z.number().optional(),
    avg_lastMessageTime: z.number().optional(),
    avg_lastUpdated: z.number().optional(),
    avg_hasPositiveFeedback: z.number().optional(),
    avg_hasNegativeFeedback: z.number().optional(),
    avg_conversationIds: z.number().optional(),
    avg_areAIAnnotationsVerified: z.number().optional(),
    avg_isInitialQuestionAnswer: z.number().optional(),
    min_id: z.number().optional(),
    min_messageIds: z.number().optional(),
    min_messagesCount: z.number().optional(),
    min_organizationId: z.number().optional(),
    min_question: z.number().optional(),
    min_questionLength: z.number().optional(),
    min_answer: z.number().optional(),
    min_isOnTopic: z.number().optional(),
    min_isClear: z.number().optional(),
    min_isDocumented: z.number().optional(),
    min_isFeatureSupported: z.number().optional(),
    min_isAnswerConfident: z.number().optional(),
    min_gapSummary: z.number().optional(),
    min_subject: z.number().optional(),
    min_category: z.number().optional(),
    min_languages: z.number().optional(),
    min_firstPartyEntities: z.number().optional(),
    min_thirdPartyEntities: z.number().optional(),
    min_emotion: z.number().optional(),
    min_sentiment: z.number().optional(),
    min_questionType: z.number().optional(),
    min_projectId: z.number().optional(),
    min_integrationId: z.number().optional(),
    min_properties: z.number().optional(),
    min_userProperties: z.number().optional(),
    min_firstMessageTime: z.number().optional(),
    min_lastMessageTime: z.number().optional(),
    min_lastUpdated: z.number().optional(),
    min_hasPositiveFeedback: z.number().optional(),
    min_hasNegativeFeedback: z.number().optional(),
    min_conversationIds: z.number().optional(),
    min_areAIAnnotationsVerified: z.number().optional(),
    min_isInitialQuestionAnswer: z.number().optional(),
    max_id: z.number().optional(),
    max_messageIds: z.number().optional(),
    max_messagesCount: z.number().optional(),
    max_organizationId: z.number().optional(),
    max_question: z.number().optional(),
    max_questionLength: z.number().optional(),
    max_answer: z.number().optional(),
    max_isOnTopic: z.number().optional(),
    max_isClear: z.number().optional(),
    max_isDocumented: z.number().optional(),
    max_isFeatureSupported: z.number().optional(),
    max_isAnswerConfident: z.number().optional(),
    max_gapSummary: z.number().optional(),
    max_subject: z.number().optional(),
    max_category: z.number().optional(),
    max_languages: z.number().optional(),
    max_firstPartyEntities: z.number().optional(),
    max_thirdPartyEntities: z.number().optional(),
    max_emotion: z.number().optional(),
    max_sentiment: z.number().optional(),
    max_questionType: z.number().optional(),
    max_projectId: z.number().optional(),
    max_integrationId: z.number().optional(),
    max_properties: z.number().optional(),
    max_userProperties: z.number().optional(),
    max_firstMessageTime: z.number().optional(),
    max_lastMessageTime: z.number().optional(),
    max_lastUpdated: z.number().optional(),
    max_hasPositiveFeedback: z.number().optional(),
    max_hasNegativeFeedback: z.number().optional(),
    max_conversationIds: z.number().optional(),
    max_areAIAnnotationsVerified: z.number().optional(),
    max_isInitialQuestionAnswer: z.number().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "id_hour": "idHour",
        "id_day": "idDay",
        "id_week": "idWeek",
        "id_month": "idMonth",
        "messageIds_hour": "messageIdsHour",
        "messageIds_day": "messageIdsDay",
        "messageIds_week": "messageIdsWeek",
        "messageIds_month": "messageIdsMonth",
        "messagesCount_hour": "messagesCountHour",
        "messagesCount_day": "messagesCountDay",
        "messagesCount_week": "messagesCountWeek",
        "messagesCount_month": "messagesCountMonth",
        "organizationId_hour": "organizationIdHour",
        "organizationId_day": "organizationIdDay",
        "organizationId_week": "organizationIdWeek",
        "organizationId_month": "organizationIdMonth",
        "question_hour": "questionHour",
        "question_day": "questionDay",
        "question_week": "questionWeek",
        "question_month": "questionMonth",
        "questionLength_hour": "questionLengthHour",
        "questionLength_day": "questionLengthDay",
        "questionLength_week": "questionLengthWeek",
        "questionLength_month": "questionLengthMonth",
        "answer_hour": "answerHour",
        "answer_day": "answerDay",
        "answer_week": "answerWeek",
        "answer_month": "answerMonth",
        "isOnTopic_hour": "isOnTopicHour",
        "isOnTopic_day": "isOnTopicDay",
        "isOnTopic_week": "isOnTopicWeek",
        "isOnTopic_month": "isOnTopicMonth",
        "isClear_hour": "isClearHour",
        "isClear_day": "isClearDay",
        "isClear_week": "isClearWeek",
        "isClear_month": "isClearMonth",
        "isDocumented_hour": "isDocumentedHour",
        "isDocumented_day": "isDocumentedDay",
        "isDocumented_week": "isDocumentedWeek",
        "isDocumented_month": "isDocumentedMonth",
        "isFeatureSupported_hour": "isFeatureSupportedHour",
        "isFeatureSupported_day": "isFeatureSupportedDay",
        "isFeatureSupported_week": "isFeatureSupportedWeek",
        "isFeatureSupported_month": "isFeatureSupportedMonth",
        "isAnswerConfident_hour": "isAnswerConfidentHour",
        "isAnswerConfident_day": "isAnswerConfidentDay",
        "isAnswerConfident_week": "isAnswerConfidentWeek",
        "isAnswerConfident_month": "isAnswerConfidentMonth",
        "gapSummary_hour": "gapSummaryHour",
        "gapSummary_day": "gapSummaryDay",
        "gapSummary_week": "gapSummaryWeek",
        "gapSummary_month": "gapSummaryMonth",
        "subject_hour": "subjectHour",
        "subject_day": "subjectDay",
        "subject_week": "subjectWeek",
        "subject_month": "subjectMonth",
        "category_hour": "categoryHour",
        "category_day": "categoryDay",
        "category_week": "categoryWeek",
        "category_month": "categoryMonth",
        "languages_hour": "languagesHour",
        "languages_day": "languagesDay",
        "languages_week": "languagesWeek",
        "languages_month": "languagesMonth",
        "firstPartyEntities_hour": "firstPartyEntitiesHour",
        "firstPartyEntities_day": "firstPartyEntitiesDay",
        "firstPartyEntities_week": "firstPartyEntitiesWeek",
        "firstPartyEntities_month": "firstPartyEntitiesMonth",
        "thirdPartyEntities_hour": "thirdPartyEntitiesHour",
        "thirdPartyEntities_day": "thirdPartyEntitiesDay",
        "thirdPartyEntities_week": "thirdPartyEntitiesWeek",
        "thirdPartyEntities_month": "thirdPartyEntitiesMonth",
        "emotion_hour": "emotionHour",
        "emotion_day": "emotionDay",
        "emotion_week": "emotionWeek",
        "emotion_month": "emotionMonth",
        "sentiment_hour": "sentimentHour",
        "sentiment_day": "sentimentDay",
        "sentiment_week": "sentimentWeek",
        "sentiment_month": "sentimentMonth",
        "questionType_hour": "questionTypeHour",
        "questionType_day": "questionTypeDay",
        "questionType_week": "questionTypeWeek",
        "questionType_month": "questionTypeMonth",
        "projectId_hour": "projectIdHour",
        "projectId_day": "projectIdDay",
        "projectId_week": "projectIdWeek",
        "projectId_month": "projectIdMonth",
        "integrationId_hour": "integrationIdHour",
        "integrationId_day": "integrationIdDay",
        "integrationId_week": "integrationIdWeek",
        "integrationId_month": "integrationIdMonth",
        "properties_hour": "propertiesHour",
        "properties_day": "propertiesDay",
        "properties_week": "propertiesWeek",
        "properties_month": "propertiesMonth",
        "userProperties_hour": "userPropertiesHour",
        "userProperties_day": "userPropertiesDay",
        "userProperties_week": "userPropertiesWeek",
        "userProperties_month": "userPropertiesMonth",
        "firstMessageTime_hour": "firstMessageTimeHour",
        "firstMessageTime_day": "firstMessageTimeDay",
        "firstMessageTime_week": "firstMessageTimeWeek",
        "firstMessageTime_month": "firstMessageTimeMonth",
        "lastMessageTime_hour": "lastMessageTimeHour",
        "lastMessageTime_day": "lastMessageTimeDay",
        "lastMessageTime_week": "lastMessageTimeWeek",
        "lastMessageTime_month": "lastMessageTimeMonth",
        "lastUpdated_hour": "lastUpdatedHour",
        "lastUpdated_day": "lastUpdatedDay",
        "lastUpdated_week": "lastUpdatedWeek",
        "lastUpdated_month": "lastUpdatedMonth",
        "hasPositiveFeedback_hour": "hasPositiveFeedbackHour",
        "hasPositiveFeedback_day": "hasPositiveFeedbackDay",
        "hasPositiveFeedback_week": "hasPositiveFeedbackWeek",
        "hasPositiveFeedback_month": "hasPositiveFeedbackMonth",
        "hasNegativeFeedback_hour": "hasNegativeFeedbackHour",
        "hasNegativeFeedback_day": "hasNegativeFeedbackDay",
        "hasNegativeFeedback_week": "hasNegativeFeedbackWeek",
        "hasNegativeFeedback_month": "hasNegativeFeedbackMonth",
        "conversationIds_hour": "conversationIdsHour",
        "conversationIds_day": "conversationIdsDay",
        "conversationIds_week": "conversationIdsWeek",
        "conversationIds_month": "conversationIdsMonth",
        "areAIAnnotationsVerified_hour": "areAIAnnotationsVerifiedHour",
        "areAIAnnotationsVerified_day": "areAIAnnotationsVerifiedDay",
        "areAIAnnotationsVerified_week": "areAIAnnotationsVerifiedWeek",
        "areAIAnnotationsVerified_month": "areAIAnnotationsVerifiedMonth",
        "isInitialQuestionAnswer_hour": "isInitialQuestionAnswerHour",
        "isInitialQuestionAnswer_day": "isInitialQuestionAnswerDay",
        "isInitialQuestionAnswer_week": "isInitialQuestionAnswerWeek",
        "isInitialQuestionAnswer_month": "isInitialQuestionAnswerMonth",
        "sum_id": "sumId",
        "sum_messageIds": "sumMessageIds",
        "sum_messagesCount": "sumMessagesCount",
        "sum_organizationId": "sumOrganizationId",
        "sum_question": "sumQuestion",
        "sum_questionLength": "sumQuestionLength",
        "sum_answer": "sumAnswer",
        "sum_isOnTopic": "sumIsOnTopic",
        "sum_isClear": "sumIsClear",
        "sum_isDocumented": "sumIsDocumented",
        "sum_isFeatureSupported": "sumIsFeatureSupported",
        "sum_isAnswerConfident": "sumIsAnswerConfident",
        "sum_gapSummary": "sumGapSummary",
        "sum_subject": "sumSubject",
        "sum_category": "sumCategory",
        "sum_languages": "sumLanguages",
        "sum_firstPartyEntities": "sumFirstPartyEntities",
        "sum_thirdPartyEntities": "sumThirdPartyEntities",
        "sum_emotion": "sumEmotion",
        "sum_sentiment": "sumSentiment",
        "sum_questionType": "sumQuestionType",
        "sum_projectId": "sumProjectId",
        "sum_integrationId": "sumIntegrationId",
        "sum_properties": "sumProperties",
        "sum_userProperties": "sumUserProperties",
        "sum_firstMessageTime": "sumFirstMessageTime",
        "sum_lastMessageTime": "sumLastMessageTime",
        "sum_lastUpdated": "sumLastUpdated",
        "sum_hasPositiveFeedback": "sumHasPositiveFeedback",
        "sum_hasNegativeFeedback": "sumHasNegativeFeedback",
        "sum_conversationIds": "sumConversationIds",
        "sum_areAIAnnotationsVerified": "sumAreAIAnnotationsVerified",
        "sum_isInitialQuestionAnswer": "sumIsInitialQuestionAnswer",
        "count_id": "countId",
        "count_messageIds": "countMessageIds",
        "count_messagesCount": "countMessagesCount",
        "count_organizationId": "countOrganizationId",
        "count_question": "countQuestion",
        "count_questionLength": "countQuestionLength",
        "count_answer": "countAnswer",
        "count_isOnTopic": "countIsOnTopic",
        "count_isClear": "countIsClear",
        "count_isDocumented": "countIsDocumented",
        "count_isFeatureSupported": "countIsFeatureSupported",
        "count_isAnswerConfident": "countIsAnswerConfident",
        "count_gapSummary": "countGapSummary",
        "count_subject": "countSubject",
        "count_category": "countCategory",
        "count_languages": "countLanguages",
        "count_firstPartyEntities": "countFirstPartyEntities",
        "count_thirdPartyEntities": "countThirdPartyEntities",
        "count_emotion": "countEmotion",
        "count_sentiment": "countSentiment",
        "count_questionType": "countQuestionType",
        "count_projectId": "countProjectId",
        "count_integrationId": "countIntegrationId",
        "count_properties": "countProperties",
        "count_userProperties": "countUserProperties",
        "count_firstMessageTime": "countFirstMessageTime",
        "count_lastMessageTime": "countLastMessageTime",
        "count_lastUpdated": "countLastUpdated",
        "count_hasPositiveFeedback": "countHasPositiveFeedback",
        "count_hasNegativeFeedback": "countHasNegativeFeedback",
        "count_conversationIds": "countConversationIds",
        "count_areAIAnnotationsVerified": "countAreAIAnnotationsVerified",
        "count_isInitialQuestionAnswer": "countIsInitialQuestionAnswer",
        "avg_id": "avgId",
        "avg_messageIds": "avgMessageIds",
        "avg_messagesCount": "avgMessagesCount",
        "avg_organizationId": "avgOrganizationId",
        "avg_question": "avgQuestion",
        "avg_questionLength": "avgQuestionLength",
        "avg_answer": "avgAnswer",
        "avg_isOnTopic": "avgIsOnTopic",
        "avg_isClear": "avgIsClear",
        "avg_isDocumented": "avgIsDocumented",
        "avg_isFeatureSupported": "avgIsFeatureSupported",
        "avg_isAnswerConfident": "avgIsAnswerConfident",
        "avg_gapSummary": "avgGapSummary",
        "avg_subject": "avgSubject",
        "avg_category": "avgCategory",
        "avg_languages": "avgLanguages",
        "avg_firstPartyEntities": "avgFirstPartyEntities",
        "avg_thirdPartyEntities": "avgThirdPartyEntities",
        "avg_emotion": "avgEmotion",
        "avg_sentiment": "avgSentiment",
        "avg_questionType": "avgQuestionType",
        "avg_projectId": "avgProjectId",
        "avg_integrationId": "avgIntegrationId",
        "avg_properties": "avgProperties",
        "avg_userProperties": "avgUserProperties",
        "avg_firstMessageTime": "avgFirstMessageTime",
        "avg_lastMessageTime": "avgLastMessageTime",
        "avg_lastUpdated": "avgLastUpdated",
        "avg_hasPositiveFeedback": "avgHasPositiveFeedback",
        "avg_hasNegativeFeedback": "avgHasNegativeFeedback",
        "avg_conversationIds": "avgConversationIds",
        "avg_areAIAnnotationsVerified": "avgAreAIAnnotationsVerified",
        "avg_isInitialQuestionAnswer": "avgIsInitialQuestionAnswer",
        "min_id": "minId",
        "min_messageIds": "minMessageIds",
        "min_messagesCount": "minMessagesCount",
        "min_organizationId": "minOrganizationId",
        "min_question": "minQuestion",
        "min_questionLength": "minQuestionLength",
        "min_answer": "minAnswer",
        "min_isOnTopic": "minIsOnTopic",
        "min_isClear": "minIsClear",
        "min_isDocumented": "minIsDocumented",
        "min_isFeatureSupported": "minIsFeatureSupported",
        "min_isAnswerConfident": "minIsAnswerConfident",
        "min_gapSummary": "minGapSummary",
        "min_subject": "minSubject",
        "min_category": "minCategory",
        "min_languages": "minLanguages",
        "min_firstPartyEntities": "minFirstPartyEntities",
        "min_thirdPartyEntities": "minThirdPartyEntities",
        "min_emotion": "minEmotion",
        "min_sentiment": "minSentiment",
        "min_questionType": "minQuestionType",
        "min_projectId": "minProjectId",
        "min_integrationId": "minIntegrationId",
        "min_properties": "minProperties",
        "min_userProperties": "minUserProperties",
        "min_firstMessageTime": "minFirstMessageTime",
        "min_lastMessageTime": "minLastMessageTime",
        "min_lastUpdated": "minLastUpdated",
        "min_hasPositiveFeedback": "minHasPositiveFeedback",
        "min_hasNegativeFeedback": "minHasNegativeFeedback",
        "min_conversationIds": "minConversationIds",
        "min_areAIAnnotationsVerified": "minAreAIAnnotationsVerified",
        "min_isInitialQuestionAnswer": "minIsInitialQuestionAnswer",
        "max_id": "maxId",
        "max_messageIds": "maxMessageIds",
        "max_messagesCount": "maxMessagesCount",
        "max_organizationId": "maxOrganizationId",
        "max_question": "maxQuestion",
        "max_questionLength": "maxQuestionLength",
        "max_answer": "maxAnswer",
        "max_isOnTopic": "maxIsOnTopic",
        "max_isClear": "maxIsClear",
        "max_isDocumented": "maxIsDocumented",
        "max_isFeatureSupported": "maxIsFeatureSupported",
        "max_isAnswerConfident": "maxIsAnswerConfident",
        "max_gapSummary": "maxGapSummary",
        "max_subject": "maxSubject",
        "max_category": "maxCategory",
        "max_languages": "maxLanguages",
        "max_firstPartyEntities": "maxFirstPartyEntities",
        "max_thirdPartyEntities": "maxThirdPartyEntities",
        "max_emotion": "maxEmotion",
        "max_sentiment": "maxSentiment",
        "max_questionType": "maxQuestionType",
        "max_projectId": "maxProjectId",
        "max_integrationId": "maxIntegrationId",
        "max_properties": "maxProperties",
        "max_userProperties": "maxUserProperties",
        "max_firstMessageTime": "maxFirstMessageTime",
        "max_lastMessageTime": "maxLastMessageTime",
        "max_lastUpdated": "maxLastUpdated",
        "max_hasPositiveFeedback": "maxHasPositiveFeedback",
        "max_hasNegativeFeedback": "maxHasNegativeFeedback",
        "max_conversationIds": "maxConversationIds",
        "max_areAIAnnotationsVerified": "maxAreAIAnnotationsVerified",
        "max_isInitialQuestionAnswer": "maxIsInitialQuestionAnswer",
    });
});
/** @internal */
exports.SemanticThreadResultItem$outboundSchema = z.object({
    id: z.string().optional(),
    messageIds: z.any().optional(),
    messagesCount: z.any().optional(),
    organizationId: z.string().optional(),
    question: z.string().optional(),
    questionLength: z.any().optional(),
    answer: z.string().optional(),
    isOnTopic: z.any().optional(),
    isClear: z.any().optional(),
    isDocumented: z.any().optional(),
    isFeatureSupported: z.any().optional(),
    isAnswerConfident: z.any().optional(),
    gapSummary: z.any().optional(),
    subject: z.any().optional(),
    category: z.any().optional(),
    languages: z.any().optional(),
    firstPartyEntities: z.any().optional(),
    thirdPartyEntities: z.any().optional(),
    emotion: z.any().optional(),
    sentiment: z.any().optional(),
    questionType: z.any().optional(),
    projectId: z.string().optional(),
    integrationId: z.string().optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.QuerySemanticThreadsResponseDataUserProperties$outboundSchema)).optional(),
    firstMessageTime: z.date().transform(v => v.toISOString()).optional(),
    lastMessageTime: z.date().transform(v => v.toISOString()).optional(),
    lastUpdated: z.date().transform(v => v.toISOString()).optional(),
    hasPositiveFeedback: z.boolean().optional(),
    hasNegativeFeedback: z.boolean().optional(),
    conversationIds: z.array(z.string()).optional(),
    areAIAnnotationsVerified: z.any().optional(),
    isInitialQuestionAnswer: z.boolean().optional(),
    sum: z.number().optional(),
    count: z.number().optional(),
    avg: z.number().optional(),
    min: z.number().optional(),
    max: z.number().optional(),
    idHour: z.string().optional(),
    idDay: z.string().optional(),
    idWeek: z.string().optional(),
    idMonth: z.string().optional(),
    messageIdsHour: z.string().optional(),
    messageIdsDay: z.string().optional(),
    messageIdsWeek: z.string().optional(),
    messageIdsMonth: z.string().optional(),
    messagesCountHour: z.string().optional(),
    messagesCountDay: z.string().optional(),
    messagesCountWeek: z.string().optional(),
    messagesCountMonth: z.string().optional(),
    organizationIdHour: z.string().optional(),
    organizationIdDay: z.string().optional(),
    organizationIdWeek: z.string().optional(),
    organizationIdMonth: z.string().optional(),
    questionHour: z.string().optional(),
    questionDay: z.string().optional(),
    questionWeek: z.string().optional(),
    questionMonth: z.string().optional(),
    questionLengthHour: z.string().optional(),
    questionLengthDay: z.string().optional(),
    questionLengthWeek: z.string().optional(),
    questionLengthMonth: z.string().optional(),
    answerHour: z.string().optional(),
    answerDay: z.string().optional(),
    answerWeek: z.string().optional(),
    answerMonth: z.string().optional(),
    isOnTopicHour: z.string().optional(),
    isOnTopicDay: z.string().optional(),
    isOnTopicWeek: z.string().optional(),
    isOnTopicMonth: z.string().optional(),
    isClearHour: z.string().optional(),
    isClearDay: z.string().optional(),
    isClearWeek: z.string().optional(),
    isClearMonth: z.string().optional(),
    isDocumentedHour: z.string().optional(),
    isDocumentedDay: z.string().optional(),
    isDocumentedWeek: z.string().optional(),
    isDocumentedMonth: z.string().optional(),
    isFeatureSupportedHour: z.string().optional(),
    isFeatureSupportedDay: z.string().optional(),
    isFeatureSupportedWeek: z.string().optional(),
    isFeatureSupportedMonth: z.string().optional(),
    isAnswerConfidentHour: z.string().optional(),
    isAnswerConfidentDay: z.string().optional(),
    isAnswerConfidentWeek: z.string().optional(),
    isAnswerConfidentMonth: z.string().optional(),
    gapSummaryHour: z.string().optional(),
    gapSummaryDay: z.string().optional(),
    gapSummaryWeek: z.string().optional(),
    gapSummaryMonth: z.string().optional(),
    subjectHour: z.string().optional(),
    subjectDay: z.string().optional(),
    subjectWeek: z.string().optional(),
    subjectMonth: z.string().optional(),
    categoryHour: z.string().optional(),
    categoryDay: z.string().optional(),
    categoryWeek: z.string().optional(),
    categoryMonth: z.string().optional(),
    languagesHour: z.string().optional(),
    languagesDay: z.string().optional(),
    languagesWeek: z.string().optional(),
    languagesMonth: z.string().optional(),
    firstPartyEntitiesHour: z.string().optional(),
    firstPartyEntitiesDay: z.string().optional(),
    firstPartyEntitiesWeek: z.string().optional(),
    firstPartyEntitiesMonth: z.string().optional(),
    thirdPartyEntitiesHour: z.string().optional(),
    thirdPartyEntitiesDay: z.string().optional(),
    thirdPartyEntitiesWeek: z.string().optional(),
    thirdPartyEntitiesMonth: z.string().optional(),
    emotionHour: z.string().optional(),
    emotionDay: z.string().optional(),
    emotionWeek: z.string().optional(),
    emotionMonth: z.string().optional(),
    sentimentHour: z.string().optional(),
    sentimentDay: z.string().optional(),
    sentimentWeek: z.string().optional(),
    sentimentMonth: z.string().optional(),
    questionTypeHour: z.string().optional(),
    questionTypeDay: z.string().optional(),
    questionTypeWeek: z.string().optional(),
    questionTypeMonth: z.string().optional(),
    projectIdHour: z.string().optional(),
    projectIdDay: z.string().optional(),
    projectIdWeek: z.string().optional(),
    projectIdMonth: z.string().optional(),
    integrationIdHour: z.string().optional(),
    integrationIdDay: z.string().optional(),
    integrationIdWeek: z.string().optional(),
    integrationIdMonth: z.string().optional(),
    propertiesHour: z.string().optional(),
    propertiesDay: z.string().optional(),
    propertiesWeek: z.string().optional(),
    propertiesMonth: z.string().optional(),
    userPropertiesHour: z.string().optional(),
    userPropertiesDay: z.string().optional(),
    userPropertiesWeek: z.string().optional(),
    userPropertiesMonth: z.string().optional(),
    firstMessageTimeHour: z.string().optional(),
    firstMessageTimeDay: z.string().optional(),
    firstMessageTimeWeek: z.string().optional(),
    firstMessageTimeMonth: z.string().optional(),
    lastMessageTimeHour: z.string().optional(),
    lastMessageTimeDay: z.string().optional(),
    lastMessageTimeWeek: z.string().optional(),
    lastMessageTimeMonth: z.string().optional(),
    lastUpdatedHour: z.string().optional(),
    lastUpdatedDay: z.string().optional(),
    lastUpdatedWeek: z.string().optional(),
    lastUpdatedMonth: z.string().optional(),
    hasPositiveFeedbackHour: z.string().optional(),
    hasPositiveFeedbackDay: z.string().optional(),
    hasPositiveFeedbackWeek: z.string().optional(),
    hasPositiveFeedbackMonth: z.string().optional(),
    hasNegativeFeedbackHour: z.string().optional(),
    hasNegativeFeedbackDay: z.string().optional(),
    hasNegativeFeedbackWeek: z.string().optional(),
    hasNegativeFeedbackMonth: z.string().optional(),
    conversationIdsHour: z.string().optional(),
    conversationIdsDay: z.string().optional(),
    conversationIdsWeek: z.string().optional(),
    conversationIdsMonth: z.string().optional(),
    areAIAnnotationsVerifiedHour: z.string().optional(),
    areAIAnnotationsVerifiedDay: z.string().optional(),
    areAIAnnotationsVerifiedWeek: z.string().optional(),
    areAIAnnotationsVerifiedMonth: z.string().optional(),
    isInitialQuestionAnswerHour: z.string().optional(),
    isInitialQuestionAnswerDay: z.string().optional(),
    isInitialQuestionAnswerWeek: z.string().optional(),
    isInitialQuestionAnswerMonth: z.string().optional(),
    sumId: z.number().optional(),
    sumMessageIds: z.number().optional(),
    sumMessagesCount: z.number().optional(),
    sumOrganizationId: z.number().optional(),
    sumQuestion: z.number().optional(),
    sumQuestionLength: z.number().optional(),
    sumAnswer: z.number().optional(),
    sumIsOnTopic: z.number().optional(),
    sumIsClear: z.number().optional(),
    sumIsDocumented: z.number().optional(),
    sumIsFeatureSupported: z.number().optional(),
    sumIsAnswerConfident: z.number().optional(),
    sumGapSummary: z.number().optional(),
    sumSubject: z.number().optional(),
    sumCategory: z.number().optional(),
    sumLanguages: z.number().optional(),
    sumFirstPartyEntities: z.number().optional(),
    sumThirdPartyEntities: z.number().optional(),
    sumEmotion: z.number().optional(),
    sumSentiment: z.number().optional(),
    sumQuestionType: z.number().optional(),
    sumProjectId: z.number().optional(),
    sumIntegrationId: z.number().optional(),
    sumProperties: z.number().optional(),
    sumUserProperties: z.number().optional(),
    sumFirstMessageTime: z.number().optional(),
    sumLastMessageTime: z.number().optional(),
    sumLastUpdated: z.number().optional(),
    sumHasPositiveFeedback: z.number().optional(),
    sumHasNegativeFeedback: z.number().optional(),
    sumConversationIds: z.number().optional(),
    sumAreAIAnnotationsVerified: z.number().optional(),
    sumIsInitialQuestionAnswer: z.number().optional(),
    countId: z.number().optional(),
    countMessageIds: z.number().optional(),
    countMessagesCount: z.number().optional(),
    countOrganizationId: z.number().optional(),
    countQuestion: z.number().optional(),
    countQuestionLength: z.number().optional(),
    countAnswer: z.number().optional(),
    countIsOnTopic: z.number().optional(),
    countIsClear: z.number().optional(),
    countIsDocumented: z.number().optional(),
    countIsFeatureSupported: z.number().optional(),
    countIsAnswerConfident: z.number().optional(),
    countGapSummary: z.number().optional(),
    countSubject: z.number().optional(),
    countCategory: z.number().optional(),
    countLanguages: z.number().optional(),
    countFirstPartyEntities: z.number().optional(),
    countThirdPartyEntities: z.number().optional(),
    countEmotion: z.number().optional(),
    countSentiment: z.number().optional(),
    countQuestionType: z.number().optional(),
    countProjectId: z.number().optional(),
    countIntegrationId: z.number().optional(),
    countProperties: z.number().optional(),
    countUserProperties: z.number().optional(),
    countFirstMessageTime: z.number().optional(),
    countLastMessageTime: z.number().optional(),
    countLastUpdated: z.number().optional(),
    countHasPositiveFeedback: z.number().optional(),
    countHasNegativeFeedback: z.number().optional(),
    countConversationIds: z.number().optional(),
    countAreAIAnnotationsVerified: z.number().optional(),
    countIsInitialQuestionAnswer: z.number().optional(),
    avgId: z.number().optional(),
    avgMessageIds: z.number().optional(),
    avgMessagesCount: z.number().optional(),
    avgOrganizationId: z.number().optional(),
    avgQuestion: z.number().optional(),
    avgQuestionLength: z.number().optional(),
    avgAnswer: z.number().optional(),
    avgIsOnTopic: z.number().optional(),
    avgIsClear: z.number().optional(),
    avgIsDocumented: z.number().optional(),
    avgIsFeatureSupported: z.number().optional(),
    avgIsAnswerConfident: z.number().optional(),
    avgGapSummary: z.number().optional(),
    avgSubject: z.number().optional(),
    avgCategory: z.number().optional(),
    avgLanguages: z.number().optional(),
    avgFirstPartyEntities: z.number().optional(),
    avgThirdPartyEntities: z.number().optional(),
    avgEmotion: z.number().optional(),
    avgSentiment: z.number().optional(),
    avgQuestionType: z.number().optional(),
    avgProjectId: z.number().optional(),
    avgIntegrationId: z.number().optional(),
    avgProperties: z.number().optional(),
    avgUserProperties: z.number().optional(),
    avgFirstMessageTime: z.number().optional(),
    avgLastMessageTime: z.number().optional(),
    avgLastUpdated: z.number().optional(),
    avgHasPositiveFeedback: z.number().optional(),
    avgHasNegativeFeedback: z.number().optional(),
    avgConversationIds: z.number().optional(),
    avgAreAIAnnotationsVerified: z.number().optional(),
    avgIsInitialQuestionAnswer: z.number().optional(),
    minId: z.number().optional(),
    minMessageIds: z.number().optional(),
    minMessagesCount: z.number().optional(),
    minOrganizationId: z.number().optional(),
    minQuestion: z.number().optional(),
    minQuestionLength: z.number().optional(),
    minAnswer: z.number().optional(),
    minIsOnTopic: z.number().optional(),
    minIsClear: z.number().optional(),
    minIsDocumented: z.number().optional(),
    minIsFeatureSupported: z.number().optional(),
    minIsAnswerConfident: z.number().optional(),
    minGapSummary: z.number().optional(),
    minSubject: z.number().optional(),
    minCategory: z.number().optional(),
    minLanguages: z.number().optional(),
    minFirstPartyEntities: z.number().optional(),
    minThirdPartyEntities: z.number().optional(),
    minEmotion: z.number().optional(),
    minSentiment: z.number().optional(),
    minQuestionType: z.number().optional(),
    minProjectId: z.number().optional(),
    minIntegrationId: z.number().optional(),
    minProperties: z.number().optional(),
    minUserProperties: z.number().optional(),
    minFirstMessageTime: z.number().optional(),
    minLastMessageTime: z.number().optional(),
    minLastUpdated: z.number().optional(),
    minHasPositiveFeedback: z.number().optional(),
    minHasNegativeFeedback: z.number().optional(),
    minConversationIds: z.number().optional(),
    minAreAIAnnotationsVerified: z.number().optional(),
    minIsInitialQuestionAnswer: z.number().optional(),
    maxId: z.number().optional(),
    maxMessageIds: z.number().optional(),
    maxMessagesCount: z.number().optional(),
    maxOrganizationId: z.number().optional(),
    maxQuestion: z.number().optional(),
    maxQuestionLength: z.number().optional(),
    maxAnswer: z.number().optional(),
    maxIsOnTopic: z.number().optional(),
    maxIsClear: z.number().optional(),
    maxIsDocumented: z.number().optional(),
    maxIsFeatureSupported: z.number().optional(),
    maxIsAnswerConfident: z.number().optional(),
    maxGapSummary: z.number().optional(),
    maxSubject: z.number().optional(),
    maxCategory: z.number().optional(),
    maxLanguages: z.number().optional(),
    maxFirstPartyEntities: z.number().optional(),
    maxThirdPartyEntities: z.number().optional(),
    maxEmotion: z.number().optional(),
    maxSentiment: z.number().optional(),
    maxQuestionType: z.number().optional(),
    maxProjectId: z.number().optional(),
    maxIntegrationId: z.number().optional(),
    maxProperties: z.number().optional(),
    maxUserProperties: z.number().optional(),
    maxFirstMessageTime: z.number().optional(),
    maxLastMessageTime: z.number().optional(),
    maxLastUpdated: z.number().optional(),
    maxHasPositiveFeedback: z.number().optional(),
    maxHasNegativeFeedback: z.number().optional(),
    maxConversationIds: z.number().optional(),
    maxAreAIAnnotationsVerified: z.number().optional(),
    maxIsInitialQuestionAnswer: z.number().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        idHour: "id_hour",
        idDay: "id_day",
        idWeek: "id_week",
        idMonth: "id_month",
        messageIdsHour: "messageIds_hour",
        messageIdsDay: "messageIds_day",
        messageIdsWeek: "messageIds_week",
        messageIdsMonth: "messageIds_month",
        messagesCountHour: "messagesCount_hour",
        messagesCountDay: "messagesCount_day",
        messagesCountWeek: "messagesCount_week",
        messagesCountMonth: "messagesCount_month",
        organizationIdHour: "organizationId_hour",
        organizationIdDay: "organizationId_day",
        organizationIdWeek: "organizationId_week",
        organizationIdMonth: "organizationId_month",
        questionHour: "question_hour",
        questionDay: "question_day",
        questionWeek: "question_week",
        questionMonth: "question_month",
        questionLengthHour: "questionLength_hour",
        questionLengthDay: "questionLength_day",
        questionLengthWeek: "questionLength_week",
        questionLengthMonth: "questionLength_month",
        answerHour: "answer_hour",
        answerDay: "answer_day",
        answerWeek: "answer_week",
        answerMonth: "answer_month",
        isOnTopicHour: "isOnTopic_hour",
        isOnTopicDay: "isOnTopic_day",
        isOnTopicWeek: "isOnTopic_week",
        isOnTopicMonth: "isOnTopic_month",
        isClearHour: "isClear_hour",
        isClearDay: "isClear_day",
        isClearWeek: "isClear_week",
        isClearMonth: "isClear_month",
        isDocumentedHour: "isDocumented_hour",
        isDocumentedDay: "isDocumented_day",
        isDocumentedWeek: "isDocumented_week",
        isDocumentedMonth: "isDocumented_month",
        isFeatureSupportedHour: "isFeatureSupported_hour",
        isFeatureSupportedDay: "isFeatureSupported_day",
        isFeatureSupportedWeek: "isFeatureSupported_week",
        isFeatureSupportedMonth: "isFeatureSupported_month",
        isAnswerConfidentHour: "isAnswerConfident_hour",
        isAnswerConfidentDay: "isAnswerConfident_day",
        isAnswerConfidentWeek: "isAnswerConfident_week",
        isAnswerConfidentMonth: "isAnswerConfident_month",
        gapSummaryHour: "gapSummary_hour",
        gapSummaryDay: "gapSummary_day",
        gapSummaryWeek: "gapSummary_week",
        gapSummaryMonth: "gapSummary_month",
        subjectHour: "subject_hour",
        subjectDay: "subject_day",
        subjectWeek: "subject_week",
        subjectMonth: "subject_month",
        categoryHour: "category_hour",
        categoryDay: "category_day",
        categoryWeek: "category_week",
        categoryMonth: "category_month",
        languagesHour: "languages_hour",
        languagesDay: "languages_day",
        languagesWeek: "languages_week",
        languagesMonth: "languages_month",
        firstPartyEntitiesHour: "firstPartyEntities_hour",
        firstPartyEntitiesDay: "firstPartyEntities_day",
        firstPartyEntitiesWeek: "firstPartyEntities_week",
        firstPartyEntitiesMonth: "firstPartyEntities_month",
        thirdPartyEntitiesHour: "thirdPartyEntities_hour",
        thirdPartyEntitiesDay: "thirdPartyEntities_day",
        thirdPartyEntitiesWeek: "thirdPartyEntities_week",
        thirdPartyEntitiesMonth: "thirdPartyEntities_month",
        emotionHour: "emotion_hour",
        emotionDay: "emotion_day",
        emotionWeek: "emotion_week",
        emotionMonth: "emotion_month",
        sentimentHour: "sentiment_hour",
        sentimentDay: "sentiment_day",
        sentimentWeek: "sentiment_week",
        sentimentMonth: "sentiment_month",
        questionTypeHour: "questionType_hour",
        questionTypeDay: "questionType_day",
        questionTypeWeek: "questionType_week",
        questionTypeMonth: "questionType_month",
        projectIdHour: "projectId_hour",
        projectIdDay: "projectId_day",
        projectIdWeek: "projectId_week",
        projectIdMonth: "projectId_month",
        integrationIdHour: "integrationId_hour",
        integrationIdDay: "integrationId_day",
        integrationIdWeek: "integrationId_week",
        integrationIdMonth: "integrationId_month",
        propertiesHour: "properties_hour",
        propertiesDay: "properties_day",
        propertiesWeek: "properties_week",
        propertiesMonth: "properties_month",
        userPropertiesHour: "userProperties_hour",
        userPropertiesDay: "userProperties_day",
        userPropertiesWeek: "userProperties_week",
        userPropertiesMonth: "userProperties_month",
        firstMessageTimeHour: "firstMessageTime_hour",
        firstMessageTimeDay: "firstMessageTime_day",
        firstMessageTimeWeek: "firstMessageTime_week",
        firstMessageTimeMonth: "firstMessageTime_month",
        lastMessageTimeHour: "lastMessageTime_hour",
        lastMessageTimeDay: "lastMessageTime_day",
        lastMessageTimeWeek: "lastMessageTime_week",
        lastMessageTimeMonth: "lastMessageTime_month",
        lastUpdatedHour: "lastUpdated_hour",
        lastUpdatedDay: "lastUpdated_day",
        lastUpdatedWeek: "lastUpdated_week",
        lastUpdatedMonth: "lastUpdated_month",
        hasPositiveFeedbackHour: "hasPositiveFeedback_hour",
        hasPositiveFeedbackDay: "hasPositiveFeedback_day",
        hasPositiveFeedbackWeek: "hasPositiveFeedback_week",
        hasPositiveFeedbackMonth: "hasPositiveFeedback_month",
        hasNegativeFeedbackHour: "hasNegativeFeedback_hour",
        hasNegativeFeedbackDay: "hasNegativeFeedback_day",
        hasNegativeFeedbackWeek: "hasNegativeFeedback_week",
        hasNegativeFeedbackMonth: "hasNegativeFeedback_month",
        conversationIdsHour: "conversationIds_hour",
        conversationIdsDay: "conversationIds_day",
        conversationIdsWeek: "conversationIds_week",
        conversationIdsMonth: "conversationIds_month",
        areAIAnnotationsVerifiedHour: "areAIAnnotationsVerified_hour",
        areAIAnnotationsVerifiedDay: "areAIAnnotationsVerified_day",
        areAIAnnotationsVerifiedWeek: "areAIAnnotationsVerified_week",
        areAIAnnotationsVerifiedMonth: "areAIAnnotationsVerified_month",
        isInitialQuestionAnswerHour: "isInitialQuestionAnswer_hour",
        isInitialQuestionAnswerDay: "isInitialQuestionAnswer_day",
        isInitialQuestionAnswerWeek: "isInitialQuestionAnswer_week",
        isInitialQuestionAnswerMonth: "isInitialQuestionAnswer_month",
        sumId: "sum_id",
        sumMessageIds: "sum_messageIds",
        sumMessagesCount: "sum_messagesCount",
        sumOrganizationId: "sum_organizationId",
        sumQuestion: "sum_question",
        sumQuestionLength: "sum_questionLength",
        sumAnswer: "sum_answer",
        sumIsOnTopic: "sum_isOnTopic",
        sumIsClear: "sum_isClear",
        sumIsDocumented: "sum_isDocumented",
        sumIsFeatureSupported: "sum_isFeatureSupported",
        sumIsAnswerConfident: "sum_isAnswerConfident",
        sumGapSummary: "sum_gapSummary",
        sumSubject: "sum_subject",
        sumCategory: "sum_category",
        sumLanguages: "sum_languages",
        sumFirstPartyEntities: "sum_firstPartyEntities",
        sumThirdPartyEntities: "sum_thirdPartyEntities",
        sumEmotion: "sum_emotion",
        sumSentiment: "sum_sentiment",
        sumQuestionType: "sum_questionType",
        sumProjectId: "sum_projectId",
        sumIntegrationId: "sum_integrationId",
        sumProperties: "sum_properties",
        sumUserProperties: "sum_userProperties",
        sumFirstMessageTime: "sum_firstMessageTime",
        sumLastMessageTime: "sum_lastMessageTime",
        sumLastUpdated: "sum_lastUpdated",
        sumHasPositiveFeedback: "sum_hasPositiveFeedback",
        sumHasNegativeFeedback: "sum_hasNegativeFeedback",
        sumConversationIds: "sum_conversationIds",
        sumAreAIAnnotationsVerified: "sum_areAIAnnotationsVerified",
        sumIsInitialQuestionAnswer: "sum_isInitialQuestionAnswer",
        countId: "count_id",
        countMessageIds: "count_messageIds",
        countMessagesCount: "count_messagesCount",
        countOrganizationId: "count_organizationId",
        countQuestion: "count_question",
        countQuestionLength: "count_questionLength",
        countAnswer: "count_answer",
        countIsOnTopic: "count_isOnTopic",
        countIsClear: "count_isClear",
        countIsDocumented: "count_isDocumented",
        countIsFeatureSupported: "count_isFeatureSupported",
        countIsAnswerConfident: "count_isAnswerConfident",
        countGapSummary: "count_gapSummary",
        countSubject: "count_subject",
        countCategory: "count_category",
        countLanguages: "count_languages",
        countFirstPartyEntities: "count_firstPartyEntities",
        countThirdPartyEntities: "count_thirdPartyEntities",
        countEmotion: "count_emotion",
        countSentiment: "count_sentiment",
        countQuestionType: "count_questionType",
        countProjectId: "count_projectId",
        countIntegrationId: "count_integrationId",
        countProperties: "count_properties",
        countUserProperties: "count_userProperties",
        countFirstMessageTime: "count_firstMessageTime",
        countLastMessageTime: "count_lastMessageTime",
        countLastUpdated: "count_lastUpdated",
        countHasPositiveFeedback: "count_hasPositiveFeedback",
        countHasNegativeFeedback: "count_hasNegativeFeedback",
        countConversationIds: "count_conversationIds",
        countAreAIAnnotationsVerified: "count_areAIAnnotationsVerified",
        countIsInitialQuestionAnswer: "count_isInitialQuestionAnswer",
        avgId: "avg_id",
        avgMessageIds: "avg_messageIds",
        avgMessagesCount: "avg_messagesCount",
        avgOrganizationId: "avg_organizationId",
        avgQuestion: "avg_question",
        avgQuestionLength: "avg_questionLength",
        avgAnswer: "avg_answer",
        avgIsOnTopic: "avg_isOnTopic",
        avgIsClear: "avg_isClear",
        avgIsDocumented: "avg_isDocumented",
        avgIsFeatureSupported: "avg_isFeatureSupported",
        avgIsAnswerConfident: "avg_isAnswerConfident",
        avgGapSummary: "avg_gapSummary",
        avgSubject: "avg_subject",
        avgCategory: "avg_category",
        avgLanguages: "avg_languages",
        avgFirstPartyEntities: "avg_firstPartyEntities",
        avgThirdPartyEntities: "avg_thirdPartyEntities",
        avgEmotion: "avg_emotion",
        avgSentiment: "avg_sentiment",
        avgQuestionType: "avg_questionType",
        avgProjectId: "avg_projectId",
        avgIntegrationId: "avg_integrationId",
        avgProperties: "avg_properties",
        avgUserProperties: "avg_userProperties",
        avgFirstMessageTime: "avg_firstMessageTime",
        avgLastMessageTime: "avg_lastMessageTime",
        avgLastUpdated: "avg_lastUpdated",
        avgHasPositiveFeedback: "avg_hasPositiveFeedback",
        avgHasNegativeFeedback: "avg_hasNegativeFeedback",
        avgConversationIds: "avg_conversationIds",
        avgAreAIAnnotationsVerified: "avg_areAIAnnotationsVerified",
        avgIsInitialQuestionAnswer: "avg_isInitialQuestionAnswer",
        minId: "min_id",
        minMessageIds: "min_messageIds",
        minMessagesCount: "min_messagesCount",
        minOrganizationId: "min_organizationId",
        minQuestion: "min_question",
        minQuestionLength: "min_questionLength",
        minAnswer: "min_answer",
        minIsOnTopic: "min_isOnTopic",
        minIsClear: "min_isClear",
        minIsDocumented: "min_isDocumented",
        minIsFeatureSupported: "min_isFeatureSupported",
        minIsAnswerConfident: "min_isAnswerConfident",
        minGapSummary: "min_gapSummary",
        minSubject: "min_subject",
        minCategory: "min_category",
        minLanguages: "min_languages",
        minFirstPartyEntities: "min_firstPartyEntities",
        minThirdPartyEntities: "min_thirdPartyEntities",
        minEmotion: "min_emotion",
        minSentiment: "min_sentiment",
        minQuestionType: "min_questionType",
        minProjectId: "min_projectId",
        minIntegrationId: "min_integrationId",
        minProperties: "min_properties",
        minUserProperties: "min_userProperties",
        minFirstMessageTime: "min_firstMessageTime",
        minLastMessageTime: "min_lastMessageTime",
        minLastUpdated: "min_lastUpdated",
        minHasPositiveFeedback: "min_hasPositiveFeedback",
        minHasNegativeFeedback: "min_hasNegativeFeedback",
        minConversationIds: "min_conversationIds",
        minAreAIAnnotationsVerified: "min_areAIAnnotationsVerified",
        minIsInitialQuestionAnswer: "min_isInitialQuestionAnswer",
        maxId: "max_id",
        maxMessageIds: "max_messageIds",
        maxMessagesCount: "max_messagesCount",
        maxOrganizationId: "max_organizationId",
        maxQuestion: "max_question",
        maxQuestionLength: "max_questionLength",
        maxAnswer: "max_answer",
        maxIsOnTopic: "max_isOnTopic",
        maxIsClear: "max_isClear",
        maxIsDocumented: "max_isDocumented",
        maxIsFeatureSupported: "max_isFeatureSupported",
        maxIsAnswerConfident: "max_isAnswerConfident",
        maxGapSummary: "max_gapSummary",
        maxSubject: "max_subject",
        maxCategory: "max_category",
        maxLanguages: "max_languages",
        maxFirstPartyEntities: "max_firstPartyEntities",
        maxThirdPartyEntities: "max_thirdPartyEntities",
        maxEmotion: "max_emotion",
        maxSentiment: "max_sentiment",
        maxQuestionType: "max_questionType",
        maxProjectId: "max_projectId",
        maxIntegrationId: "max_integrationId",
        maxProperties: "max_properties",
        maxUserProperties: "max_userProperties",
        maxFirstMessageTime: "max_firstMessageTime",
        maxLastMessageTime: "max_lastMessageTime",
        maxLastUpdated: "max_lastUpdated",
        maxHasPositiveFeedback: "max_hasPositiveFeedback",
        maxHasNegativeFeedback: "max_hasNegativeFeedback",
        maxConversationIds: "max_conversationIds",
        maxAreAIAnnotationsVerified: "max_areAIAnnotationsVerified",
        maxIsInitialQuestionAnswer: "max_isInitialQuestionAnswer",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadResultItem$;
(function (SemanticThreadResultItem$) {
    /** @deprecated use `SemanticThreadResultItem$inboundSchema` instead. */
    SemanticThreadResultItem$.inboundSchema = exports.SemanticThreadResultItem$inboundSchema;
    /** @deprecated use `SemanticThreadResultItem$outboundSchema` instead. */
    SemanticThreadResultItem$.outboundSchema = exports.SemanticThreadResultItem$outboundSchema;
})(SemanticThreadResultItem$ || (exports.SemanticThreadResultItem$ = SemanticThreadResultItem$ = {}));
function semanticThreadResultItemToJSON(semanticThreadResultItem) {
    return JSON.stringify(exports.SemanticThreadResultItem$outboundSchema.parse(semanticThreadResultItem));
}
function semanticThreadResultItemFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadResultItem$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadResultItem' from JSON`);
}
/** @internal */
exports.QuerySemanticThreadsResponseData$inboundSchema = z.object({
    result: z.array(z.lazy(() => exports.SemanticThreadResultItem$inboundSchema)),
    total: z.number(),
    pageSize: z.number(),
    count: z.number(),
});
/** @internal */
exports.QuerySemanticThreadsResponseData$outboundSchema = z.object({
    result: z.array(z.lazy(() => exports.SemanticThreadResultItem$outboundSchema)),
    total: z.number(),
    pageSize: z.number(),
    count: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QuerySemanticThreadsResponseData$;
(function (QuerySemanticThreadsResponseData$) {
    /** @deprecated use `QuerySemanticThreadsResponseData$inboundSchema` instead. */
    QuerySemanticThreadsResponseData$.inboundSchema = exports.QuerySemanticThreadsResponseData$inboundSchema;
    /** @deprecated use `QuerySemanticThreadsResponseData$outboundSchema` instead. */
    QuerySemanticThreadsResponseData$.outboundSchema = exports.QuerySemanticThreadsResponseData$outboundSchema;
})(QuerySemanticThreadsResponseData$ || (exports.QuerySemanticThreadsResponseData$ = QuerySemanticThreadsResponseData$ = {}));
function querySemanticThreadsResponseDataToJSON(querySemanticThreadsResponseData) {
    return JSON.stringify(exports.QuerySemanticThreadsResponseData$outboundSchema.parse(querySemanticThreadsResponseData));
}
function querySemanticThreadsResponseDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QuerySemanticThreadsResponseData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QuerySemanticThreadsResponseData' from JSON`);
}
//# sourceMappingURL=querysemanticthreadsresponsedata.js.map