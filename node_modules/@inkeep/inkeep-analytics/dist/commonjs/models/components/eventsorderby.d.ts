import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const EventsOrderByField: {
    readonly Id: "id";
    readonly OrganizationId: "organizationId";
    readonly MessageId: "messageId";
    readonly ConversationId: "conversationId";
    readonly CreatedAt: "createdAt";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly EventType: "eventType";
    readonly Type: "type";
    readonly SearchQuery: "searchQuery";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
    readonly IdHour: "id_hour";
    readonly IdDay: "id_day";
    readonly IdWeek: "id_week";
    readonly IdMonth: "id_month";
    readonly OrganizationIdHour: "organizationId_hour";
    readonly OrganizationIdDay: "organizationId_day";
    readonly OrganizationIdWeek: "organizationId_week";
    readonly OrganizationIdMonth: "organizationId_month";
    readonly MessageIdHour: "messageId_hour";
    readonly MessageIdDay: "messageId_day";
    readonly MessageIdWeek: "messageId_week";
    readonly MessageIdMonth: "messageId_month";
    readonly ConversationIdHour: "conversationId_hour";
    readonly ConversationIdDay: "conversationId_day";
    readonly ConversationIdWeek: "conversationId_week";
    readonly ConversationIdMonth: "conversationId_month";
    readonly CreatedAtHour: "createdAt_hour";
    readonly CreatedAtDay: "createdAt_day";
    readonly CreatedAtWeek: "createdAt_week";
    readonly CreatedAtMonth: "createdAt_month";
    readonly ProjectIdHour: "projectId_hour";
    readonly ProjectIdDay: "projectId_day";
    readonly ProjectIdWeek: "projectId_week";
    readonly ProjectIdMonth: "projectId_month";
    readonly IntegrationIdHour: "integrationId_hour";
    readonly IntegrationIdDay: "integrationId_day";
    readonly IntegrationIdWeek: "integrationId_week";
    readonly IntegrationIdMonth: "integrationId_month";
    readonly EventTypeHour: "eventType_hour";
    readonly EventTypeDay: "eventType_day";
    readonly EventTypeWeek: "eventType_week";
    readonly EventTypeMonth: "eventType_month";
    readonly TypeHour: "type_hour";
    readonly TypeDay: "type_day";
    readonly TypeWeek: "type_week";
    readonly TypeMonth: "type_month";
    readonly SearchQueryHour: "searchQuery_hour";
    readonly SearchQueryDay: "searchQuery_day";
    readonly SearchQueryWeek: "searchQuery_week";
    readonly SearchQueryMonth: "searchQuery_month";
    readonly PropertiesHour: "properties_hour";
    readonly PropertiesDay: "properties_day";
    readonly PropertiesWeek: "properties_week";
    readonly PropertiesMonth: "properties_month";
    readonly UserPropertiesHour: "userProperties_hour";
    readonly UserPropertiesDay: "userProperties_day";
    readonly UserPropertiesWeek: "userProperties_week";
    readonly UserPropertiesMonth: "userProperties_month";
    readonly SumId: "sum_id";
    readonly SumOrganizationId: "sum_organizationId";
    readonly SumMessageId: "sum_messageId";
    readonly SumConversationId: "sum_conversationId";
    readonly SumCreatedAt: "sum_createdAt";
    readonly SumProjectId: "sum_projectId";
    readonly SumIntegrationId: "sum_integrationId";
    readonly SumEventType: "sum_eventType";
    readonly SumType: "sum_type";
    readonly SumSearchQuery: "sum_searchQuery";
    readonly SumProperties: "sum_properties";
    readonly SumUserProperties: "sum_userProperties";
    readonly CountId: "count_id";
    readonly CountOrganizationId: "count_organizationId";
    readonly CountMessageId: "count_messageId";
    readonly CountConversationId: "count_conversationId";
    readonly CountCreatedAt: "count_createdAt";
    readonly CountProjectId: "count_projectId";
    readonly CountIntegrationId: "count_integrationId";
    readonly CountEventType: "count_eventType";
    readonly CountType: "count_type";
    readonly CountSearchQuery: "count_searchQuery";
    readonly CountProperties: "count_properties";
    readonly CountUserProperties: "count_userProperties";
    readonly AvgId: "avg_id";
    readonly AvgOrganizationId: "avg_organizationId";
    readonly AvgMessageId: "avg_messageId";
    readonly AvgConversationId: "avg_conversationId";
    readonly AvgCreatedAt: "avg_createdAt";
    readonly AvgProjectId: "avg_projectId";
    readonly AvgIntegrationId: "avg_integrationId";
    readonly AvgEventType: "avg_eventType";
    readonly AvgType: "avg_type";
    readonly AvgSearchQuery: "avg_searchQuery";
    readonly AvgProperties: "avg_properties";
    readonly AvgUserProperties: "avg_userProperties";
    readonly MinId: "min_id";
    readonly MinOrganizationId: "min_organizationId";
    readonly MinMessageId: "min_messageId";
    readonly MinConversationId: "min_conversationId";
    readonly MinCreatedAt: "min_createdAt";
    readonly MinProjectId: "min_projectId";
    readonly MinIntegrationId: "min_integrationId";
    readonly MinEventType: "min_eventType";
    readonly MinType: "min_type";
    readonly MinSearchQuery: "min_searchQuery";
    readonly MinProperties: "min_properties";
    readonly MinUserProperties: "min_userProperties";
    readonly MaxId: "max_id";
    readonly MaxOrganizationId: "max_organizationId";
    readonly MaxMessageId: "max_messageId";
    readonly MaxConversationId: "max_conversationId";
    readonly MaxCreatedAt: "max_createdAt";
    readonly MaxProjectId: "max_projectId";
    readonly MaxIntegrationId: "max_integrationId";
    readonly MaxEventType: "max_eventType";
    readonly MaxType: "max_type";
    readonly MaxSearchQuery: "max_searchQuery";
    readonly MaxProperties: "max_properties";
    readonly MaxUserProperties: "max_userProperties";
};
export type EventsOrderByField = ClosedEnum<typeof EventsOrderByField>;
export declare const EventsOrderByDirection: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type EventsOrderByDirection = ClosedEnum<typeof EventsOrderByDirection>;
/**
 * Specifies how to order Events query results by field and direction
 */
export type EventsOrderBy = {
    field: EventsOrderByField;
    direction: EventsOrderByDirection;
};
/** @internal */
export declare const EventsOrderByField$inboundSchema: z.ZodNativeEnum<typeof EventsOrderByField>;
/** @internal */
export declare const EventsOrderByField$outboundSchema: z.ZodNativeEnum<typeof EventsOrderByField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsOrderByField$ {
    /** @deprecated use `EventsOrderByField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly OrganizationId: "organizationId";
        readonly MessageId: "messageId";
        readonly ConversationId: "conversationId";
        readonly CreatedAt: "createdAt";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly EventType: "eventType";
        readonly Type: "type";
        readonly SearchQuery: "searchQuery";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly IdHour: "id_hour";
        readonly IdDay: "id_day";
        readonly IdWeek: "id_week";
        readonly IdMonth: "id_month";
        readonly OrganizationIdHour: "organizationId_hour";
        readonly OrganizationIdDay: "organizationId_day";
        readonly OrganizationIdWeek: "organizationId_week";
        readonly OrganizationIdMonth: "organizationId_month";
        readonly MessageIdHour: "messageId_hour";
        readonly MessageIdDay: "messageId_day";
        readonly MessageIdWeek: "messageId_week";
        readonly MessageIdMonth: "messageId_month";
        readonly ConversationIdHour: "conversationId_hour";
        readonly ConversationIdDay: "conversationId_day";
        readonly ConversationIdWeek: "conversationId_week";
        readonly ConversationIdMonth: "conversationId_month";
        readonly CreatedAtHour: "createdAt_hour";
        readonly CreatedAtDay: "createdAt_day";
        readonly CreatedAtWeek: "createdAt_week";
        readonly CreatedAtMonth: "createdAt_month";
        readonly ProjectIdHour: "projectId_hour";
        readonly ProjectIdDay: "projectId_day";
        readonly ProjectIdWeek: "projectId_week";
        readonly ProjectIdMonth: "projectId_month";
        readonly IntegrationIdHour: "integrationId_hour";
        readonly IntegrationIdDay: "integrationId_day";
        readonly IntegrationIdWeek: "integrationId_week";
        readonly IntegrationIdMonth: "integrationId_month";
        readonly EventTypeHour: "eventType_hour";
        readonly EventTypeDay: "eventType_day";
        readonly EventTypeWeek: "eventType_week";
        readonly EventTypeMonth: "eventType_month";
        readonly TypeHour: "type_hour";
        readonly TypeDay: "type_day";
        readonly TypeWeek: "type_week";
        readonly TypeMonth: "type_month";
        readonly SearchQueryHour: "searchQuery_hour";
        readonly SearchQueryDay: "searchQuery_day";
        readonly SearchQueryWeek: "searchQuery_week";
        readonly SearchQueryMonth: "searchQuery_month";
        readonly PropertiesHour: "properties_hour";
        readonly PropertiesDay: "properties_day";
        readonly PropertiesWeek: "properties_week";
        readonly PropertiesMonth: "properties_month";
        readonly UserPropertiesHour: "userProperties_hour";
        readonly UserPropertiesDay: "userProperties_day";
        readonly UserPropertiesWeek: "userProperties_week";
        readonly UserPropertiesMonth: "userProperties_month";
        readonly SumId: "sum_id";
        readonly SumOrganizationId: "sum_organizationId";
        readonly SumMessageId: "sum_messageId";
        readonly SumConversationId: "sum_conversationId";
        readonly SumCreatedAt: "sum_createdAt";
        readonly SumProjectId: "sum_projectId";
        readonly SumIntegrationId: "sum_integrationId";
        readonly SumEventType: "sum_eventType";
        readonly SumType: "sum_type";
        readonly SumSearchQuery: "sum_searchQuery";
        readonly SumProperties: "sum_properties";
        readonly SumUserProperties: "sum_userProperties";
        readonly CountId: "count_id";
        readonly CountOrganizationId: "count_organizationId";
        readonly CountMessageId: "count_messageId";
        readonly CountConversationId: "count_conversationId";
        readonly CountCreatedAt: "count_createdAt";
        readonly CountProjectId: "count_projectId";
        readonly CountIntegrationId: "count_integrationId";
        readonly CountEventType: "count_eventType";
        readonly CountType: "count_type";
        readonly CountSearchQuery: "count_searchQuery";
        readonly CountProperties: "count_properties";
        readonly CountUserProperties: "count_userProperties";
        readonly AvgId: "avg_id";
        readonly AvgOrganizationId: "avg_organizationId";
        readonly AvgMessageId: "avg_messageId";
        readonly AvgConversationId: "avg_conversationId";
        readonly AvgCreatedAt: "avg_createdAt";
        readonly AvgProjectId: "avg_projectId";
        readonly AvgIntegrationId: "avg_integrationId";
        readonly AvgEventType: "avg_eventType";
        readonly AvgType: "avg_type";
        readonly AvgSearchQuery: "avg_searchQuery";
        readonly AvgProperties: "avg_properties";
        readonly AvgUserProperties: "avg_userProperties";
        readonly MinId: "min_id";
        readonly MinOrganizationId: "min_organizationId";
        readonly MinMessageId: "min_messageId";
        readonly MinConversationId: "min_conversationId";
        readonly MinCreatedAt: "min_createdAt";
        readonly MinProjectId: "min_projectId";
        readonly MinIntegrationId: "min_integrationId";
        readonly MinEventType: "min_eventType";
        readonly MinType: "min_type";
        readonly MinSearchQuery: "min_searchQuery";
        readonly MinProperties: "min_properties";
        readonly MinUserProperties: "min_userProperties";
        readonly MaxId: "max_id";
        readonly MaxOrganizationId: "max_organizationId";
        readonly MaxMessageId: "max_messageId";
        readonly MaxConversationId: "max_conversationId";
        readonly MaxCreatedAt: "max_createdAt";
        readonly MaxProjectId: "max_projectId";
        readonly MaxIntegrationId: "max_integrationId";
        readonly MaxEventType: "max_eventType";
        readonly MaxType: "max_type";
        readonly MaxSearchQuery: "max_searchQuery";
        readonly MaxProperties: "max_properties";
        readonly MaxUserProperties: "max_userProperties";
    }>;
    /** @deprecated use `EventsOrderByField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly OrganizationId: "organizationId";
        readonly MessageId: "messageId";
        readonly ConversationId: "conversationId";
        readonly CreatedAt: "createdAt";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly EventType: "eventType";
        readonly Type: "type";
        readonly SearchQuery: "searchQuery";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly IdHour: "id_hour";
        readonly IdDay: "id_day";
        readonly IdWeek: "id_week";
        readonly IdMonth: "id_month";
        readonly OrganizationIdHour: "organizationId_hour";
        readonly OrganizationIdDay: "organizationId_day";
        readonly OrganizationIdWeek: "organizationId_week";
        readonly OrganizationIdMonth: "organizationId_month";
        readonly MessageIdHour: "messageId_hour";
        readonly MessageIdDay: "messageId_day";
        readonly MessageIdWeek: "messageId_week";
        readonly MessageIdMonth: "messageId_month";
        readonly ConversationIdHour: "conversationId_hour";
        readonly ConversationIdDay: "conversationId_day";
        readonly ConversationIdWeek: "conversationId_week";
        readonly ConversationIdMonth: "conversationId_month";
        readonly CreatedAtHour: "createdAt_hour";
        readonly CreatedAtDay: "createdAt_day";
        readonly CreatedAtWeek: "createdAt_week";
        readonly CreatedAtMonth: "createdAt_month";
        readonly ProjectIdHour: "projectId_hour";
        readonly ProjectIdDay: "projectId_day";
        readonly ProjectIdWeek: "projectId_week";
        readonly ProjectIdMonth: "projectId_month";
        readonly IntegrationIdHour: "integrationId_hour";
        readonly IntegrationIdDay: "integrationId_day";
        readonly IntegrationIdWeek: "integrationId_week";
        readonly IntegrationIdMonth: "integrationId_month";
        readonly EventTypeHour: "eventType_hour";
        readonly EventTypeDay: "eventType_day";
        readonly EventTypeWeek: "eventType_week";
        readonly EventTypeMonth: "eventType_month";
        readonly TypeHour: "type_hour";
        readonly TypeDay: "type_day";
        readonly TypeWeek: "type_week";
        readonly TypeMonth: "type_month";
        readonly SearchQueryHour: "searchQuery_hour";
        readonly SearchQueryDay: "searchQuery_day";
        readonly SearchQueryWeek: "searchQuery_week";
        readonly SearchQueryMonth: "searchQuery_month";
        readonly PropertiesHour: "properties_hour";
        readonly PropertiesDay: "properties_day";
        readonly PropertiesWeek: "properties_week";
        readonly PropertiesMonth: "properties_month";
        readonly UserPropertiesHour: "userProperties_hour";
        readonly UserPropertiesDay: "userProperties_day";
        readonly UserPropertiesWeek: "userProperties_week";
        readonly UserPropertiesMonth: "userProperties_month";
        readonly SumId: "sum_id";
        readonly SumOrganizationId: "sum_organizationId";
        readonly SumMessageId: "sum_messageId";
        readonly SumConversationId: "sum_conversationId";
        readonly SumCreatedAt: "sum_createdAt";
        readonly SumProjectId: "sum_projectId";
        readonly SumIntegrationId: "sum_integrationId";
        readonly SumEventType: "sum_eventType";
        readonly SumType: "sum_type";
        readonly SumSearchQuery: "sum_searchQuery";
        readonly SumProperties: "sum_properties";
        readonly SumUserProperties: "sum_userProperties";
        readonly CountId: "count_id";
        readonly CountOrganizationId: "count_organizationId";
        readonly CountMessageId: "count_messageId";
        readonly CountConversationId: "count_conversationId";
        readonly CountCreatedAt: "count_createdAt";
        readonly CountProjectId: "count_projectId";
        readonly CountIntegrationId: "count_integrationId";
        readonly CountEventType: "count_eventType";
        readonly CountType: "count_type";
        readonly CountSearchQuery: "count_searchQuery";
        readonly CountProperties: "count_properties";
        readonly CountUserProperties: "count_userProperties";
        readonly AvgId: "avg_id";
        readonly AvgOrganizationId: "avg_organizationId";
        readonly AvgMessageId: "avg_messageId";
        readonly AvgConversationId: "avg_conversationId";
        readonly AvgCreatedAt: "avg_createdAt";
        readonly AvgProjectId: "avg_projectId";
        readonly AvgIntegrationId: "avg_integrationId";
        readonly AvgEventType: "avg_eventType";
        readonly AvgType: "avg_type";
        readonly AvgSearchQuery: "avg_searchQuery";
        readonly AvgProperties: "avg_properties";
        readonly AvgUserProperties: "avg_userProperties";
        readonly MinId: "min_id";
        readonly MinOrganizationId: "min_organizationId";
        readonly MinMessageId: "min_messageId";
        readonly MinConversationId: "min_conversationId";
        readonly MinCreatedAt: "min_createdAt";
        readonly MinProjectId: "min_projectId";
        readonly MinIntegrationId: "min_integrationId";
        readonly MinEventType: "min_eventType";
        readonly MinType: "min_type";
        readonly MinSearchQuery: "min_searchQuery";
        readonly MinProperties: "min_properties";
        readonly MinUserProperties: "min_userProperties";
        readonly MaxId: "max_id";
        readonly MaxOrganizationId: "max_organizationId";
        readonly MaxMessageId: "max_messageId";
        readonly MaxConversationId: "max_conversationId";
        readonly MaxCreatedAt: "max_createdAt";
        readonly MaxProjectId: "max_projectId";
        readonly MaxIntegrationId: "max_integrationId";
        readonly MaxEventType: "max_eventType";
        readonly MaxType: "max_type";
        readonly MaxSearchQuery: "max_searchQuery";
        readonly MaxProperties: "max_properties";
        readonly MaxUserProperties: "max_userProperties";
    }>;
}
/** @internal */
export declare const EventsOrderByDirection$inboundSchema: z.ZodNativeEnum<typeof EventsOrderByDirection>;
/** @internal */
export declare const EventsOrderByDirection$outboundSchema: z.ZodNativeEnum<typeof EventsOrderByDirection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsOrderByDirection$ {
    /** @deprecated use `EventsOrderByDirection$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Asc: "asc";
        readonly Desc: "desc";
    }>;
    /** @deprecated use `EventsOrderByDirection$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Asc: "asc";
        readonly Desc: "desc";
    }>;
}
/** @internal */
export declare const EventsOrderBy$inboundSchema: z.ZodType<EventsOrderBy, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsOrderBy$Outbound = {
    field: string;
    direction: string;
};
/** @internal */
export declare const EventsOrderBy$outboundSchema: z.ZodType<EventsOrderBy$Outbound, z.ZodTypeDef, EventsOrderBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsOrderBy$ {
    /** @deprecated use `EventsOrderBy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsOrderBy, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsOrderBy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsOrderBy$Outbound, z.ZodTypeDef, EventsOrderBy>;
    /** @deprecated use `EventsOrderBy$Outbound` instead. */
    type Outbound = EventsOrderBy$Outbound;
}
export declare function eventsOrderByToJSON(eventsOrderBy: EventsOrderBy): string;
export declare function eventsOrderByFromJSON(jsonString: string): SafeParseResult<EventsOrderBy, SDKValidationError>;
//# sourceMappingURL=eventsorderby.d.ts.map