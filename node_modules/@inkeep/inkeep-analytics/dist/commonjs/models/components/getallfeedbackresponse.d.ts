import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Conversation, Conversation$Outbound } from "./conversation.js";
import { Message, Message$Outbound } from "./message.js";
export declare const GetAllFeedbackResponseType: {
    readonly Positive: "positive";
    readonly Negative: "negative";
};
export type GetAllFeedbackResponseType = ClosedEnum<typeof GetAllFeedbackResponseType>;
export type Reasons = {
    label: string;
    details: string;
};
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type GetAllFeedbackResponseId = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseUserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const GetAllFeedbackResponseUserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseUserType = ClosedEnum<typeof GetAllFeedbackResponseUserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type GetAllFeedbackResponseUserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: GetAllFeedbackResponseUserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export type PositiveFeedback = {
    id: string;
    type: GetAllFeedbackResponseType;
    messageId: string;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    createdAt?: Date | null | undefined;
    reasons?: Array<Reasons> | null | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: GetAllFeedbackResponseUserProperties | null | undefined;
    conversation: Conversation;
    message: Message;
};
export declare const GetAllFeedbackResponseNegativeFeedbackType: {
    readonly Positive: "positive";
    readonly Negative: "negative";
};
export type GetAllFeedbackResponseNegativeFeedbackType = ClosedEnum<typeof GetAllFeedbackResponseNegativeFeedbackType>;
export type GetAllFeedbackResponseReasons = {
    label: string;
    details: string;
};
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type GetAllFeedbackResponseNegativeFeedbackId = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseNegativeFeedbackUserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const GetAllFeedbackResponseNegativeFeedbackUserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseNegativeFeedbackUserType = ClosedEnum<typeof GetAllFeedbackResponseNegativeFeedbackUserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type GetAllFeedbackResponseNegativeFeedbackUserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: GetAllFeedbackResponseNegativeFeedbackUserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export type NegativeFeedback = {
    id: string;
    type: GetAllFeedbackResponseNegativeFeedbackType;
    messageId: string;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    createdAt?: Date | null | undefined;
    reasons?: Array<GetAllFeedbackResponseReasons> | null | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: GetAllFeedbackResponseNegativeFeedbackUserProperties | null | undefined;
    conversation: Conversation;
    message: Message;
};
export type GetAllFeedbackResponse = {
    positiveFeedbackCount: number;
    negativeFeedbackCount: number;
    positiveFeedback: Array<PositiveFeedback>;
    negativeFeedback: Array<NegativeFeedback>;
};
/** @internal */
export declare const GetAllFeedbackResponseType$inboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseType>;
/** @internal */
export declare const GetAllFeedbackResponseType$outboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseType$ {
    /** @deprecated use `GetAllFeedbackResponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
    /** @deprecated use `GetAllFeedbackResponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
}
/** @internal */
export declare const Reasons$inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown>;
/** @internal */
export type Reasons$Outbound = {
    label: string;
    details: string;
};
/** @internal */
export declare const Reasons$outboundSchema: z.ZodType<Reasons$Outbound, z.ZodTypeDef, Reasons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Reasons$ {
    /** @deprecated use `Reasons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown>;
    /** @deprecated use `Reasons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Reasons$Outbound, z.ZodTypeDef, Reasons>;
    /** @deprecated use `Reasons$Outbound` instead. */
    type Outbound = Reasons$Outbound;
}
export declare function reasonsToJSON(reasons: Reasons): string;
export declare function reasonsFromJSON(jsonString: string): SafeParseResult<Reasons, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseId$inboundSchema: z.ZodType<GetAllFeedbackResponseId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseId$Outbound = string | number;
/** @internal */
export declare const GetAllFeedbackResponseId$outboundSchema: z.ZodType<GetAllFeedbackResponseId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseId$ {
    /** @deprecated use `GetAllFeedbackResponseId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseId>;
    /** @deprecated use `GetAllFeedbackResponseId$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseId$Outbound;
}
export declare function getAllFeedbackResponseIdToJSON(getAllFeedbackResponseId: GetAllFeedbackResponseId): string;
export declare function getAllFeedbackResponseIdFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseId, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseUserId$inboundSchema: z.ZodType<GetAllFeedbackResponseUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseUserId$Outbound = string | number;
/** @internal */
export declare const GetAllFeedbackResponseUserId$outboundSchema: z.ZodType<GetAllFeedbackResponseUserId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseUserId$ {
    /** @deprecated use `GetAllFeedbackResponseUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseUserId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseUserId>;
    /** @deprecated use `GetAllFeedbackResponseUserId$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseUserId$Outbound;
}
export declare function getAllFeedbackResponseUserIdToJSON(getAllFeedbackResponseUserId: GetAllFeedbackResponseUserId): string;
export declare function getAllFeedbackResponseUserIdFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseUserId, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseUserType$inboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseUserType>;
/** @internal */
export declare const GetAllFeedbackResponseUserType$outboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseUserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseUserType$ {
    /** @deprecated use `GetAllFeedbackResponseUserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `GetAllFeedbackResponseUserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const GetAllFeedbackResponseUserProperties$inboundSchema: z.ZodType<GetAllFeedbackResponseUserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseUserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const GetAllFeedbackResponseUserProperties$outboundSchema: z.ZodType<GetAllFeedbackResponseUserProperties$Outbound, z.ZodTypeDef, GetAllFeedbackResponseUserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseUserProperties$ {
    /** @deprecated use `GetAllFeedbackResponseUserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseUserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseUserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseUserProperties$Outbound, z.ZodTypeDef, GetAllFeedbackResponseUserProperties>;
    /** @deprecated use `GetAllFeedbackResponseUserProperties$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseUserProperties$Outbound;
}
export declare function getAllFeedbackResponseUserPropertiesToJSON(getAllFeedbackResponseUserProperties: GetAllFeedbackResponseUserProperties): string;
export declare function getAllFeedbackResponseUserPropertiesFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseUserProperties, SDKValidationError>;
/** @internal */
export declare const PositiveFeedback$inboundSchema: z.ZodType<PositiveFeedback, z.ZodTypeDef, unknown>;
/** @internal */
export type PositiveFeedback$Outbound = {
    id: string;
    type: string;
    messageId: string;
    createdAt?: string | null | undefined;
    reasons?: Array<Reasons$Outbound> | null | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: GetAllFeedbackResponseUserProperties$Outbound | null | undefined;
    conversation: Conversation$Outbound;
    message: Message$Outbound;
};
/** @internal */
export declare const PositiveFeedback$outboundSchema: z.ZodType<PositiveFeedback$Outbound, z.ZodTypeDef, PositiveFeedback>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PositiveFeedback$ {
    /** @deprecated use `PositiveFeedback$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PositiveFeedback, z.ZodTypeDef, unknown>;
    /** @deprecated use `PositiveFeedback$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PositiveFeedback$Outbound, z.ZodTypeDef, PositiveFeedback>;
    /** @deprecated use `PositiveFeedback$Outbound` instead. */
    type Outbound = PositiveFeedback$Outbound;
}
export declare function positiveFeedbackToJSON(positiveFeedback: PositiveFeedback): string;
export declare function positiveFeedbackFromJSON(jsonString: string): SafeParseResult<PositiveFeedback, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackType$inboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackType>;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackType$outboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseNegativeFeedbackType$ {
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
}
/** @internal */
export declare const GetAllFeedbackResponseReasons$inboundSchema: z.ZodType<GetAllFeedbackResponseReasons, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseReasons$Outbound = {
    label: string;
    details: string;
};
/** @internal */
export declare const GetAllFeedbackResponseReasons$outboundSchema: z.ZodType<GetAllFeedbackResponseReasons$Outbound, z.ZodTypeDef, GetAllFeedbackResponseReasons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseReasons$ {
    /** @deprecated use `GetAllFeedbackResponseReasons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseReasons, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseReasons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseReasons$Outbound, z.ZodTypeDef, GetAllFeedbackResponseReasons>;
    /** @deprecated use `GetAllFeedbackResponseReasons$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseReasons$Outbound;
}
export declare function getAllFeedbackResponseReasonsToJSON(getAllFeedbackResponseReasons: GetAllFeedbackResponseReasons): string;
export declare function getAllFeedbackResponseReasonsFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseReasons, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackId$inboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseNegativeFeedbackId$Outbound = string | number;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackId$outboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseNegativeFeedbackId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseNegativeFeedbackId$ {
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseNegativeFeedbackId>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackId$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseNegativeFeedbackId$Outbound;
}
export declare function getAllFeedbackResponseNegativeFeedbackIdToJSON(getAllFeedbackResponseNegativeFeedbackId: GetAllFeedbackResponseNegativeFeedbackId): string;
export declare function getAllFeedbackResponseNegativeFeedbackIdFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseNegativeFeedbackId, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackUserId$inboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseNegativeFeedbackUserId$Outbound = string | number;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackUserId$outboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseNegativeFeedbackUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseNegativeFeedbackUserId$ {
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserId$Outbound, z.ZodTypeDef, GetAllFeedbackResponseNegativeFeedbackUserId>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserId$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseNegativeFeedbackUserId$Outbound;
}
export declare function getAllFeedbackResponseNegativeFeedbackUserIdToJSON(getAllFeedbackResponseNegativeFeedbackUserId: GetAllFeedbackResponseNegativeFeedbackUserId): string;
export declare function getAllFeedbackResponseNegativeFeedbackUserIdFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseNegativeFeedbackUserId, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackUserType>;
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackUserType$outboundSchema: z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackUserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseNegativeFeedbackUserType$ {
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound, z.ZodTypeDef, GetAllFeedbackResponseNegativeFeedbackUserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponseNegativeFeedbackUserProperties$ {
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound, z.ZodTypeDef, GetAllFeedbackResponseNegativeFeedbackUserProperties>;
    /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound` instead. */
    type Outbound = GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound;
}
export declare function getAllFeedbackResponseNegativeFeedbackUserPropertiesToJSON(getAllFeedbackResponseNegativeFeedbackUserProperties: GetAllFeedbackResponseNegativeFeedbackUserProperties): string;
export declare function getAllFeedbackResponseNegativeFeedbackUserPropertiesFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponseNegativeFeedbackUserProperties, SDKValidationError>;
/** @internal */
export declare const NegativeFeedback$inboundSchema: z.ZodType<NegativeFeedback, z.ZodTypeDef, unknown>;
/** @internal */
export type NegativeFeedback$Outbound = {
    id: string;
    type: string;
    messageId: string;
    createdAt?: string | null | undefined;
    reasons?: Array<GetAllFeedbackResponseReasons$Outbound> | null | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound | null | undefined;
    conversation: Conversation$Outbound;
    message: Message$Outbound;
};
/** @internal */
export declare const NegativeFeedback$outboundSchema: z.ZodType<NegativeFeedback$Outbound, z.ZodTypeDef, NegativeFeedback>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NegativeFeedback$ {
    /** @deprecated use `NegativeFeedback$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NegativeFeedback, z.ZodTypeDef, unknown>;
    /** @deprecated use `NegativeFeedback$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NegativeFeedback$Outbound, z.ZodTypeDef, NegativeFeedback>;
    /** @deprecated use `NegativeFeedback$Outbound` instead. */
    type Outbound = NegativeFeedback$Outbound;
}
export declare function negativeFeedbackToJSON(negativeFeedback: NegativeFeedback): string;
export declare function negativeFeedbackFromJSON(jsonString: string): SafeParseResult<NegativeFeedback, SDKValidationError>;
/** @internal */
export declare const GetAllFeedbackResponse$inboundSchema: z.ZodType<GetAllFeedbackResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackResponse$Outbound = {
    positiveFeedbackCount: number;
    negativeFeedbackCount: number;
    positiveFeedback: Array<PositiveFeedback$Outbound>;
    negativeFeedback: Array<NegativeFeedback$Outbound>;
};
/** @internal */
export declare const GetAllFeedbackResponse$outboundSchema: z.ZodType<GetAllFeedbackResponse$Outbound, z.ZodTypeDef, GetAllFeedbackResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackResponse$ {
    /** @deprecated use `GetAllFeedbackResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackResponse$Outbound, z.ZodTypeDef, GetAllFeedbackResponse>;
    /** @deprecated use `GetAllFeedbackResponse$Outbound` instead. */
    type Outbound = GetAllFeedbackResponse$Outbound;
}
export declare function getAllFeedbackResponseToJSON(getAllFeedbackResponse: GetAllFeedbackResponse): string;
export declare function getAllFeedbackResponseFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackResponse, SDKValidationError>;
//# sourceMappingURL=getallfeedbackresponse.d.ts.map