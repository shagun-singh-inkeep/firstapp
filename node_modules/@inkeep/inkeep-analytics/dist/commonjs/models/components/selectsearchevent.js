"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectSearchEvent$ = exports.SelectSearchEvent$outboundSchema = exports.SelectSearchEvent$inboundSchema = exports.SelectSearchEventEntityType$ = exports.SelectSearchEventEntityType$outboundSchema = exports.SelectSearchEventEntityType$inboundSchema = exports.SelectSearchEventUserProperties$ = exports.SelectSearchEventUserProperties$outboundSchema = exports.SelectSearchEventUserProperties$inboundSchema = exports.SelectSearchEventUserType$ = exports.SelectSearchEventUserType$outboundSchema = exports.SelectSearchEventUserType$inboundSchema = exports.SelectSearchEventUserId$ = exports.SelectSearchEventUserId$outboundSchema = exports.SelectSearchEventUserId$inboundSchema = exports.SelectSearchEventId$ = exports.SelectSearchEventId$outboundSchema = exports.SelectSearchEventId$inboundSchema = exports.SelectSearchEventEntityType = exports.SelectSearchEventUserType = void 0;
exports.selectSearchEventIdToJSON = selectSearchEventIdToJSON;
exports.selectSearchEventIdFromJSON = selectSearchEventIdFromJSON;
exports.selectSearchEventUserIdToJSON = selectSearchEventUserIdToJSON;
exports.selectSearchEventUserIdFromJSON = selectSearchEventUserIdFromJSON;
exports.selectSearchEventUserPropertiesToJSON = selectSearchEventUserPropertiesToJSON;
exports.selectSearchEventUserPropertiesFromJSON = selectSearchEventUserPropertiesFromJSON;
exports.selectSearchEventToJSON = selectSearchEventToJSON;
exports.selectSearchEventFromJSON = selectSearchEventFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.SelectSearchEventUserType = {
    User: "user",
    Member: "member",
};
exports.SelectSearchEventEntityType = {
    Search: "search",
};
/** @internal */
exports.SelectSearchEventId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.SelectSearchEventId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectSearchEventId$;
(function (SelectSearchEventId$) {
    /** @deprecated use `SelectSearchEventId$inboundSchema` instead. */
    SelectSearchEventId$.inboundSchema = exports.SelectSearchEventId$inboundSchema;
    /** @deprecated use `SelectSearchEventId$outboundSchema` instead. */
    SelectSearchEventId$.outboundSchema = exports.SelectSearchEventId$outboundSchema;
})(SelectSearchEventId$ || (exports.SelectSearchEventId$ = SelectSearchEventId$ = {}));
function selectSearchEventIdToJSON(selectSearchEventId) {
    return JSON.stringify(exports.SelectSearchEventId$outboundSchema.parse(selectSearchEventId));
}
function selectSearchEventIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectSearchEventId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectSearchEventId' from JSON`);
}
/** @internal */
exports.SelectSearchEventUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.SelectSearchEventUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectSearchEventUserId$;
(function (SelectSearchEventUserId$) {
    /** @deprecated use `SelectSearchEventUserId$inboundSchema` instead. */
    SelectSearchEventUserId$.inboundSchema = exports.SelectSearchEventUserId$inboundSchema;
    /** @deprecated use `SelectSearchEventUserId$outboundSchema` instead. */
    SelectSearchEventUserId$.outboundSchema = exports.SelectSearchEventUserId$outboundSchema;
})(SelectSearchEventUserId$ || (exports.SelectSearchEventUserId$ = SelectSearchEventUserId$ = {}));
function selectSearchEventUserIdToJSON(selectSearchEventUserId) {
    return JSON.stringify(exports.SelectSearchEventUserId$outboundSchema.parse(selectSearchEventUserId));
}
function selectSearchEventUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectSearchEventUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectSearchEventUserId' from JSON`);
}
/** @internal */
exports.SelectSearchEventUserType$inboundSchema = z.nativeEnum(exports.SelectSearchEventUserType);
/** @internal */
exports.SelectSearchEventUserType$outboundSchema = exports.SelectSearchEventUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectSearchEventUserType$;
(function (SelectSearchEventUserType$) {
    /** @deprecated use `SelectSearchEventUserType$inboundSchema` instead. */
    SelectSearchEventUserType$.inboundSchema = exports.SelectSearchEventUserType$inboundSchema;
    /** @deprecated use `SelectSearchEventUserType$outboundSchema` instead. */
    SelectSearchEventUserType$.outboundSchema = exports.SelectSearchEventUserType$outboundSchema;
})(SelectSearchEventUserType$ || (exports.SelectSearchEventUserType$ = SelectSearchEventUserType$ = {}));
/** @internal */
exports.SelectSearchEventUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.SelectSearchEventUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.SelectSearchEventUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.SelectSearchEventUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectSearchEventUserProperties$;
(function (SelectSearchEventUserProperties$) {
    /** @deprecated use `SelectSearchEventUserProperties$inboundSchema` instead. */
    SelectSearchEventUserProperties$.inboundSchema = exports.SelectSearchEventUserProperties$inboundSchema;
    /** @deprecated use `SelectSearchEventUserProperties$outboundSchema` instead. */
    SelectSearchEventUserProperties$.outboundSchema = exports.SelectSearchEventUserProperties$outboundSchema;
})(SelectSearchEventUserProperties$ || (exports.SelectSearchEventUserProperties$ = SelectSearchEventUserProperties$ = {}));
function selectSearchEventUserPropertiesToJSON(selectSearchEventUserProperties) {
    return JSON.stringify(exports.SelectSearchEventUserProperties$outboundSchema.parse(selectSearchEventUserProperties));
}
function selectSearchEventUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectSearchEventUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectSearchEventUserProperties' from JSON`);
}
/** @internal */
exports.SelectSearchEventEntityType$inboundSchema = z.nativeEnum(exports.SelectSearchEventEntityType);
/** @internal */
exports.SelectSearchEventEntityType$outboundSchema = exports.SelectSearchEventEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectSearchEventEntityType$;
(function (SelectSearchEventEntityType$) {
    /** @deprecated use `SelectSearchEventEntityType$inboundSchema` instead. */
    SelectSearchEventEntityType$.inboundSchema = exports.SelectSearchEventEntityType$inboundSchema;
    /** @deprecated use `SelectSearchEventEntityType$outboundSchema` instead. */
    SelectSearchEventEntityType$.outboundSchema = exports.SelectSearchEventEntityType$outboundSchema;
})(SelectSearchEventEntityType$ || (exports.SelectSearchEventEntityType$ = SelectSearchEventEntityType$ = {}));
/** @internal */
exports.SelectSearchEvent$inboundSchema = z.object({
    id: z.string(),
    type: z.string(),
    searchQuery: z.string(),
    createdAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.SelectSearchEventUserProperties$inboundSchema)).optional(),
    entityType: exports.SelectSearchEventEntityType$inboundSchema,
});
/** @internal */
exports.SelectSearchEvent$outboundSchema = z.object({
    id: z.string(),
    type: z.string(),
    searchQuery: z.string(),
    createdAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.SelectSearchEventUserProperties$outboundSchema)).optional(),
    entityType: exports.SelectSearchEventEntityType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectSearchEvent$;
(function (SelectSearchEvent$) {
    /** @deprecated use `SelectSearchEvent$inboundSchema` instead. */
    SelectSearchEvent$.inboundSchema = exports.SelectSearchEvent$inboundSchema;
    /** @deprecated use `SelectSearchEvent$outboundSchema` instead. */
    SelectSearchEvent$.outboundSchema = exports.SelectSearchEvent$outboundSchema;
})(SelectSearchEvent$ || (exports.SelectSearchEvent$ = SelectSearchEvent$ = {}));
function selectSearchEventToJSON(selectSearchEvent) {
    return JSON.stringify(exports.SelectSearchEvent$outboundSchema.parse(selectSearchEvent));
}
function selectSearchEventFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectSearchEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectSearchEvent' from JSON`);
}
//# sourceMappingURL=selectsearchevent.js.map