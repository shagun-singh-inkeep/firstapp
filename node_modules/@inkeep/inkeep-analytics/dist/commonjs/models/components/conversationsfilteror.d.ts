import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ConversationsFilter, ConversationsFilter$Outbound } from "./conversationsfilter.js";
export type Or = ConversationsFilter;
/**
 * ConversationsFilter OR operator
 */
export type ConversationsFilterOR = {
    /**
     * ConversationsFilter OR condition
     */
    or: Array<ConversationsFilter>;
};
/** @internal */
export declare const Or$inboundSchema: z.ZodType<Or, z.ZodTypeDef, unknown>;
/** @internal */
export type Or$Outbound = ConversationsFilter$Outbound;
/** @internal */
export declare const Or$outboundSchema: z.ZodType<Or$Outbound, z.ZodTypeDef, Or>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Or$ {
    /** @deprecated use `Or$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `Or$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsFilter$Outbound, z.ZodTypeDef, ConversationsFilter>;
    /** @deprecated use `Or$Outbound` instead. */
    type Outbound = Or$Outbound;
}
export declare function orToJSON(or: Or): string;
export declare function orFromJSON(jsonString: string): SafeParseResult<Or, SDKValidationError>;
/** @internal */
export declare const ConversationsFilterOR$inboundSchema: z.ZodType<ConversationsFilterOR, z.ZodTypeDef, unknown>;
/** @internal */
export type ConversationsFilterOR$Outbound = {
    or: Array<ConversationsFilter$Outbound>;
};
/** @internal */
export declare const ConversationsFilterOR$outboundSchema: z.ZodType<ConversationsFilterOR$Outbound, z.ZodTypeDef, ConversationsFilterOR>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConversationsFilterOR$ {
    /** @deprecated use `ConversationsFilterOR$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsFilterOR, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConversationsFilterOR$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsFilterOR$Outbound, z.ZodTypeDef, ConversationsFilterOR>;
    /** @deprecated use `ConversationsFilterOR$Outbound` instead. */
    type Outbound = ConversationsFilterOR$Outbound;
}
export declare function conversationsFilterORToJSON(conversationsFilterOR: ConversationsFilterOR): string;
export declare function conversationsFilterORFromJSON(jsonString: string): SafeParseResult<ConversationsFilterOR, SDKValidationError>;
//# sourceMappingURL=conversationsfilteror.d.ts.map