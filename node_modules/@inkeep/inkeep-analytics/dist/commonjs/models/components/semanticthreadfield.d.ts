import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
/**
 * Available fields for SemanticThread
 */
export declare const SemanticThreadField: {
    readonly Id: "id";
    readonly MessageIds: "messageIds";
    readonly MessagesCount: "messagesCount";
    readonly OrganizationId: "organizationId";
    readonly Question: "question";
    readonly QuestionLength: "questionLength";
    readonly Answer: "answer";
    readonly IsOnTopic: "isOnTopic";
    readonly IsClear: "isClear";
    readonly IsDocumented: "isDocumented";
    readonly IsFeatureSupported: "isFeatureSupported";
    readonly IsAnswerConfident: "isAnswerConfident";
    readonly GapSummary: "gapSummary";
    readonly Subject: "subject";
    readonly Category: "category";
    readonly Languages: "languages";
    readonly FirstPartyEntities: "firstPartyEntities";
    readonly ThirdPartyEntities: "thirdPartyEntities";
    readonly Emotion: "emotion";
    readonly Sentiment: "sentiment";
    readonly QuestionType: "questionType";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
    readonly FirstMessageTime: "firstMessageTime";
    readonly LastMessageTime: "lastMessageTime";
    readonly LastUpdated: "lastUpdated";
    readonly HasPositiveFeedback: "hasPositiveFeedback";
    readonly HasNegativeFeedback: "hasNegativeFeedback";
    readonly ConversationIds: "conversationIds";
    readonly AreAIAnnotationsVerified: "areAIAnnotationsVerified";
    readonly IsInitialQuestionAnswer: "isInitialQuestionAnswer";
};
/**
 * Available fields for SemanticThread
 */
export type SemanticThreadField = ClosedEnum<typeof SemanticThreadField>;
/** @internal */
export declare const SemanticThreadField$inboundSchema: z.ZodNativeEnum<typeof SemanticThreadField>;
/** @internal */
export declare const SemanticThreadField$outboundSchema: z.ZodNativeEnum<typeof SemanticThreadField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadField$ {
    /** @deprecated use `SemanticThreadField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly MessageIds: "messageIds";
        readonly MessagesCount: "messagesCount";
        readonly OrganizationId: "organizationId";
        readonly Question: "question";
        readonly QuestionLength: "questionLength";
        readonly Answer: "answer";
        readonly IsOnTopic: "isOnTopic";
        readonly IsClear: "isClear";
        readonly IsDocumented: "isDocumented";
        readonly IsFeatureSupported: "isFeatureSupported";
        readonly IsAnswerConfident: "isAnswerConfident";
        readonly GapSummary: "gapSummary";
        readonly Subject: "subject";
        readonly Category: "category";
        readonly Languages: "languages";
        readonly FirstPartyEntities: "firstPartyEntities";
        readonly ThirdPartyEntities: "thirdPartyEntities";
        readonly Emotion: "emotion";
        readonly Sentiment: "sentiment";
        readonly QuestionType: "questionType";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly FirstMessageTime: "firstMessageTime";
        readonly LastMessageTime: "lastMessageTime";
        readonly LastUpdated: "lastUpdated";
        readonly HasPositiveFeedback: "hasPositiveFeedback";
        readonly HasNegativeFeedback: "hasNegativeFeedback";
        readonly ConversationIds: "conversationIds";
        readonly AreAIAnnotationsVerified: "areAIAnnotationsVerified";
        readonly IsInitialQuestionAnswer: "isInitialQuestionAnswer";
    }>;
    /** @deprecated use `SemanticThreadField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly MessageIds: "messageIds";
        readonly MessagesCount: "messagesCount";
        readonly OrganizationId: "organizationId";
        readonly Question: "question";
        readonly QuestionLength: "questionLength";
        readonly Answer: "answer";
        readonly IsOnTopic: "isOnTopic";
        readonly IsClear: "isClear";
        readonly IsDocumented: "isDocumented";
        readonly IsFeatureSupported: "isFeatureSupported";
        readonly IsAnswerConfident: "isAnswerConfident";
        readonly GapSummary: "gapSummary";
        readonly Subject: "subject";
        readonly Category: "category";
        readonly Languages: "languages";
        readonly FirstPartyEntities: "firstPartyEntities";
        readonly ThirdPartyEntities: "thirdPartyEntities";
        readonly Emotion: "emotion";
        readonly Sentiment: "sentiment";
        readonly QuestionType: "questionType";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly FirstMessageTime: "firstMessageTime";
        readonly LastMessageTime: "lastMessageTime";
        readonly LastUpdated: "lastUpdated";
        readonly HasPositiveFeedback: "hasPositiveFeedback";
        readonly HasNegativeFeedback: "hasNegativeFeedback";
        readonly ConversationIds: "conversationIds";
        readonly AreAIAnnotationsVerified: "areAIAnnotationsVerified";
        readonly IsInitialQuestionAnswer: "isInitialQuestionAnswer";
    }>;
}
//# sourceMappingURL=semanticthreadfield.d.ts.map