import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { OpenAIConversation, OpenAIConversation$Outbound } from "./openaiconversation.js";
import { SupportCopilotConversation, SupportCopilotConversation$Outbound } from "./supportcopilotconversation.js";
import { SupportTicketConversation, SupportTicketConversation$Outbound } from "./supportticketconversation.js";
export type Conversation = (SupportTicketConversation & {
    type: "support_ticket";
}) | (SupportCopilotConversation & {
    type: "support_copilot";
}) | (OpenAIConversation & {
    type: "openai";
});
/** @internal */
export declare const Conversation$inboundSchema: z.ZodType<Conversation, z.ZodTypeDef, unknown>;
/** @internal */
export type Conversation$Outbound = (SupportTicketConversation$Outbound & {
    type: "support_ticket";
}) | (SupportCopilotConversation$Outbound & {
    type: "support_copilot";
}) | (OpenAIConversation$Outbound & {
    type: "openai";
});
/** @internal */
export declare const Conversation$outboundSchema: z.ZodType<Conversation$Outbound, z.ZodTypeDef, Conversation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Conversation$ {
    /** @deprecated use `Conversation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Conversation, z.ZodTypeDef, unknown>;
    /** @deprecated use `Conversation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Conversation$Outbound, z.ZodTypeDef, Conversation>;
    /** @deprecated use `Conversation$Outbound` instead. */
    type Outbound = Conversation$Outbound;
}
export declare function conversationToJSON(conversation: Conversation): string;
export declare function conversationFromJSON(jsonString: string): SafeParseResult<Conversation, SDKValidationError>;
//# sourceMappingURL=conversation.d.ts.map