import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SemanticThreadFilter, SemanticThreadFilter$Outbound } from "./semanticthreadfilter.js";
export type SemanticThreadFilterOROR = SemanticThreadFilter;
/**
 * SemanticThreadFilter OR operator
 */
export type SemanticThreadFilterOR = {
    /**
     * SemanticThreadFilter OR condition
     */
    or: Array<SemanticThreadFilter>;
};
/** @internal */
export declare const SemanticThreadFilterOROR$inboundSchema: z.ZodType<SemanticThreadFilterOROR, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterOROR$Outbound = SemanticThreadFilter$Outbound;
/** @internal */
export declare const SemanticThreadFilterOROR$outboundSchema: z.ZodType<SemanticThreadFilterOROR$Outbound, z.ZodTypeDef, SemanticThreadFilterOROR>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterOROR$ {
    /** @deprecated use `SemanticThreadFilterOROR$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterOROR$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilter$Outbound, z.ZodTypeDef, SemanticThreadFilter>;
    /** @deprecated use `SemanticThreadFilterOROR$Outbound` instead. */
    type Outbound = SemanticThreadFilterOROR$Outbound;
}
export declare function semanticThreadFilterORORToJSON(semanticThreadFilterOROR: SemanticThreadFilterOROR): string;
export declare function semanticThreadFilterORORFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterOROR, SDKValidationError>;
/** @internal */
export declare const SemanticThreadFilterOR$inboundSchema: z.ZodType<SemanticThreadFilterOR, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterOR$Outbound = {
    or: Array<SemanticThreadFilter$Outbound>;
};
/** @internal */
export declare const SemanticThreadFilterOR$outboundSchema: z.ZodType<SemanticThreadFilterOR$Outbound, z.ZodTypeDef, SemanticThreadFilterOR>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterOR$ {
    /** @deprecated use `SemanticThreadFilterOR$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterOR, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterOR$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterOR$Outbound, z.ZodTypeDef, SemanticThreadFilterOR>;
    /** @deprecated use `SemanticThreadFilterOR$Outbound` instead. */
    type Outbound = SemanticThreadFilterOR$Outbound;
}
export declare function semanticThreadFilterORToJSON(semanticThreadFilterOR: SemanticThreadFilterOR): string;
export declare function semanticThreadFilterORFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterOR, SDKValidationError>;
//# sourceMappingURL=semanticthreadfilteror.d.ts.map