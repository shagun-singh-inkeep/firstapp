import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SemanticThreadFilterAND, SemanticThreadFilterAND$Outbound } from "./semanticthreadfilterand.js";
import { SemanticThreadFilterCondition, SemanticThreadFilterCondition$Outbound } from "./semanticthreadfiltercondition.js";
import { SemanticThreadFilterOR, SemanticThreadFilterOR$Outbound } from "./semanticthreadfilteror.js";
export type SemanticThreadFilter = SemanticThreadFilterCondition | SemanticThreadFilterAND | SemanticThreadFilterOR;
/** @internal */
export declare const SemanticThreadFilter$inboundSchema: z.ZodType<SemanticThreadFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilter$Outbound = SemanticThreadFilterCondition$Outbound | SemanticThreadFilterAND$Outbound | SemanticThreadFilterOR$Outbound;
/** @internal */
export declare const SemanticThreadFilter$outboundSchema: z.ZodType<SemanticThreadFilter$Outbound, z.ZodTypeDef, SemanticThreadFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilter$ {
    /** @deprecated use `SemanticThreadFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilter$Outbound, z.ZodTypeDef, SemanticThreadFilter>;
    /** @deprecated use `SemanticThreadFilter$Outbound` instead. */
    type Outbound = SemanticThreadFilter$Outbound;
}
export declare function semanticThreadFilterToJSON(semanticThreadFilter: SemanticThreadFilter): string;
export declare function semanticThreadFilterFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilter, SDKValidationError>;
//# sourceMappingURL=semanticthreadfilter.d.ts.map