import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const FeedbackSimpleFieldSelectionType: {
    readonly Field: "field";
};
export type FeedbackSimpleFieldSelectionType = ClosedEnum<typeof FeedbackSimpleFieldSelectionType>;
export declare const FeedbackSimpleFieldSelectionField: {
    readonly Id: "id";
    readonly Type: "type";
    readonly MessageId: "messageId";
    readonly CreatedAt: "createdAt";
    readonly OrganizationId: "organizationId";
    readonly Reasons: "reasons";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
    readonly ConversationId: "conversationId";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly UpdatedAt: "updatedAt";
    readonly Status: "status";
};
export type FeedbackSimpleFieldSelectionField = ClosedEnum<typeof FeedbackSimpleFieldSelectionField>;
export type FeedbackSimpleFieldSelection = {
    type: FeedbackSimpleFieldSelectionType;
    field: FeedbackSimpleFieldSelectionField;
    path?: Array<string> | undefined;
};
/** @internal */
export declare const FeedbackSimpleFieldSelectionType$inboundSchema: z.ZodNativeEnum<typeof FeedbackSimpleFieldSelectionType>;
/** @internal */
export declare const FeedbackSimpleFieldSelectionType$outboundSchema: z.ZodNativeEnum<typeof FeedbackSimpleFieldSelectionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackSimpleFieldSelectionType$ {
    /** @deprecated use `FeedbackSimpleFieldSelectionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Field: "field";
    }>;
    /** @deprecated use `FeedbackSimpleFieldSelectionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Field: "field";
    }>;
}
/** @internal */
export declare const FeedbackSimpleFieldSelectionField$inboundSchema: z.ZodNativeEnum<typeof FeedbackSimpleFieldSelectionField>;
/** @internal */
export declare const FeedbackSimpleFieldSelectionField$outboundSchema: z.ZodNativeEnum<typeof FeedbackSimpleFieldSelectionField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackSimpleFieldSelectionField$ {
    /** @deprecated use `FeedbackSimpleFieldSelectionField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly Type: "type";
        readonly MessageId: "messageId";
        readonly CreatedAt: "createdAt";
        readonly OrganizationId: "organizationId";
        readonly Reasons: "reasons";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly ConversationId: "conversationId";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly UpdatedAt: "updatedAt";
        readonly Status: "status";
    }>;
    /** @deprecated use `FeedbackSimpleFieldSelectionField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly Type: "type";
        readonly MessageId: "messageId";
        readonly CreatedAt: "createdAt";
        readonly OrganizationId: "organizationId";
        readonly Reasons: "reasons";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly ConversationId: "conversationId";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly UpdatedAt: "updatedAt";
        readonly Status: "status";
    }>;
}
/** @internal */
export declare const FeedbackSimpleFieldSelection$inboundSchema: z.ZodType<FeedbackSimpleFieldSelection, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackSimpleFieldSelection$Outbound = {
    type: string;
    field: string;
    path?: Array<string> | undefined;
};
/** @internal */
export declare const FeedbackSimpleFieldSelection$outboundSchema: z.ZodType<FeedbackSimpleFieldSelection$Outbound, z.ZodTypeDef, FeedbackSimpleFieldSelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackSimpleFieldSelection$ {
    /** @deprecated use `FeedbackSimpleFieldSelection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackSimpleFieldSelection, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackSimpleFieldSelection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackSimpleFieldSelection$Outbound, z.ZodTypeDef, FeedbackSimpleFieldSelection>;
    /** @deprecated use `FeedbackSimpleFieldSelection$Outbound` instead. */
    type Outbound = FeedbackSimpleFieldSelection$Outbound;
}
export declare function feedbackSimpleFieldSelectionToJSON(feedbackSimpleFieldSelection: FeedbackSimpleFieldSelection): string;
export declare function feedbackSimpleFieldSelectionFromJSON(jsonString: string): SafeParseResult<FeedbackSimpleFieldSelection, SDKValidationError>;
//# sourceMappingURL=feedbacksimplefieldselection.d.ts.map