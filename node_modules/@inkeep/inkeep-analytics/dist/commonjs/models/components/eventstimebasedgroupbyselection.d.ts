import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { TimeUnit } from "./timeunit.js";
export declare const EventsTimeBasedGroupBySelectionType: {
    readonly Time: "time";
};
export type EventsTimeBasedGroupBySelectionType = ClosedEnum<typeof EventsTimeBasedGroupBySelectionType>;
export declare const EventsTimeBasedGroupBySelectionField: {
    readonly Id: "id";
    readonly OrganizationId: "organizationId";
    readonly MessageId: "messageId";
    readonly ConversationId: "conversationId";
    readonly CreatedAt: "createdAt";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly EventType: "eventType";
    readonly Type: "type";
    readonly SearchQuery: "searchQuery";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
};
export type EventsTimeBasedGroupBySelectionField = ClosedEnum<typeof EventsTimeBasedGroupBySelectionField>;
export type EventsTimeBasedGroupBySelection = {
    type: EventsTimeBasedGroupBySelectionType;
    /**
     * Valid time units for time-based operations
     */
    timeUnit: TimeUnit;
    field?: EventsTimeBasedGroupBySelectionField | undefined;
};
/** @internal */
export declare const EventsTimeBasedGroupBySelectionType$inboundSchema: z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionType>;
/** @internal */
export declare const EventsTimeBasedGroupBySelectionType$outboundSchema: z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsTimeBasedGroupBySelectionType$ {
    /** @deprecated use `EventsTimeBasedGroupBySelectionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Time: "time";
    }>;
    /** @deprecated use `EventsTimeBasedGroupBySelectionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Time: "time";
    }>;
}
/** @internal */
export declare const EventsTimeBasedGroupBySelectionField$inboundSchema: z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionField>;
/** @internal */
export declare const EventsTimeBasedGroupBySelectionField$outboundSchema: z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsTimeBasedGroupBySelectionField$ {
    /** @deprecated use `EventsTimeBasedGroupBySelectionField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly OrganizationId: "organizationId";
        readonly MessageId: "messageId";
        readonly ConversationId: "conversationId";
        readonly CreatedAt: "createdAt";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly EventType: "eventType";
        readonly Type: "type";
        readonly SearchQuery: "searchQuery";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
    }>;
    /** @deprecated use `EventsTimeBasedGroupBySelectionField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly OrganizationId: "organizationId";
        readonly MessageId: "messageId";
        readonly ConversationId: "conversationId";
        readonly CreatedAt: "createdAt";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly EventType: "eventType";
        readonly Type: "type";
        readonly SearchQuery: "searchQuery";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
    }>;
}
/** @internal */
export declare const EventsTimeBasedGroupBySelection$inboundSchema: z.ZodType<EventsTimeBasedGroupBySelection, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsTimeBasedGroupBySelection$Outbound = {
    type: string;
    timeUnit: string;
    field?: string | undefined;
};
/** @internal */
export declare const EventsTimeBasedGroupBySelection$outboundSchema: z.ZodType<EventsTimeBasedGroupBySelection$Outbound, z.ZodTypeDef, EventsTimeBasedGroupBySelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsTimeBasedGroupBySelection$ {
    /** @deprecated use `EventsTimeBasedGroupBySelection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsTimeBasedGroupBySelection, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsTimeBasedGroupBySelection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsTimeBasedGroupBySelection$Outbound, z.ZodTypeDef, EventsTimeBasedGroupBySelection>;
    /** @deprecated use `EventsTimeBasedGroupBySelection$Outbound` instead. */
    type Outbound = EventsTimeBasedGroupBySelection$Outbound;
}
export declare function eventsTimeBasedGroupBySelectionToJSON(eventsTimeBasedGroupBySelection: EventsTimeBasedGroupBySelection): string;
export declare function eventsTimeBasedGroupBySelectionFromJSON(jsonString: string): SafeParseResult<EventsTimeBasedGroupBySelection, SDKValidationError>;
//# sourceMappingURL=eventstimebasedgroupbyselection.d.ts.map