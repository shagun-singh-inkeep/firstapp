import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { EventsFilter, EventsFilter$Outbound } from "./eventsfilter.js";
import { EventsGroupBy, EventsGroupBy$Outbound } from "./eventsgroupby.js";
import { EventsOrderBy, EventsOrderBy$Outbound } from "./eventsorderby.js";
import { EventsSelection, EventsSelection$Outbound } from "./eventsselection.js";
/**
 * Query Events Params
 */
export type QueryEventsRequestBody = {
    select?: Array<EventsSelection> | undefined;
    groupBy?: Array<EventsGroupBy> | undefined;
    where?: EventsFilter | undefined;
    orderBy?: Array<EventsOrderBy> | undefined;
    /**
     * Notes are not persisted, but may be useful for your debugging purposes
     */
    notes?: string | undefined;
};
/** @internal */
export declare const QueryEventsRequestBody$inboundSchema: z.ZodType<QueryEventsRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryEventsRequestBody$Outbound = {
    select?: Array<EventsSelection$Outbound> | undefined;
    groupBy?: Array<EventsGroupBy$Outbound> | undefined;
    where?: EventsFilter$Outbound | undefined;
    orderBy?: Array<EventsOrderBy$Outbound> | undefined;
    notes?: string | undefined;
};
/** @internal */
export declare const QueryEventsRequestBody$outboundSchema: z.ZodType<QueryEventsRequestBody$Outbound, z.ZodTypeDef, QueryEventsRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryEventsRequestBody$ {
    /** @deprecated use `QueryEventsRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryEventsRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryEventsRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryEventsRequestBody$Outbound, z.ZodTypeDef, QueryEventsRequestBody>;
    /** @deprecated use `QueryEventsRequestBody$Outbound` instead. */
    type Outbound = QueryEventsRequestBody$Outbound;
}
export declare function queryEventsRequestBodyToJSON(queryEventsRequestBody: QueryEventsRequestBody): string;
export declare function queryEventsRequestBodyFromJSON(jsonString: string): SafeParseResult<QueryEventsRequestBody, SDKValidationError>;
//# sourceMappingURL=queryeventsrequestbody.d.ts.map