import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { FeedbackFilterAND, FeedbackFilterAND$Outbound } from "./feedbackfilterand.js";
import { FeedbackFilterCondition, FeedbackFilterCondition$Outbound } from "./feedbackfiltercondition.js";
import { FeedbackFilterOR, FeedbackFilterOR$Outbound } from "./feedbackfilteror.js";
export type FeedbackFilter = FeedbackFilterCondition | FeedbackFilterAND | FeedbackFilterOR;
/** @internal */
export declare const FeedbackFilter$inboundSchema: z.ZodType<FeedbackFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackFilter$Outbound = FeedbackFilterCondition$Outbound | FeedbackFilterAND$Outbound | FeedbackFilterOR$Outbound;
/** @internal */
export declare const FeedbackFilter$outboundSchema: z.ZodType<FeedbackFilter$Outbound, z.ZodTypeDef, FeedbackFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackFilter$ {
    /** @deprecated use `FeedbackFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackFilter$Outbound, z.ZodTypeDef, FeedbackFilter>;
    /** @deprecated use `FeedbackFilter$Outbound` instead. */
    type Outbound = FeedbackFilter$Outbound;
}
export declare function feedbackFilterToJSON(feedbackFilter: FeedbackFilter): string;
export declare function feedbackFilterFromJSON(jsonString: string): SafeParseResult<FeedbackFilter, SDKValidationError>;
//# sourceMappingURL=feedbackfilter.d.ts.map