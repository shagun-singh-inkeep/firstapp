"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectMessageEvent$ = exports.SelectMessageEvent$outboundSchema = exports.SelectMessageEvent$inboundSchema = exports.SelectMessageEventEntityType$ = exports.SelectMessageEventEntityType$outboundSchema = exports.SelectMessageEventEntityType$inboundSchema = exports.SelectMessageEventUserProperties$ = exports.SelectMessageEventUserProperties$outboundSchema = exports.SelectMessageEventUserProperties$inboundSchema = exports.SelectMessageEventUserType$ = exports.SelectMessageEventUserType$outboundSchema = exports.SelectMessageEventUserType$inboundSchema = exports.SelectMessageEventUserId$ = exports.SelectMessageEventUserId$outboundSchema = exports.SelectMessageEventUserId$inboundSchema = exports.SelectMessageEventId$ = exports.SelectMessageEventId$outboundSchema = exports.SelectMessageEventId$inboundSchema = exports.SelectMessageEventEntityType = exports.SelectMessageEventUserType = void 0;
exports.selectMessageEventIdToJSON = selectMessageEventIdToJSON;
exports.selectMessageEventIdFromJSON = selectMessageEventIdFromJSON;
exports.selectMessageEventUserIdToJSON = selectMessageEventUserIdToJSON;
exports.selectMessageEventUserIdFromJSON = selectMessageEventUserIdFromJSON;
exports.selectMessageEventUserPropertiesToJSON = selectMessageEventUserPropertiesToJSON;
exports.selectMessageEventUserPropertiesFromJSON = selectMessageEventUserPropertiesFromJSON;
exports.selectMessageEventToJSON = selectMessageEventToJSON;
exports.selectMessageEventFromJSON = selectMessageEventFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.SelectMessageEventUserType = {
    User: "user",
    Member: "member",
};
exports.SelectMessageEventEntityType = {
    Message: "message",
};
/** @internal */
exports.SelectMessageEventId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.SelectMessageEventId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectMessageEventId$;
(function (SelectMessageEventId$) {
    /** @deprecated use `SelectMessageEventId$inboundSchema` instead. */
    SelectMessageEventId$.inboundSchema = exports.SelectMessageEventId$inboundSchema;
    /** @deprecated use `SelectMessageEventId$outboundSchema` instead. */
    SelectMessageEventId$.outboundSchema = exports.SelectMessageEventId$outboundSchema;
})(SelectMessageEventId$ || (exports.SelectMessageEventId$ = SelectMessageEventId$ = {}));
function selectMessageEventIdToJSON(selectMessageEventId) {
    return JSON.stringify(exports.SelectMessageEventId$outboundSchema.parse(selectMessageEventId));
}
function selectMessageEventIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectMessageEventId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectMessageEventId' from JSON`);
}
/** @internal */
exports.SelectMessageEventUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.SelectMessageEventUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectMessageEventUserId$;
(function (SelectMessageEventUserId$) {
    /** @deprecated use `SelectMessageEventUserId$inboundSchema` instead. */
    SelectMessageEventUserId$.inboundSchema = exports.SelectMessageEventUserId$inboundSchema;
    /** @deprecated use `SelectMessageEventUserId$outboundSchema` instead. */
    SelectMessageEventUserId$.outboundSchema = exports.SelectMessageEventUserId$outboundSchema;
})(SelectMessageEventUserId$ || (exports.SelectMessageEventUserId$ = SelectMessageEventUserId$ = {}));
function selectMessageEventUserIdToJSON(selectMessageEventUserId) {
    return JSON.stringify(exports.SelectMessageEventUserId$outboundSchema.parse(selectMessageEventUserId));
}
function selectMessageEventUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectMessageEventUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectMessageEventUserId' from JSON`);
}
/** @internal */
exports.SelectMessageEventUserType$inboundSchema = z.nativeEnum(exports.SelectMessageEventUserType);
/** @internal */
exports.SelectMessageEventUserType$outboundSchema = exports.SelectMessageEventUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectMessageEventUserType$;
(function (SelectMessageEventUserType$) {
    /** @deprecated use `SelectMessageEventUserType$inboundSchema` instead. */
    SelectMessageEventUserType$.inboundSchema = exports.SelectMessageEventUserType$inboundSchema;
    /** @deprecated use `SelectMessageEventUserType$outboundSchema` instead. */
    SelectMessageEventUserType$.outboundSchema = exports.SelectMessageEventUserType$outboundSchema;
})(SelectMessageEventUserType$ || (exports.SelectMessageEventUserType$ = SelectMessageEventUserType$ = {}));
/** @internal */
exports.SelectMessageEventUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.SelectMessageEventUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.SelectMessageEventUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.SelectMessageEventUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectMessageEventUserProperties$;
(function (SelectMessageEventUserProperties$) {
    /** @deprecated use `SelectMessageEventUserProperties$inboundSchema` instead. */
    SelectMessageEventUserProperties$.inboundSchema = exports.SelectMessageEventUserProperties$inboundSchema;
    /** @deprecated use `SelectMessageEventUserProperties$outboundSchema` instead. */
    SelectMessageEventUserProperties$.outboundSchema = exports.SelectMessageEventUserProperties$outboundSchema;
})(SelectMessageEventUserProperties$ || (exports.SelectMessageEventUserProperties$ = SelectMessageEventUserProperties$ = {}));
function selectMessageEventUserPropertiesToJSON(selectMessageEventUserProperties) {
    return JSON.stringify(exports.SelectMessageEventUserProperties$outboundSchema.parse(selectMessageEventUserProperties));
}
function selectMessageEventUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectMessageEventUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectMessageEventUserProperties' from JSON`);
}
/** @internal */
exports.SelectMessageEventEntityType$inboundSchema = z.nativeEnum(exports.SelectMessageEventEntityType);
/** @internal */
exports.SelectMessageEventEntityType$outboundSchema = exports.SelectMessageEventEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectMessageEventEntityType$;
(function (SelectMessageEventEntityType$) {
    /** @deprecated use `SelectMessageEventEntityType$inboundSchema` instead. */
    SelectMessageEventEntityType$.inboundSchema = exports.SelectMessageEventEntityType$inboundSchema;
    /** @deprecated use `SelectMessageEventEntityType$outboundSchema` instead. */
    SelectMessageEventEntityType$.outboundSchema = exports.SelectMessageEventEntityType$outboundSchema;
})(SelectMessageEventEntityType$ || (exports.SelectMessageEventEntityType$ = SelectMessageEventEntityType$ = {}));
/** @internal */
exports.SelectMessageEvent$inboundSchema = z.object({
    id: z.string(),
    type: z.string(),
    messageId: z.string(),
    createdAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.SelectMessageEventUserProperties$inboundSchema)).optional(),
    entityType: exports.SelectMessageEventEntityType$inboundSchema,
});
/** @internal */
exports.SelectMessageEvent$outboundSchema = z.object({
    id: z.string(),
    type: z.string(),
    messageId: z.string(),
    createdAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.SelectMessageEventUserProperties$outboundSchema)).optional(),
    entityType: exports.SelectMessageEventEntityType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SelectMessageEvent$;
(function (SelectMessageEvent$) {
    /** @deprecated use `SelectMessageEvent$inboundSchema` instead. */
    SelectMessageEvent$.inboundSchema = exports.SelectMessageEvent$inboundSchema;
    /** @deprecated use `SelectMessageEvent$outboundSchema` instead. */
    SelectMessageEvent$.outboundSchema = exports.SelectMessageEvent$outboundSchema;
})(SelectMessageEvent$ || (exports.SelectMessageEvent$ = SelectMessageEvent$ = {}));
function selectMessageEventToJSON(selectMessageEvent) {
    return JSON.stringify(exports.SelectMessageEvent$outboundSchema.parse(selectMessageEvent));
}
function selectMessageEventFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SelectMessageEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectMessageEvent' from JSON`);
}
//# sourceMappingURL=selectmessageevent.js.map