import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type OpenAIToolCallFunction = {
    name: string;
    arguments: string;
};
/** @internal */
export declare const OpenAIToolCallFunction$inboundSchema: z.ZodType<OpenAIToolCallFunction, z.ZodTypeDef, unknown>;
/** @internal */
export type OpenAIToolCallFunction$Outbound = {
    name: string;
    arguments: string;
};
/** @internal */
export declare const OpenAIToolCallFunction$outboundSchema: z.ZodType<OpenAIToolCallFunction$Outbound, z.ZodTypeDef, OpenAIToolCallFunction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OpenAIToolCallFunction$ {
    /** @deprecated use `OpenAIToolCallFunction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OpenAIToolCallFunction, z.ZodTypeDef, unknown>;
    /** @deprecated use `OpenAIToolCallFunction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OpenAIToolCallFunction$Outbound, z.ZodTypeDef, OpenAIToolCallFunction>;
    /** @deprecated use `OpenAIToolCallFunction$Outbound` instead. */
    type Outbound = OpenAIToolCallFunction$Outbound;
}
export declare function openAIToolCallFunctionToJSON(openAIToolCallFunction: OpenAIToolCallFunction): string;
export declare function openAIToolCallFunctionFromJSON(jsonString: string): SafeParseResult<OpenAIToolCallFunction, SDKValidationError>;
//# sourceMappingURL=openaitoolcallfunction.d.ts.map