"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsertConversationEvent$ = exports.InsertConversationEvent$outboundSchema = exports.InsertConversationEvent$inboundSchema = exports.InsertConversationEventEntityType$ = exports.InsertConversationEventEntityType$outboundSchema = exports.InsertConversationEventEntityType$inboundSchema = exports.InsertConversationEventUserProperties$ = exports.InsertConversationEventUserProperties$outboundSchema = exports.InsertConversationEventUserProperties$inboundSchema = exports.InsertConversationEventUserType$ = exports.InsertConversationEventUserType$outboundSchema = exports.InsertConversationEventUserType$inboundSchema = exports.InsertConversationEventUserId$ = exports.InsertConversationEventUserId$outboundSchema = exports.InsertConversationEventUserId$inboundSchema = exports.InsertConversationEventId$ = exports.InsertConversationEventId$outboundSchema = exports.InsertConversationEventId$inboundSchema = exports.InsertConversationEventEntityType = exports.InsertConversationEventUserType = void 0;
exports.insertConversationEventIdToJSON = insertConversationEventIdToJSON;
exports.insertConversationEventIdFromJSON = insertConversationEventIdFromJSON;
exports.insertConversationEventUserIdToJSON = insertConversationEventUserIdToJSON;
exports.insertConversationEventUserIdFromJSON = insertConversationEventUserIdFromJSON;
exports.insertConversationEventUserPropertiesToJSON = insertConversationEventUserPropertiesToJSON;
exports.insertConversationEventUserPropertiesFromJSON = insertConversationEventUserPropertiesFromJSON;
exports.insertConversationEventToJSON = insertConversationEventToJSON;
exports.insertConversationEventFromJSON = insertConversationEventFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.InsertConversationEventUserType = {
    User: "user",
    Member: "member",
};
exports.InsertConversationEventEntityType = {
    Conversation: "conversation",
};
/** @internal */
exports.InsertConversationEventId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.InsertConversationEventId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertConversationEventId$;
(function (InsertConversationEventId$) {
    /** @deprecated use `InsertConversationEventId$inboundSchema` instead. */
    InsertConversationEventId$.inboundSchema = exports.InsertConversationEventId$inboundSchema;
    /** @deprecated use `InsertConversationEventId$outboundSchema` instead. */
    InsertConversationEventId$.outboundSchema = exports.InsertConversationEventId$outboundSchema;
})(InsertConversationEventId$ || (exports.InsertConversationEventId$ = InsertConversationEventId$ = {}));
function insertConversationEventIdToJSON(insertConversationEventId) {
    return JSON.stringify(exports.InsertConversationEventId$outboundSchema.parse(insertConversationEventId));
}
function insertConversationEventIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertConversationEventId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertConversationEventId' from JSON`);
}
/** @internal */
exports.InsertConversationEventUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.InsertConversationEventUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertConversationEventUserId$;
(function (InsertConversationEventUserId$) {
    /** @deprecated use `InsertConversationEventUserId$inboundSchema` instead. */
    InsertConversationEventUserId$.inboundSchema = exports.InsertConversationEventUserId$inboundSchema;
    /** @deprecated use `InsertConversationEventUserId$outboundSchema` instead. */
    InsertConversationEventUserId$.outboundSchema = exports.InsertConversationEventUserId$outboundSchema;
})(InsertConversationEventUserId$ || (exports.InsertConversationEventUserId$ = InsertConversationEventUserId$ = {}));
function insertConversationEventUserIdToJSON(insertConversationEventUserId) {
    return JSON.stringify(exports.InsertConversationEventUserId$outboundSchema.parse(insertConversationEventUserId));
}
function insertConversationEventUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertConversationEventUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertConversationEventUserId' from JSON`);
}
/** @internal */
exports.InsertConversationEventUserType$inboundSchema = z.nativeEnum(exports.InsertConversationEventUserType);
/** @internal */
exports.InsertConversationEventUserType$outboundSchema = exports.InsertConversationEventUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertConversationEventUserType$;
(function (InsertConversationEventUserType$) {
    /** @deprecated use `InsertConversationEventUserType$inboundSchema` instead. */
    InsertConversationEventUserType$.inboundSchema = exports.InsertConversationEventUserType$inboundSchema;
    /** @deprecated use `InsertConversationEventUserType$outboundSchema` instead. */
    InsertConversationEventUserType$.outboundSchema = exports.InsertConversationEventUserType$outboundSchema;
})(InsertConversationEventUserType$ || (exports.InsertConversationEventUserType$ = InsertConversationEventUserType$ = {}));
/** @internal */
exports.InsertConversationEventUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.InsertConversationEventUserType$inboundSchema)
        .optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.InsertConversationEventUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.InsertConversationEventUserType$outboundSchema)
        .optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertConversationEventUserProperties$;
(function (InsertConversationEventUserProperties$) {
    /** @deprecated use `InsertConversationEventUserProperties$inboundSchema` instead. */
    InsertConversationEventUserProperties$.inboundSchema = exports.InsertConversationEventUserProperties$inboundSchema;
    /** @deprecated use `InsertConversationEventUserProperties$outboundSchema` instead. */
    InsertConversationEventUserProperties$.outboundSchema = exports.InsertConversationEventUserProperties$outboundSchema;
})(InsertConversationEventUserProperties$ || (exports.InsertConversationEventUserProperties$ = InsertConversationEventUserProperties$ = {}));
function insertConversationEventUserPropertiesToJSON(insertConversationEventUserProperties) {
    return JSON.stringify(exports.InsertConversationEventUserProperties$outboundSchema.parse(insertConversationEventUserProperties));
}
function insertConversationEventUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertConversationEventUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertConversationEventUserProperties' from JSON`);
}
/** @internal */
exports.InsertConversationEventEntityType$inboundSchema = z.nativeEnum(exports.InsertConversationEventEntityType);
/** @internal */
exports.InsertConversationEventEntityType$outboundSchema = exports.InsertConversationEventEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertConversationEventEntityType$;
(function (InsertConversationEventEntityType$) {
    /** @deprecated use `InsertConversationEventEntityType$inboundSchema` instead. */
    InsertConversationEventEntityType$.inboundSchema = exports.InsertConversationEventEntityType$inboundSchema;
    /** @deprecated use `InsertConversationEventEntityType$outboundSchema` instead. */
    InsertConversationEventEntityType$.outboundSchema = exports.InsertConversationEventEntityType$outboundSchema;
})(InsertConversationEventEntityType$ || (exports.InsertConversationEventEntityType$ = InsertConversationEventEntityType$ = {}));
/** @internal */
exports.InsertConversationEvent$inboundSchema = z.object({
    id: z.string().optional(),
    type: z.string(),
    conversationId: z.string(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.InsertConversationEventUserProperties$inboundSchema)).optional(),
    entityType: exports.InsertConversationEventEntityType$inboundSchema,
});
/** @internal */
exports.InsertConversationEvent$outboundSchema = z.object({
    id: z.string().optional(),
    type: z.string(),
    conversationId: z.string(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.InsertConversationEventUserProperties$outboundSchema)).optional(),
    entityType: exports.InsertConversationEventEntityType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InsertConversationEvent$;
(function (InsertConversationEvent$) {
    /** @deprecated use `InsertConversationEvent$inboundSchema` instead. */
    InsertConversationEvent$.inboundSchema = exports.InsertConversationEvent$inboundSchema;
    /** @deprecated use `InsertConversationEvent$outboundSchema` instead. */
    InsertConversationEvent$.outboundSchema = exports.InsertConversationEvent$outboundSchema;
})(InsertConversationEvent$ || (exports.InsertConversationEvent$ = InsertConversationEvent$ = {}));
function insertConversationEventToJSON(insertConversationEvent) {
    return JSON.stringify(exports.InsertConversationEvent$outboundSchema.parse(insertConversationEvent));
}
function insertConversationEventFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InsertConversationEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertConversationEvent' from JSON`);
}
//# sourceMappingURL=insertconversationevent.js.map