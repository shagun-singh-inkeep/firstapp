"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemanticThreadAggregationSelection$ = exports.SemanticThreadAggregationSelection$outboundSchema = exports.SemanticThreadAggregationSelection$inboundSchema = exports.SemanticThreadAggregationSelectionField$ = exports.SemanticThreadAggregationSelectionField$outboundSchema = exports.SemanticThreadAggregationSelectionField$inboundSchema = exports.SemanticThreadAggregationSelectionAggregation$ = exports.SemanticThreadAggregationSelectionAggregation$outboundSchema = exports.SemanticThreadAggregationSelectionAggregation$inboundSchema = exports.SemanticThreadAggregationSelectionType$ = exports.SemanticThreadAggregationSelectionType$outboundSchema = exports.SemanticThreadAggregationSelectionType$inboundSchema = exports.SemanticThreadAggregationSelectionField = exports.SemanticThreadAggregationSelectionAggregation = exports.SemanticThreadAggregationSelectionType = void 0;
exports.semanticThreadAggregationSelectionToJSON = semanticThreadAggregationSelectionToJSON;
exports.semanticThreadAggregationSelectionFromJSON = semanticThreadAggregationSelectionFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
exports.SemanticThreadAggregationSelectionType = {
    Aggregation: "aggregation",
};
exports.SemanticThreadAggregationSelectionAggregation = {
    Sum: "sum",
    Count: "count",
    CountDistinct: "countDistinct",
    Avg: "avg",
    Min: "min",
    Max: "max",
};
exports.SemanticThreadAggregationSelectionField = {
    Id: "id",
    MessageIds: "messageIds",
    MessagesCount: "messagesCount",
    OrganizationId: "organizationId",
    Question: "question",
    QuestionLength: "questionLength",
    Answer: "answer",
    IsOnTopic: "isOnTopic",
    IsClear: "isClear",
    IsDocumented: "isDocumented",
    IsFeatureSupported: "isFeatureSupported",
    IsAnswerConfident: "isAnswerConfident",
    GapSummary: "gapSummary",
    Subject: "subject",
    Category: "category",
    Languages: "languages",
    FirstPartyEntities: "firstPartyEntities",
    ThirdPartyEntities: "thirdPartyEntities",
    Emotion: "emotion",
    Sentiment: "sentiment",
    QuestionType: "questionType",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    Properties: "properties",
    UserProperties: "userProperties",
    FirstMessageTime: "firstMessageTime",
    LastMessageTime: "lastMessageTime",
    LastUpdated: "lastUpdated",
    HasPositiveFeedback: "hasPositiveFeedback",
    HasNegativeFeedback: "hasNegativeFeedback",
    ConversationIds: "conversationIds",
    AreAIAnnotationsVerified: "areAIAnnotationsVerified",
    IsInitialQuestionAnswer: "isInitialQuestionAnswer",
};
/** @internal */
exports.SemanticThreadAggregationSelectionType$inboundSchema = z.nativeEnum(exports.SemanticThreadAggregationSelectionType);
/** @internal */
exports.SemanticThreadAggregationSelectionType$outboundSchema = exports.SemanticThreadAggregationSelectionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadAggregationSelectionType$;
(function (SemanticThreadAggregationSelectionType$) {
    /** @deprecated use `SemanticThreadAggregationSelectionType$inboundSchema` instead. */
    SemanticThreadAggregationSelectionType$.inboundSchema = exports.SemanticThreadAggregationSelectionType$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelectionType$outboundSchema` instead. */
    SemanticThreadAggregationSelectionType$.outboundSchema = exports.SemanticThreadAggregationSelectionType$outboundSchema;
})(SemanticThreadAggregationSelectionType$ || (exports.SemanticThreadAggregationSelectionType$ = SemanticThreadAggregationSelectionType$ = {}));
/** @internal */
exports.SemanticThreadAggregationSelectionAggregation$inboundSchema = z
    .nativeEnum(exports.SemanticThreadAggregationSelectionAggregation);
/** @internal */
exports.SemanticThreadAggregationSelectionAggregation$outboundSchema = exports.SemanticThreadAggregationSelectionAggregation$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadAggregationSelectionAggregation$;
(function (SemanticThreadAggregationSelectionAggregation$) {
    /** @deprecated use `SemanticThreadAggregationSelectionAggregation$inboundSchema` instead. */
    SemanticThreadAggregationSelectionAggregation$.inboundSchema = exports.SemanticThreadAggregationSelectionAggregation$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelectionAggregation$outboundSchema` instead. */
    SemanticThreadAggregationSelectionAggregation$.outboundSchema = exports.SemanticThreadAggregationSelectionAggregation$outboundSchema;
})(SemanticThreadAggregationSelectionAggregation$ || (exports.SemanticThreadAggregationSelectionAggregation$ = SemanticThreadAggregationSelectionAggregation$ = {}));
/** @internal */
exports.SemanticThreadAggregationSelectionField$inboundSchema = z
    .nativeEnum(exports.SemanticThreadAggregationSelectionField);
/** @internal */
exports.SemanticThreadAggregationSelectionField$outboundSchema = exports.SemanticThreadAggregationSelectionField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadAggregationSelectionField$;
(function (SemanticThreadAggregationSelectionField$) {
    /** @deprecated use `SemanticThreadAggregationSelectionField$inboundSchema` instead. */
    SemanticThreadAggregationSelectionField$.inboundSchema = exports.SemanticThreadAggregationSelectionField$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelectionField$outboundSchema` instead. */
    SemanticThreadAggregationSelectionField$.outboundSchema = exports.SemanticThreadAggregationSelectionField$outboundSchema;
})(SemanticThreadAggregationSelectionField$ || (exports.SemanticThreadAggregationSelectionField$ = SemanticThreadAggregationSelectionField$ = {}));
/** @internal */
exports.SemanticThreadAggregationSelection$inboundSchema = z.object({
    type: exports.SemanticThreadAggregationSelectionType$inboundSchema,
    aggregation: exports.SemanticThreadAggregationSelectionAggregation$inboundSchema,
    field: exports.SemanticThreadAggregationSelectionField$inboundSchema.optional(),
    path: z.array(z.string()).optional(),
});
/** @internal */
exports.SemanticThreadAggregationSelection$outboundSchema = z.object({
    type: exports.SemanticThreadAggregationSelectionType$outboundSchema,
    aggregation: exports.SemanticThreadAggregationSelectionAggregation$outboundSchema,
    field: exports.SemanticThreadAggregationSelectionField$outboundSchema.optional(),
    path: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SemanticThreadAggregationSelection$;
(function (SemanticThreadAggregationSelection$) {
    /** @deprecated use `SemanticThreadAggregationSelection$inboundSchema` instead. */
    SemanticThreadAggregationSelection$.inboundSchema = exports.SemanticThreadAggregationSelection$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelection$outboundSchema` instead. */
    SemanticThreadAggregationSelection$.outboundSchema = exports.SemanticThreadAggregationSelection$outboundSchema;
})(SemanticThreadAggregationSelection$ || (exports.SemanticThreadAggregationSelection$ = SemanticThreadAggregationSelection$ = {}));
function semanticThreadAggregationSelectionToJSON(semanticThreadAggregationSelection) {
    return JSON.stringify(exports.SemanticThreadAggregationSelection$outboundSchema.parse(semanticThreadAggregationSelection));
}
function semanticThreadAggregationSelectionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SemanticThreadAggregationSelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadAggregationSelection' from JSON`);
}
//# sourceMappingURL=semanticthreadaggregationselection.js.map