"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupportCopilotConversation$ = exports.SupportCopilotConversation$outboundSchema = exports.SupportCopilotConversation$inboundSchema = exports.SupportCopilotConversationVisibility$ = exports.SupportCopilotConversationVisibility$outboundSchema = exports.SupportCopilotConversationVisibility$inboundSchema = exports.SupportCopilotConversationUserProperties$ = exports.SupportCopilotConversationUserProperties$outboundSchema = exports.SupportCopilotConversationUserProperties$inboundSchema = exports.SupportCopilotConversationUserType$ = exports.SupportCopilotConversationUserType$outboundSchema = exports.SupportCopilotConversationUserType$inboundSchema = exports.SupportCopilotConversationUserId$ = exports.SupportCopilotConversationUserId$outboundSchema = exports.SupportCopilotConversationUserId$inboundSchema = exports.SupportCopilotConversationId$ = exports.SupportCopilotConversationId$outboundSchema = exports.SupportCopilotConversationId$inboundSchema = exports.SupportCopilotConversationType$ = exports.SupportCopilotConversationType$outboundSchema = exports.SupportCopilotConversationType$inboundSchema = exports.SupportCopilotConversationVisibility = exports.SupportCopilotConversationUserType = exports.SupportCopilotConversationType = void 0;
exports.supportCopilotConversationIdToJSON = supportCopilotConversationIdToJSON;
exports.supportCopilotConversationIdFromJSON = supportCopilotConversationIdFromJSON;
exports.supportCopilotConversationUserIdToJSON = supportCopilotConversationUserIdToJSON;
exports.supportCopilotConversationUserIdFromJSON = supportCopilotConversationUserIdFromJSON;
exports.supportCopilotConversationUserPropertiesToJSON = supportCopilotConversationUserPropertiesToJSON;
exports.supportCopilotConversationUserPropertiesFromJSON = supportCopilotConversationUserPropertiesFromJSON;
exports.supportCopilotConversationToJSON = supportCopilotConversationToJSON;
exports.supportCopilotConversationFromJSON = supportCopilotConversationFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const supportcopilotmessage_js_1 = require("./supportcopilotmessage.js");
exports.SupportCopilotConversationType = {
    SupportCopilot: "support_copilot",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.SupportCopilotConversationUserType = {
    User: "user",
    Member: "member",
};
exports.SupportCopilotConversationVisibility = {
    Private: "private",
    Public: "public",
};
/** @internal */
exports.SupportCopilotConversationType$inboundSchema = z.nativeEnum(exports.SupportCopilotConversationType);
/** @internal */
exports.SupportCopilotConversationType$outboundSchema = exports.SupportCopilotConversationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversationType$;
(function (SupportCopilotConversationType$) {
    /** @deprecated use `SupportCopilotConversationType$inboundSchema` instead. */
    SupportCopilotConversationType$.inboundSchema = exports.SupportCopilotConversationType$inboundSchema;
    /** @deprecated use `SupportCopilotConversationType$outboundSchema` instead. */
    SupportCopilotConversationType$.outboundSchema = exports.SupportCopilotConversationType$outboundSchema;
})(SupportCopilotConversationType$ || (exports.SupportCopilotConversationType$ = SupportCopilotConversationType$ = {}));
/** @internal */
exports.SupportCopilotConversationId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.SupportCopilotConversationId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversationId$;
(function (SupportCopilotConversationId$) {
    /** @deprecated use `SupportCopilotConversationId$inboundSchema` instead. */
    SupportCopilotConversationId$.inboundSchema = exports.SupportCopilotConversationId$inboundSchema;
    /** @deprecated use `SupportCopilotConversationId$outboundSchema` instead. */
    SupportCopilotConversationId$.outboundSchema = exports.SupportCopilotConversationId$outboundSchema;
})(SupportCopilotConversationId$ || (exports.SupportCopilotConversationId$ = SupportCopilotConversationId$ = {}));
function supportCopilotConversationIdToJSON(supportCopilotConversationId) {
    return JSON.stringify(exports.SupportCopilotConversationId$outboundSchema.parse(supportCopilotConversationId));
}
function supportCopilotConversationIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SupportCopilotConversationId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotConversationId' from JSON`);
}
/** @internal */
exports.SupportCopilotConversationUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.SupportCopilotConversationUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversationUserId$;
(function (SupportCopilotConversationUserId$) {
    /** @deprecated use `SupportCopilotConversationUserId$inboundSchema` instead. */
    SupportCopilotConversationUserId$.inboundSchema = exports.SupportCopilotConversationUserId$inboundSchema;
    /** @deprecated use `SupportCopilotConversationUserId$outboundSchema` instead. */
    SupportCopilotConversationUserId$.outboundSchema = exports.SupportCopilotConversationUserId$outboundSchema;
})(SupportCopilotConversationUserId$ || (exports.SupportCopilotConversationUserId$ = SupportCopilotConversationUserId$ = {}));
function supportCopilotConversationUserIdToJSON(supportCopilotConversationUserId) {
    return JSON.stringify(exports.SupportCopilotConversationUserId$outboundSchema.parse(supportCopilotConversationUserId));
}
function supportCopilotConversationUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SupportCopilotConversationUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotConversationUserId' from JSON`);
}
/** @internal */
exports.SupportCopilotConversationUserType$inboundSchema = z.nativeEnum(exports.SupportCopilotConversationUserType);
/** @internal */
exports.SupportCopilotConversationUserType$outboundSchema = exports.SupportCopilotConversationUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversationUserType$;
(function (SupportCopilotConversationUserType$) {
    /** @deprecated use `SupportCopilotConversationUserType$inboundSchema` instead. */
    SupportCopilotConversationUserType$.inboundSchema = exports.SupportCopilotConversationUserType$inboundSchema;
    /** @deprecated use `SupportCopilotConversationUserType$outboundSchema` instead. */
    SupportCopilotConversationUserType$.outboundSchema = exports.SupportCopilotConversationUserType$outboundSchema;
})(SupportCopilotConversationUserType$ || (exports.SupportCopilotConversationUserType$ = SupportCopilotConversationUserType$ = {}));
/** @internal */
exports.SupportCopilotConversationUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.SupportCopilotConversationUserType$inboundSchema)
        .optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.SupportCopilotConversationUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.SupportCopilotConversationUserType$outboundSchema)
        .optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversationUserProperties$;
(function (SupportCopilotConversationUserProperties$) {
    /** @deprecated use `SupportCopilotConversationUserProperties$inboundSchema` instead. */
    SupportCopilotConversationUserProperties$.inboundSchema = exports.SupportCopilotConversationUserProperties$inboundSchema;
    /** @deprecated use `SupportCopilotConversationUserProperties$outboundSchema` instead. */
    SupportCopilotConversationUserProperties$.outboundSchema = exports.SupportCopilotConversationUserProperties$outboundSchema;
})(SupportCopilotConversationUserProperties$ || (exports.SupportCopilotConversationUserProperties$ = SupportCopilotConversationUserProperties$ = {}));
function supportCopilotConversationUserPropertiesToJSON(supportCopilotConversationUserProperties) {
    return JSON.stringify(exports.SupportCopilotConversationUserProperties$outboundSchema.parse(supportCopilotConversationUserProperties));
}
function supportCopilotConversationUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SupportCopilotConversationUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotConversationUserProperties' from JSON`);
}
/** @internal */
exports.SupportCopilotConversationVisibility$inboundSchema = z.nativeEnum(exports.SupportCopilotConversationVisibility);
/** @internal */
exports.SupportCopilotConversationVisibility$outboundSchema = exports.SupportCopilotConversationVisibility$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversationVisibility$;
(function (SupportCopilotConversationVisibility$) {
    /** @deprecated use `SupportCopilotConversationVisibility$inboundSchema` instead. */
    SupportCopilotConversationVisibility$.inboundSchema = exports.SupportCopilotConversationVisibility$inboundSchema;
    /** @deprecated use `SupportCopilotConversationVisibility$outboundSchema` instead. */
    SupportCopilotConversationVisibility$.outboundSchema = exports.SupportCopilotConversationVisibility$outboundSchema;
})(SupportCopilotConversationVisibility$ || (exports.SupportCopilotConversationVisibility$ = SupportCopilotConversationVisibility$ = {}));
/** @internal */
exports.SupportCopilotConversation$inboundSchema = z.object({
    id: z.string(),
    externalId: z.nullable(z.string()),
    externalUrl: z.nullable(z.string()),
    type: exports.SupportCopilotConversationType$inboundSchema,
    supportTicketConversationId: z.nullable(z.string()),
    createdAt: z.string(),
    updatedAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.SupportCopilotConversationUserProperties$inboundSchema)).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    visibility: z.nullable(exports.SupportCopilotConversationVisibility$inboundSchema),
    messages: z.array(supportcopilotmessage_js_1.SupportCopilotMessage$inboundSchema),
});
/** @internal */
exports.SupportCopilotConversation$outboundSchema = z.object({
    id: z.string(),
    externalId: z.nullable(z.string()),
    externalUrl: z.nullable(z.string()),
    type: exports.SupportCopilotConversationType$outboundSchema,
    supportTicketConversationId: z.nullable(z.string()),
    createdAt: z.string(),
    updatedAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.SupportCopilotConversationUserProperties$outboundSchema)).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    visibility: z.nullable(exports.SupportCopilotConversationVisibility$outboundSchema),
    messages: z.array(supportcopilotmessage_js_1.SupportCopilotMessage$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SupportCopilotConversation$;
(function (SupportCopilotConversation$) {
    /** @deprecated use `SupportCopilotConversation$inboundSchema` instead. */
    SupportCopilotConversation$.inboundSchema = exports.SupportCopilotConversation$inboundSchema;
    /** @deprecated use `SupportCopilotConversation$outboundSchema` instead. */
    SupportCopilotConversation$.outboundSchema = exports.SupportCopilotConversation$outboundSchema;
})(SupportCopilotConversation$ || (exports.SupportCopilotConversation$ = SupportCopilotConversation$ = {}));
function supportCopilotConversationToJSON(supportCopilotConversation) {
    return JSON.stringify(exports.SupportCopilotConversation$outboundSchema.parse(supportCopilotConversation));
}
function supportCopilotConversationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SupportCopilotConversation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotConversation' from JSON`);
}
//# sourceMappingURL=supportcopilotconversation.js.map