"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsSelection$ = exports.EventsSelection$outboundSchema = exports.EventsSelection$inboundSchema = void 0;
exports.eventsSelectionToJSON = eventsSelectionToJSON;
exports.eventsSelectionFromJSON = eventsSelectionFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const eventsaggregationselection_js_1 = require("./eventsaggregationselection.js");
const eventssimplefieldselection_js_1 = require("./eventssimplefieldselection.js");
const eventstimebasedgroupbyselection_js_1 = require("./eventstimebasedgroupbyselection.js");
/** @internal */
exports.EventsSelection$inboundSchema = z.union([
    eventstimebasedgroupbyselection_js_1.EventsTimeBasedGroupBySelection$inboundSchema.and(z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type }))),
    eventssimplefieldselection_js_1.EventsSimpleFieldSelection$inboundSchema.and(z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type }))),
    eventsaggregationselection_js_1.EventsAggregationSelection$inboundSchema.and(z.object({ type: z.literal("aggregation") }).transform((v) => ({
        type: v.type,
    }))),
]);
/** @internal */
exports.EventsSelection$outboundSchema = z.union([
    eventstimebasedgroupbyselection_js_1.EventsTimeBasedGroupBySelection$outboundSchema.and(z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type }))),
    eventssimplefieldselection_js_1.EventsSimpleFieldSelection$outboundSchema.and(z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type }))),
    eventsaggregationselection_js_1.EventsAggregationSelection$outboundSchema.and(z.object({ type: z.literal("aggregation") }).transform((v) => ({
        type: v.type,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var EventsSelection$;
(function (EventsSelection$) {
    /** @deprecated use `EventsSelection$inboundSchema` instead. */
    EventsSelection$.inboundSchema = exports.EventsSelection$inboundSchema;
    /** @deprecated use `EventsSelection$outboundSchema` instead. */
    EventsSelection$.outboundSchema = exports.EventsSelection$outboundSchema;
})(EventsSelection$ || (exports.EventsSelection$ = EventsSelection$ = {}));
function eventsSelectionToJSON(eventsSelection) {
    return JSON.stringify(exports.EventsSelection$outboundSchema.parse(eventsSelection));
}
function eventsSelectionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventsSelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsSelection' from JSON`);
}
//# sourceMappingURL=eventsselection.js.map