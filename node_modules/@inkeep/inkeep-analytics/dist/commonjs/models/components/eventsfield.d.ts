import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
/**
 * Available fields for Events
 */
export declare const EventsField: {
    readonly Id: "id";
    readonly OrganizationId: "organizationId";
    readonly MessageId: "messageId";
    readonly ConversationId: "conversationId";
    readonly CreatedAt: "createdAt";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly EventType: "eventType";
    readonly Type: "type";
    readonly SearchQuery: "searchQuery";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
};
/**
 * Available fields for Events
 */
export type EventsField = ClosedEnum<typeof EventsField>;
/** @internal */
export declare const EventsField$inboundSchema: z.ZodNativeEnum<typeof EventsField>;
/** @internal */
export declare const EventsField$outboundSchema: z.ZodNativeEnum<typeof EventsField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsField$ {
    /** @deprecated use `EventsField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly OrganizationId: "organizationId";
        readonly MessageId: "messageId";
        readonly ConversationId: "conversationId";
        readonly CreatedAt: "createdAt";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly EventType: "eventType";
        readonly Type: "type";
        readonly SearchQuery: "searchQuery";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
    }>;
    /** @deprecated use `EventsField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly OrganizationId: "organizationId";
        readonly MessageId: "messageId";
        readonly ConversationId: "conversationId";
        readonly CreatedAt: "createdAt";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly EventType: "eventType";
        readonly Type: "type";
        readonly SearchQuery: "searchQuery";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
    }>;
}
//# sourceMappingURL=eventsfield.d.ts.map