import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SemanticThreadFilter, SemanticThreadFilter$Outbound } from "./semanticthreadfilter.js";
import { SemanticThreadGroupBy, SemanticThreadGroupBy$Outbound } from "./semanticthreadgroupby.js";
import { SemanticThreadOrderBy, SemanticThreadOrderBy$Outbound } from "./semanticthreadorderby.js";
import { SemanticThreadSelection, SemanticThreadSelection$Outbound } from "./semanticthreadselection.js";
/**
 * Query Semantic Threads Params
 */
export type QuerySemanticThreadsRequestBody = {
    query?: string | undefined;
    select?: Array<SemanticThreadSelection> | undefined;
    groupBy?: Array<SemanticThreadGroupBy> | undefined;
    where?: SemanticThreadFilter | undefined;
    orderBy?: Array<SemanticThreadOrderBy> | undefined;
    /**
     * Notes are not persisted, but may be useful for your debugging purposes
     */
    notes?: string | undefined;
};
/** @internal */
export declare const QuerySemanticThreadsRequestBody$inboundSchema: z.ZodType<QuerySemanticThreadsRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsRequestBody$Outbound = {
    query?: string | undefined;
    select?: Array<SemanticThreadSelection$Outbound> | undefined;
    groupBy?: Array<SemanticThreadGroupBy$Outbound> | undefined;
    where?: SemanticThreadFilter$Outbound | undefined;
    orderBy?: Array<SemanticThreadOrderBy$Outbound> | undefined;
    notes?: string | undefined;
};
/** @internal */
export declare const QuerySemanticThreadsRequestBody$outboundSchema: z.ZodType<QuerySemanticThreadsRequestBody$Outbound, z.ZodTypeDef, QuerySemanticThreadsRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsRequestBody$ {
    /** @deprecated use `QuerySemanticThreadsRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsRequestBody$Outbound, z.ZodTypeDef, QuerySemanticThreadsRequestBody>;
    /** @deprecated use `QuerySemanticThreadsRequestBody$Outbound` instead. */
    type Outbound = QuerySemanticThreadsRequestBody$Outbound;
}
export declare function querySemanticThreadsRequestBodyToJSON(querySemanticThreadsRequestBody: QuerySemanticThreadsRequestBody): string;
export declare function querySemanticThreadsRequestBodyFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsRequestBody, SDKValidationError>;
//# sourceMappingURL=querysemanticthreadsrequestbody.d.ts.map