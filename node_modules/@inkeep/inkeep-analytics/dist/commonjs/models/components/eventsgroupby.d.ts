import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { EventsField } from "./eventsfield.js";
/**
 * Group by options for events
 */
export type EventsGroupBy = {
    /**
     * Available fields for Events
     */
    field: EventsField;
    path?: Array<string> | undefined;
    includeInSelect?: boolean | undefined;
};
/** @internal */
export declare const EventsGroupBy$inboundSchema: z.ZodType<EventsGroupBy, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsGroupBy$Outbound = {
    field: string;
    path?: Array<string> | undefined;
    includeInSelect: boolean;
};
/** @internal */
export declare const EventsGroupBy$outboundSchema: z.ZodType<EventsGroupBy$Outbound, z.ZodTypeDef, EventsGroupBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsGroupBy$ {
    /** @deprecated use `EventsGroupBy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsGroupBy, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsGroupBy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsGroupBy$Outbound, z.ZodTypeDef, EventsGroupBy>;
    /** @deprecated use `EventsGroupBy$Outbound` instead. */
    type Outbound = EventsGroupBy$Outbound;
}
export declare function eventsGroupByToJSON(eventsGroupBy: EventsGroupBy): string;
export declare function eventsGroupByFromJSON(jsonString: string): SafeParseResult<EventsGroupBy, SDKValidationError>;
//# sourceMappingURL=eventsgroupby.d.ts.map