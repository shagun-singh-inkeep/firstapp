"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryFeedbackResponseData$ = exports.QueryFeedbackResponseData$outboundSchema = exports.QueryFeedbackResponseData$inboundSchema = exports.FeedbackResultItem$ = exports.FeedbackResultItem$outboundSchema = exports.FeedbackResultItem$inboundSchema = exports.QueryFeedbackResponseDataStatus$ = exports.QueryFeedbackResponseDataStatus$outboundSchema = exports.QueryFeedbackResponseDataStatus$inboundSchema = exports.QueryFeedbackResponseDataUserProperties$ = exports.QueryFeedbackResponseDataUserProperties$outboundSchema = exports.QueryFeedbackResponseDataUserProperties$inboundSchema = exports.QueryFeedbackResponseDataUserType$ = exports.QueryFeedbackResponseDataUserType$outboundSchema = exports.QueryFeedbackResponseDataUserType$inboundSchema = exports.QueryFeedbackResponseDataUserId$ = exports.QueryFeedbackResponseDataUserId$outboundSchema = exports.QueryFeedbackResponseDataUserId$inboundSchema = exports.QueryFeedbackResponseDataId$ = exports.QueryFeedbackResponseDataId$outboundSchema = exports.QueryFeedbackResponseDataId$inboundSchema = exports.QueryFeedbackResponseDataReasons$ = exports.QueryFeedbackResponseDataReasons$outboundSchema = exports.QueryFeedbackResponseDataReasons$inboundSchema = exports.QueryFeedbackResponseDataType$ = exports.QueryFeedbackResponseDataType$outboundSchema = exports.QueryFeedbackResponseDataType$inboundSchema = exports.QueryFeedbackResponseDataStatus = exports.QueryFeedbackResponseDataUserType = exports.QueryFeedbackResponseDataType = void 0;
exports.queryFeedbackResponseDataReasonsToJSON = queryFeedbackResponseDataReasonsToJSON;
exports.queryFeedbackResponseDataReasonsFromJSON = queryFeedbackResponseDataReasonsFromJSON;
exports.queryFeedbackResponseDataIdToJSON = queryFeedbackResponseDataIdToJSON;
exports.queryFeedbackResponseDataIdFromJSON = queryFeedbackResponseDataIdFromJSON;
exports.queryFeedbackResponseDataUserIdToJSON = queryFeedbackResponseDataUserIdToJSON;
exports.queryFeedbackResponseDataUserIdFromJSON = queryFeedbackResponseDataUserIdFromJSON;
exports.queryFeedbackResponseDataUserPropertiesToJSON = queryFeedbackResponseDataUserPropertiesToJSON;
exports.queryFeedbackResponseDataUserPropertiesFromJSON = queryFeedbackResponseDataUserPropertiesFromJSON;
exports.feedbackResultItemToJSON = feedbackResultItemToJSON;
exports.feedbackResultItemFromJSON = feedbackResultItemFromJSON;
exports.queryFeedbackResponseDataToJSON = queryFeedbackResponseDataToJSON;
exports.queryFeedbackResponseDataFromJSON = queryFeedbackResponseDataFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
exports.QueryFeedbackResponseDataType = {
    Positive: "positive",
    Negative: "negative",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
exports.QueryFeedbackResponseDataUserType = {
    User: "user",
    Member: "member",
};
exports.QueryFeedbackResponseDataStatus = {
    Unreviewed: "unreviewed",
    Flagged: "flagged",
    Deferred: "deferred",
    Resolved: "resolved",
};
/** @internal */
exports.QueryFeedbackResponseDataType$inboundSchema = z.nativeEnum(exports.QueryFeedbackResponseDataType);
/** @internal */
exports.QueryFeedbackResponseDataType$outboundSchema = exports.QueryFeedbackResponseDataType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataType$;
(function (QueryFeedbackResponseDataType$) {
    /** @deprecated use `QueryFeedbackResponseDataType$inboundSchema` instead. */
    QueryFeedbackResponseDataType$.inboundSchema = exports.QueryFeedbackResponseDataType$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataType$outboundSchema` instead. */
    QueryFeedbackResponseDataType$.outboundSchema = exports.QueryFeedbackResponseDataType$outboundSchema;
})(QueryFeedbackResponseDataType$ || (exports.QueryFeedbackResponseDataType$ = QueryFeedbackResponseDataType$ = {}));
/** @internal */
exports.QueryFeedbackResponseDataReasons$inboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/** @internal */
exports.QueryFeedbackResponseDataReasons$outboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataReasons$;
(function (QueryFeedbackResponseDataReasons$) {
    /** @deprecated use `QueryFeedbackResponseDataReasons$inboundSchema` instead. */
    QueryFeedbackResponseDataReasons$.inboundSchema = exports.QueryFeedbackResponseDataReasons$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataReasons$outboundSchema` instead. */
    QueryFeedbackResponseDataReasons$.outboundSchema = exports.QueryFeedbackResponseDataReasons$outboundSchema;
})(QueryFeedbackResponseDataReasons$ || (exports.QueryFeedbackResponseDataReasons$ = QueryFeedbackResponseDataReasons$ = {}));
function queryFeedbackResponseDataReasonsToJSON(queryFeedbackResponseDataReasons) {
    return JSON.stringify(exports.QueryFeedbackResponseDataReasons$outboundSchema.parse(queryFeedbackResponseDataReasons));
}
function queryFeedbackResponseDataReasonsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryFeedbackResponseDataReasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryFeedbackResponseDataReasons' from JSON`);
}
/** @internal */
exports.QueryFeedbackResponseDataId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.QueryFeedbackResponseDataId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataId$;
(function (QueryFeedbackResponseDataId$) {
    /** @deprecated use `QueryFeedbackResponseDataId$inboundSchema` instead. */
    QueryFeedbackResponseDataId$.inboundSchema = exports.QueryFeedbackResponseDataId$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataId$outboundSchema` instead. */
    QueryFeedbackResponseDataId$.outboundSchema = exports.QueryFeedbackResponseDataId$outboundSchema;
})(QueryFeedbackResponseDataId$ || (exports.QueryFeedbackResponseDataId$ = QueryFeedbackResponseDataId$ = {}));
function queryFeedbackResponseDataIdToJSON(queryFeedbackResponseDataId) {
    return JSON.stringify(exports.QueryFeedbackResponseDataId$outboundSchema.parse(queryFeedbackResponseDataId));
}
function queryFeedbackResponseDataIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryFeedbackResponseDataId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryFeedbackResponseDataId' from JSON`);
}
/** @internal */
exports.QueryFeedbackResponseDataUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
exports.QueryFeedbackResponseDataUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataUserId$;
(function (QueryFeedbackResponseDataUserId$) {
    /** @deprecated use `QueryFeedbackResponseDataUserId$inboundSchema` instead. */
    QueryFeedbackResponseDataUserId$.inboundSchema = exports.QueryFeedbackResponseDataUserId$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataUserId$outboundSchema` instead. */
    QueryFeedbackResponseDataUserId$.outboundSchema = exports.QueryFeedbackResponseDataUserId$outboundSchema;
})(QueryFeedbackResponseDataUserId$ || (exports.QueryFeedbackResponseDataUserId$ = QueryFeedbackResponseDataUserId$ = {}));
function queryFeedbackResponseDataUserIdToJSON(queryFeedbackResponseDataUserId) {
    return JSON.stringify(exports.QueryFeedbackResponseDataUserId$outboundSchema.parse(queryFeedbackResponseDataUserId));
}
function queryFeedbackResponseDataUserIdFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryFeedbackResponseDataUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryFeedbackResponseDataUserId' from JSON`);
}
/** @internal */
exports.QueryFeedbackResponseDataUserType$inboundSchema = z.nativeEnum(exports.QueryFeedbackResponseDataUserType);
/** @internal */
exports.QueryFeedbackResponseDataUserType$outboundSchema = exports.QueryFeedbackResponseDataUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataUserType$;
(function (QueryFeedbackResponseDataUserType$) {
    /** @deprecated use `QueryFeedbackResponseDataUserType$inboundSchema` instead. */
    QueryFeedbackResponseDataUserType$.inboundSchema = exports.QueryFeedbackResponseDataUserType$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataUserType$outboundSchema` instead. */
    QueryFeedbackResponseDataUserType$.outboundSchema = exports.QueryFeedbackResponseDataUserType$outboundSchema;
})(QueryFeedbackResponseDataUserType$ || (exports.QueryFeedbackResponseDataUserType$ = QueryFeedbackResponseDataUserType$ = {}));
/** @internal */
exports.QueryFeedbackResponseDataUserProperties$inboundSchema = (0, schemas_js_1.collectExtraKeys)(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.QueryFeedbackResponseDataUserType$inboundSchema)
        .optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
exports.QueryFeedbackResponseDataUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(exports.QueryFeedbackResponseDataUserType$outboundSchema)
        .optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...(0, primitives_js_1.remap)(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataUserProperties$;
(function (QueryFeedbackResponseDataUserProperties$) {
    /** @deprecated use `QueryFeedbackResponseDataUserProperties$inboundSchema` instead. */
    QueryFeedbackResponseDataUserProperties$.inboundSchema = exports.QueryFeedbackResponseDataUserProperties$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataUserProperties$outboundSchema` instead. */
    QueryFeedbackResponseDataUserProperties$.outboundSchema = exports.QueryFeedbackResponseDataUserProperties$outboundSchema;
})(QueryFeedbackResponseDataUserProperties$ || (exports.QueryFeedbackResponseDataUserProperties$ = QueryFeedbackResponseDataUserProperties$ = {}));
function queryFeedbackResponseDataUserPropertiesToJSON(queryFeedbackResponseDataUserProperties) {
    return JSON.stringify(exports.QueryFeedbackResponseDataUserProperties$outboundSchema.parse(queryFeedbackResponseDataUserProperties));
}
function queryFeedbackResponseDataUserPropertiesFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryFeedbackResponseDataUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryFeedbackResponseDataUserProperties' from JSON`);
}
/** @internal */
exports.QueryFeedbackResponseDataStatus$inboundSchema = z.nativeEnum(exports.QueryFeedbackResponseDataStatus);
/** @internal */
exports.QueryFeedbackResponseDataStatus$outboundSchema = exports.QueryFeedbackResponseDataStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseDataStatus$;
(function (QueryFeedbackResponseDataStatus$) {
    /** @deprecated use `QueryFeedbackResponseDataStatus$inboundSchema` instead. */
    QueryFeedbackResponseDataStatus$.inboundSchema = exports.QueryFeedbackResponseDataStatus$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseDataStatus$outboundSchema` instead. */
    QueryFeedbackResponseDataStatus$.outboundSchema = exports.QueryFeedbackResponseDataStatus$outboundSchema;
})(QueryFeedbackResponseDataStatus$ || (exports.QueryFeedbackResponseDataStatus$ = QueryFeedbackResponseDataStatus$ = {}));
/** @internal */
exports.FeedbackResultItem$inboundSchema = z.object({
    id: z.string().optional(),
    type: exports.QueryFeedbackResponseDataType$inboundSchema.optional(),
    messageId: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    organizationId: z.string().optional(),
    reasons: z.nullable(z.array(z.lazy(() => exports.QueryFeedbackResponseDataReasons$inboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.QueryFeedbackResponseDataUserProperties$inboundSchema)).optional(),
    conversationId: z.string().optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    status: exports.QueryFeedbackResponseDataStatus$inboundSchema.default("unreviewed"),
    sum: z.number().optional(),
    count: z.number().optional(),
    avg: z.number().optional(),
    min: z.number().optional(),
    max: z.number().optional(),
    id_hour: z.string().optional(),
    id_day: z.string().optional(),
    id_week: z.string().optional(),
    id_month: z.string().optional(),
    type_hour: z.string().optional(),
    type_day: z.string().optional(),
    type_week: z.string().optional(),
    type_month: z.string().optional(),
    messageId_hour: z.string().optional(),
    messageId_day: z.string().optional(),
    messageId_week: z.string().optional(),
    messageId_month: z.string().optional(),
    createdAt_hour: z.string().optional(),
    createdAt_day: z.string().optional(),
    createdAt_week: z.string().optional(),
    createdAt_month: z.string().optional(),
    organizationId_hour: z.string().optional(),
    organizationId_day: z.string().optional(),
    organizationId_week: z.string().optional(),
    organizationId_month: z.string().optional(),
    reasons_hour: z.string().optional(),
    reasons_day: z.string().optional(),
    reasons_week: z.string().optional(),
    reasons_month: z.string().optional(),
    properties_hour: z.string().optional(),
    properties_day: z.string().optional(),
    properties_week: z.string().optional(),
    properties_month: z.string().optional(),
    userProperties_hour: z.string().optional(),
    userProperties_day: z.string().optional(),
    userProperties_week: z.string().optional(),
    userProperties_month: z.string().optional(),
    conversationId_hour: z.string().optional(),
    conversationId_day: z.string().optional(),
    conversationId_week: z.string().optional(),
    conversationId_month: z.string().optional(),
    projectId_hour: z.string().optional(),
    projectId_day: z.string().optional(),
    projectId_week: z.string().optional(),
    projectId_month: z.string().optional(),
    integrationId_hour: z.string().optional(),
    integrationId_day: z.string().optional(),
    integrationId_week: z.string().optional(),
    integrationId_month: z.string().optional(),
    updatedAt_hour: z.string().optional(),
    updatedAt_day: z.string().optional(),
    updatedAt_week: z.string().optional(),
    updatedAt_month: z.string().optional(),
    status_hour: z.string().optional(),
    status_day: z.string().optional(),
    status_week: z.string().optional(),
    status_month: z.string().optional(),
    sum_id: z.number().optional(),
    sum_type: z.number().optional(),
    sum_messageId: z.number().optional(),
    sum_createdAt: z.number().optional(),
    sum_organizationId: z.number().optional(),
    sum_reasons: z.number().optional(),
    sum_properties: z.number().optional(),
    sum_userProperties: z.number().optional(),
    sum_conversationId: z.number().optional(),
    sum_projectId: z.number().optional(),
    sum_integrationId: z.number().optional(),
    sum_updatedAt: z.number().optional(),
    sum_status: z.number().optional(),
    count_id: z.number().optional(),
    count_type: z.number().optional(),
    count_messageId: z.number().optional(),
    count_createdAt: z.number().optional(),
    count_organizationId: z.number().optional(),
    count_reasons: z.number().optional(),
    count_properties: z.number().optional(),
    count_userProperties: z.number().optional(),
    count_conversationId: z.number().optional(),
    count_projectId: z.number().optional(),
    count_integrationId: z.number().optional(),
    count_updatedAt: z.number().optional(),
    count_status: z.number().optional(),
    avg_id: z.number().optional(),
    avg_type: z.number().optional(),
    avg_messageId: z.number().optional(),
    avg_createdAt: z.number().optional(),
    avg_organizationId: z.number().optional(),
    avg_reasons: z.number().optional(),
    avg_properties: z.number().optional(),
    avg_userProperties: z.number().optional(),
    avg_conversationId: z.number().optional(),
    avg_projectId: z.number().optional(),
    avg_integrationId: z.number().optional(),
    avg_updatedAt: z.number().optional(),
    avg_status: z.number().optional(),
    min_id: z.number().optional(),
    min_type: z.number().optional(),
    min_messageId: z.number().optional(),
    min_createdAt: z.number().optional(),
    min_organizationId: z.number().optional(),
    min_reasons: z.number().optional(),
    min_properties: z.number().optional(),
    min_userProperties: z.number().optional(),
    min_conversationId: z.number().optional(),
    min_projectId: z.number().optional(),
    min_integrationId: z.number().optional(),
    min_updatedAt: z.number().optional(),
    min_status: z.number().optional(),
    max_id: z.number().optional(),
    max_type: z.number().optional(),
    max_messageId: z.number().optional(),
    max_createdAt: z.number().optional(),
    max_organizationId: z.number().optional(),
    max_reasons: z.number().optional(),
    max_properties: z.number().optional(),
    max_userProperties: z.number().optional(),
    max_conversationId: z.number().optional(),
    max_projectId: z.number().optional(),
    max_integrationId: z.number().optional(),
    max_updatedAt: z.number().optional(),
    max_status: z.number().optional(),
    "sum_properties.userId": z.number().optional(),
    "sum_properties.supportAgentName": z.number().optional(),
    "sum_userProperties.userId": z.number().optional(),
    "sum_userProperties.supportAgentName": z.number().optional(),
    "count_properties.userId": z.number().optional(),
    "count_properties.supportAgentName": z.number().optional(),
    "count_userProperties.userId": z.number().optional(),
    "count_userProperties.supportAgentName": z.number().optional(),
    "countDistinct_properties.userId": z.number().optional(),
    "countDistinct_properties.supportAgentName": z.number().optional(),
    "countDistinct_userProperties.userId": z.number().optional(),
    "countDistinct_userProperties.supportAgentName": z.number().optional(),
    "avg_properties.userId": z.number().optional(),
    "avg_properties.supportAgentName": z.number().optional(),
    "avg_userProperties.userId": z.number().optional(),
    "avg_userProperties.supportAgentName": z.number().optional(),
    "min_properties.userId": z.number().optional(),
    "min_properties.supportAgentName": z.number().optional(),
    "min_userProperties.userId": z.number().optional(),
    "min_userProperties.supportAgentName": z.number().optional(),
    "max_properties.userId": z.number().optional(),
    "max_properties.supportAgentName": z.number().optional(),
    "max_userProperties.userId": z.number().optional(),
    "max_userProperties.supportAgentName": z.number().optional(),
    "properties.userId": z.nullable(z.string()).optional(),
    "properties.supportAgentName": z.nullable(z.string()).optional(),
    "userProperties.userId": z.nullable(z.string()).optional(),
    "userProperties.supportAgentName": z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "id_hour": "idHour",
        "id_day": "idDay",
        "id_week": "idWeek",
        "id_month": "idMonth",
        "type_hour": "typeHour",
        "type_day": "typeDay",
        "type_week": "typeWeek",
        "type_month": "typeMonth",
        "messageId_hour": "messageIdHour",
        "messageId_day": "messageIdDay",
        "messageId_week": "messageIdWeek",
        "messageId_month": "messageIdMonth",
        "createdAt_hour": "createdAtHour",
        "createdAt_day": "createdAtDay",
        "createdAt_week": "createdAtWeek",
        "createdAt_month": "createdAtMonth",
        "organizationId_hour": "organizationIdHour",
        "organizationId_day": "organizationIdDay",
        "organizationId_week": "organizationIdWeek",
        "organizationId_month": "organizationIdMonth",
        "reasons_hour": "reasonsHour",
        "reasons_day": "reasonsDay",
        "reasons_week": "reasonsWeek",
        "reasons_month": "reasonsMonth",
        "properties_hour": "propertiesHour",
        "properties_day": "propertiesDay",
        "properties_week": "propertiesWeek",
        "properties_month": "propertiesMonth",
        "userProperties_hour": "userPropertiesHour",
        "userProperties_day": "userPropertiesDay",
        "userProperties_week": "userPropertiesWeek",
        "userProperties_month": "userPropertiesMonth",
        "conversationId_hour": "conversationIdHour",
        "conversationId_day": "conversationIdDay",
        "conversationId_week": "conversationIdWeek",
        "conversationId_month": "conversationIdMonth",
        "projectId_hour": "projectIdHour",
        "projectId_day": "projectIdDay",
        "projectId_week": "projectIdWeek",
        "projectId_month": "projectIdMonth",
        "integrationId_hour": "integrationIdHour",
        "integrationId_day": "integrationIdDay",
        "integrationId_week": "integrationIdWeek",
        "integrationId_month": "integrationIdMonth",
        "updatedAt_hour": "updatedAtHour",
        "updatedAt_day": "updatedAtDay",
        "updatedAt_week": "updatedAtWeek",
        "updatedAt_month": "updatedAtMonth",
        "status_hour": "statusHour",
        "status_day": "statusDay",
        "status_week": "statusWeek",
        "status_month": "statusMonth",
        "sum_id": "sumId",
        "sum_type": "sumType",
        "sum_messageId": "sumMessageId",
        "sum_createdAt": "sumCreatedAt",
        "sum_organizationId": "sumOrganizationId",
        "sum_reasons": "sumReasons",
        "sum_properties": "sumProperties",
        "sum_userProperties": "sumUserProperties",
        "sum_conversationId": "sumConversationId",
        "sum_projectId": "sumProjectId",
        "sum_integrationId": "sumIntegrationId",
        "sum_updatedAt": "sumUpdatedAt",
        "sum_status": "sumStatus",
        "count_id": "countId",
        "count_type": "countType",
        "count_messageId": "countMessageId",
        "count_createdAt": "countCreatedAt",
        "count_organizationId": "countOrganizationId",
        "count_reasons": "countReasons",
        "count_properties": "countProperties",
        "count_userProperties": "countUserProperties",
        "count_conversationId": "countConversationId",
        "count_projectId": "countProjectId",
        "count_integrationId": "countIntegrationId",
        "count_updatedAt": "countUpdatedAt",
        "count_status": "countStatus",
        "avg_id": "avgId",
        "avg_type": "avgType",
        "avg_messageId": "avgMessageId",
        "avg_createdAt": "avgCreatedAt",
        "avg_organizationId": "avgOrganizationId",
        "avg_reasons": "avgReasons",
        "avg_properties": "avgProperties",
        "avg_userProperties": "avgUserProperties",
        "avg_conversationId": "avgConversationId",
        "avg_projectId": "avgProjectId",
        "avg_integrationId": "avgIntegrationId",
        "avg_updatedAt": "avgUpdatedAt",
        "avg_status": "avgStatus",
        "min_id": "minId",
        "min_type": "minType",
        "min_messageId": "minMessageId",
        "min_createdAt": "minCreatedAt",
        "min_organizationId": "minOrganizationId",
        "min_reasons": "minReasons",
        "min_properties": "minProperties",
        "min_userProperties": "minUserProperties",
        "min_conversationId": "minConversationId",
        "min_projectId": "minProjectId",
        "min_integrationId": "minIntegrationId",
        "min_updatedAt": "minUpdatedAt",
        "min_status": "minStatus",
        "max_id": "maxId",
        "max_type": "maxType",
        "max_messageId": "maxMessageId",
        "max_createdAt": "maxCreatedAt",
        "max_organizationId": "maxOrganizationId",
        "max_reasons": "maxReasons",
        "max_properties": "maxProperties",
        "max_userProperties": "maxUserProperties",
        "max_conversationId": "maxConversationId",
        "max_projectId": "maxProjectId",
        "max_integrationId": "maxIntegrationId",
        "max_updatedAt": "maxUpdatedAt",
        "max_status": "maxStatus",
        "sum_properties.userId": "sumPropertiesUserId",
        "sum_properties.supportAgentName": "sumPropertiesSupportAgentName",
        "sum_userProperties.userId": "sumUserPropertiesUserId",
        "sum_userProperties.supportAgentName": "sumUserPropertiesSupportAgentName",
        "count_properties.userId": "countPropertiesUserId",
        "count_properties.supportAgentName": "countPropertiesSupportAgentName",
        "count_userProperties.userId": "countUserPropertiesUserId",
        "count_userProperties.supportAgentName": "countUserPropertiesSupportAgentName",
        "countDistinct_properties.userId": "countDistinctPropertiesUserId",
        "countDistinct_properties.supportAgentName": "countDistinctPropertiesSupportAgentName",
        "countDistinct_userProperties.userId": "countDistinctUserPropertiesUserId",
        "countDistinct_userProperties.supportAgentName": "countDistinctUserPropertiesSupportAgentName",
        "avg_properties.userId": "avgPropertiesUserId",
        "avg_properties.supportAgentName": "avgPropertiesSupportAgentName",
        "avg_userProperties.userId": "avgUserPropertiesUserId",
        "avg_userProperties.supportAgentName": "avgUserPropertiesSupportAgentName",
        "min_properties.userId": "minPropertiesUserId",
        "min_properties.supportAgentName": "minPropertiesSupportAgentName",
        "min_userProperties.userId": "minUserPropertiesUserId",
        "min_userProperties.supportAgentName": "minUserPropertiesSupportAgentName",
        "max_properties.userId": "maxPropertiesUserId",
        "max_properties.supportAgentName": "maxPropertiesSupportAgentName",
        "max_userProperties.userId": "maxUserPropertiesUserId",
        "max_userProperties.supportAgentName": "maxUserPropertiesSupportAgentName",
        "properties.userId": "propertiesUserId",
        "properties.supportAgentName": "propertiesSupportAgentName",
        "userProperties.userId": "userPropertiesUserId",
        "userProperties.supportAgentName": "userPropertiesSupportAgentName",
    });
});
/** @internal */
exports.FeedbackResultItem$outboundSchema = z.object({
    id: z.string().optional(),
    type: exports.QueryFeedbackResponseDataType$outboundSchema.optional(),
    messageId: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()).optional(),
    organizationId: z.string().optional(),
    reasons: z.nullable(z.array(z.lazy(() => exports.QueryFeedbackResponseDataReasons$outboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => exports.QueryFeedbackResponseDataUserProperties$outboundSchema)).optional(),
    conversationId: z.string().optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    status: exports.QueryFeedbackResponseDataStatus$outboundSchema.default("unreviewed"),
    sum: z.number().optional(),
    count: z.number().optional(),
    avg: z.number().optional(),
    min: z.number().optional(),
    max: z.number().optional(),
    idHour: z.string().optional(),
    idDay: z.string().optional(),
    idWeek: z.string().optional(),
    idMonth: z.string().optional(),
    typeHour: z.string().optional(),
    typeDay: z.string().optional(),
    typeWeek: z.string().optional(),
    typeMonth: z.string().optional(),
    messageIdHour: z.string().optional(),
    messageIdDay: z.string().optional(),
    messageIdWeek: z.string().optional(),
    messageIdMonth: z.string().optional(),
    createdAtHour: z.string().optional(),
    createdAtDay: z.string().optional(),
    createdAtWeek: z.string().optional(),
    createdAtMonth: z.string().optional(),
    organizationIdHour: z.string().optional(),
    organizationIdDay: z.string().optional(),
    organizationIdWeek: z.string().optional(),
    organizationIdMonth: z.string().optional(),
    reasonsHour: z.string().optional(),
    reasonsDay: z.string().optional(),
    reasonsWeek: z.string().optional(),
    reasonsMonth: z.string().optional(),
    propertiesHour: z.string().optional(),
    propertiesDay: z.string().optional(),
    propertiesWeek: z.string().optional(),
    propertiesMonth: z.string().optional(),
    userPropertiesHour: z.string().optional(),
    userPropertiesDay: z.string().optional(),
    userPropertiesWeek: z.string().optional(),
    userPropertiesMonth: z.string().optional(),
    conversationIdHour: z.string().optional(),
    conversationIdDay: z.string().optional(),
    conversationIdWeek: z.string().optional(),
    conversationIdMonth: z.string().optional(),
    projectIdHour: z.string().optional(),
    projectIdDay: z.string().optional(),
    projectIdWeek: z.string().optional(),
    projectIdMonth: z.string().optional(),
    integrationIdHour: z.string().optional(),
    integrationIdDay: z.string().optional(),
    integrationIdWeek: z.string().optional(),
    integrationIdMonth: z.string().optional(),
    updatedAtHour: z.string().optional(),
    updatedAtDay: z.string().optional(),
    updatedAtWeek: z.string().optional(),
    updatedAtMonth: z.string().optional(),
    statusHour: z.string().optional(),
    statusDay: z.string().optional(),
    statusWeek: z.string().optional(),
    statusMonth: z.string().optional(),
    sumId: z.number().optional(),
    sumType: z.number().optional(),
    sumMessageId: z.number().optional(),
    sumCreatedAt: z.number().optional(),
    sumOrganizationId: z.number().optional(),
    sumReasons: z.number().optional(),
    sumProperties: z.number().optional(),
    sumUserProperties: z.number().optional(),
    sumConversationId: z.number().optional(),
    sumProjectId: z.number().optional(),
    sumIntegrationId: z.number().optional(),
    sumUpdatedAt: z.number().optional(),
    sumStatus: z.number().optional(),
    countId: z.number().optional(),
    countType: z.number().optional(),
    countMessageId: z.number().optional(),
    countCreatedAt: z.number().optional(),
    countOrganizationId: z.number().optional(),
    countReasons: z.number().optional(),
    countProperties: z.number().optional(),
    countUserProperties: z.number().optional(),
    countConversationId: z.number().optional(),
    countProjectId: z.number().optional(),
    countIntegrationId: z.number().optional(),
    countUpdatedAt: z.number().optional(),
    countStatus: z.number().optional(),
    avgId: z.number().optional(),
    avgType: z.number().optional(),
    avgMessageId: z.number().optional(),
    avgCreatedAt: z.number().optional(),
    avgOrganizationId: z.number().optional(),
    avgReasons: z.number().optional(),
    avgProperties: z.number().optional(),
    avgUserProperties: z.number().optional(),
    avgConversationId: z.number().optional(),
    avgProjectId: z.number().optional(),
    avgIntegrationId: z.number().optional(),
    avgUpdatedAt: z.number().optional(),
    avgStatus: z.number().optional(),
    minId: z.number().optional(),
    minType: z.number().optional(),
    minMessageId: z.number().optional(),
    minCreatedAt: z.number().optional(),
    minOrganizationId: z.number().optional(),
    minReasons: z.number().optional(),
    minProperties: z.number().optional(),
    minUserProperties: z.number().optional(),
    minConversationId: z.number().optional(),
    minProjectId: z.number().optional(),
    minIntegrationId: z.number().optional(),
    minUpdatedAt: z.number().optional(),
    minStatus: z.number().optional(),
    maxId: z.number().optional(),
    maxType: z.number().optional(),
    maxMessageId: z.number().optional(),
    maxCreatedAt: z.number().optional(),
    maxOrganizationId: z.number().optional(),
    maxReasons: z.number().optional(),
    maxProperties: z.number().optional(),
    maxUserProperties: z.number().optional(),
    maxConversationId: z.number().optional(),
    maxProjectId: z.number().optional(),
    maxIntegrationId: z.number().optional(),
    maxUpdatedAt: z.number().optional(),
    maxStatus: z.number().optional(),
    sumPropertiesUserId: z.number().optional(),
    sumPropertiesSupportAgentName: z.number().optional(),
    sumUserPropertiesUserId: z.number().optional(),
    sumUserPropertiesSupportAgentName: z.number().optional(),
    countPropertiesUserId: z.number().optional(),
    countPropertiesSupportAgentName: z.number().optional(),
    countUserPropertiesUserId: z.number().optional(),
    countUserPropertiesSupportAgentName: z.number().optional(),
    countDistinctPropertiesUserId: z.number().optional(),
    countDistinctPropertiesSupportAgentName: z.number().optional(),
    countDistinctUserPropertiesUserId: z.number().optional(),
    countDistinctUserPropertiesSupportAgentName: z.number().optional(),
    avgPropertiesUserId: z.number().optional(),
    avgPropertiesSupportAgentName: z.number().optional(),
    avgUserPropertiesUserId: z.number().optional(),
    avgUserPropertiesSupportAgentName: z.number().optional(),
    minPropertiesUserId: z.number().optional(),
    minPropertiesSupportAgentName: z.number().optional(),
    minUserPropertiesUserId: z.number().optional(),
    minUserPropertiesSupportAgentName: z.number().optional(),
    maxPropertiesUserId: z.number().optional(),
    maxPropertiesSupportAgentName: z.number().optional(),
    maxUserPropertiesUserId: z.number().optional(),
    maxUserPropertiesSupportAgentName: z.number().optional(),
    propertiesUserId: z.nullable(z.string()).optional(),
    propertiesSupportAgentName: z.nullable(z.string()).optional(),
    userPropertiesUserId: z.nullable(z.string()).optional(),
    userPropertiesSupportAgentName: z.nullable(z.string()).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        idHour: "id_hour",
        idDay: "id_day",
        idWeek: "id_week",
        idMonth: "id_month",
        typeHour: "type_hour",
        typeDay: "type_day",
        typeWeek: "type_week",
        typeMonth: "type_month",
        messageIdHour: "messageId_hour",
        messageIdDay: "messageId_day",
        messageIdWeek: "messageId_week",
        messageIdMonth: "messageId_month",
        createdAtHour: "createdAt_hour",
        createdAtDay: "createdAt_day",
        createdAtWeek: "createdAt_week",
        createdAtMonth: "createdAt_month",
        organizationIdHour: "organizationId_hour",
        organizationIdDay: "organizationId_day",
        organizationIdWeek: "organizationId_week",
        organizationIdMonth: "organizationId_month",
        reasonsHour: "reasons_hour",
        reasonsDay: "reasons_day",
        reasonsWeek: "reasons_week",
        reasonsMonth: "reasons_month",
        propertiesHour: "properties_hour",
        propertiesDay: "properties_day",
        propertiesWeek: "properties_week",
        propertiesMonth: "properties_month",
        userPropertiesHour: "userProperties_hour",
        userPropertiesDay: "userProperties_day",
        userPropertiesWeek: "userProperties_week",
        userPropertiesMonth: "userProperties_month",
        conversationIdHour: "conversationId_hour",
        conversationIdDay: "conversationId_day",
        conversationIdWeek: "conversationId_week",
        conversationIdMonth: "conversationId_month",
        projectIdHour: "projectId_hour",
        projectIdDay: "projectId_day",
        projectIdWeek: "projectId_week",
        projectIdMonth: "projectId_month",
        integrationIdHour: "integrationId_hour",
        integrationIdDay: "integrationId_day",
        integrationIdWeek: "integrationId_week",
        integrationIdMonth: "integrationId_month",
        updatedAtHour: "updatedAt_hour",
        updatedAtDay: "updatedAt_day",
        updatedAtWeek: "updatedAt_week",
        updatedAtMonth: "updatedAt_month",
        statusHour: "status_hour",
        statusDay: "status_day",
        statusWeek: "status_week",
        statusMonth: "status_month",
        sumId: "sum_id",
        sumType: "sum_type",
        sumMessageId: "sum_messageId",
        sumCreatedAt: "sum_createdAt",
        sumOrganizationId: "sum_organizationId",
        sumReasons: "sum_reasons",
        sumProperties: "sum_properties",
        sumUserProperties: "sum_userProperties",
        sumConversationId: "sum_conversationId",
        sumProjectId: "sum_projectId",
        sumIntegrationId: "sum_integrationId",
        sumUpdatedAt: "sum_updatedAt",
        sumStatus: "sum_status",
        countId: "count_id",
        countType: "count_type",
        countMessageId: "count_messageId",
        countCreatedAt: "count_createdAt",
        countOrganizationId: "count_organizationId",
        countReasons: "count_reasons",
        countProperties: "count_properties",
        countUserProperties: "count_userProperties",
        countConversationId: "count_conversationId",
        countProjectId: "count_projectId",
        countIntegrationId: "count_integrationId",
        countUpdatedAt: "count_updatedAt",
        countStatus: "count_status",
        avgId: "avg_id",
        avgType: "avg_type",
        avgMessageId: "avg_messageId",
        avgCreatedAt: "avg_createdAt",
        avgOrganizationId: "avg_organizationId",
        avgReasons: "avg_reasons",
        avgProperties: "avg_properties",
        avgUserProperties: "avg_userProperties",
        avgConversationId: "avg_conversationId",
        avgProjectId: "avg_projectId",
        avgIntegrationId: "avg_integrationId",
        avgUpdatedAt: "avg_updatedAt",
        avgStatus: "avg_status",
        minId: "min_id",
        minType: "min_type",
        minMessageId: "min_messageId",
        minCreatedAt: "min_createdAt",
        minOrganizationId: "min_organizationId",
        minReasons: "min_reasons",
        minProperties: "min_properties",
        minUserProperties: "min_userProperties",
        minConversationId: "min_conversationId",
        minProjectId: "min_projectId",
        minIntegrationId: "min_integrationId",
        minUpdatedAt: "min_updatedAt",
        minStatus: "min_status",
        maxId: "max_id",
        maxType: "max_type",
        maxMessageId: "max_messageId",
        maxCreatedAt: "max_createdAt",
        maxOrganizationId: "max_organizationId",
        maxReasons: "max_reasons",
        maxProperties: "max_properties",
        maxUserProperties: "max_userProperties",
        maxConversationId: "max_conversationId",
        maxProjectId: "max_projectId",
        maxIntegrationId: "max_integrationId",
        maxUpdatedAt: "max_updatedAt",
        maxStatus: "max_status",
        sumPropertiesUserId: "sum_properties.userId",
        sumPropertiesSupportAgentName: "sum_properties.supportAgentName",
        sumUserPropertiesUserId: "sum_userProperties.userId",
        sumUserPropertiesSupportAgentName: "sum_userProperties.supportAgentName",
        countPropertiesUserId: "count_properties.userId",
        countPropertiesSupportAgentName: "count_properties.supportAgentName",
        countUserPropertiesUserId: "count_userProperties.userId",
        countUserPropertiesSupportAgentName: "count_userProperties.supportAgentName",
        countDistinctPropertiesUserId: "countDistinct_properties.userId",
        countDistinctPropertiesSupportAgentName: "countDistinct_properties.supportAgentName",
        countDistinctUserPropertiesUserId: "countDistinct_userProperties.userId",
        countDistinctUserPropertiesSupportAgentName: "countDistinct_userProperties.supportAgentName",
        avgPropertiesUserId: "avg_properties.userId",
        avgPropertiesSupportAgentName: "avg_properties.supportAgentName",
        avgUserPropertiesUserId: "avg_userProperties.userId",
        avgUserPropertiesSupportAgentName: "avg_userProperties.supportAgentName",
        minPropertiesUserId: "min_properties.userId",
        minPropertiesSupportAgentName: "min_properties.supportAgentName",
        minUserPropertiesUserId: "min_userProperties.userId",
        minUserPropertiesSupportAgentName: "min_userProperties.supportAgentName",
        maxPropertiesUserId: "max_properties.userId",
        maxPropertiesSupportAgentName: "max_properties.supportAgentName",
        maxUserPropertiesUserId: "max_userProperties.userId",
        maxUserPropertiesSupportAgentName: "max_userProperties.supportAgentName",
        propertiesUserId: "properties.userId",
        propertiesSupportAgentName: "properties.supportAgentName",
        userPropertiesUserId: "userProperties.userId",
        userPropertiesSupportAgentName: "userProperties.supportAgentName",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var FeedbackResultItem$;
(function (FeedbackResultItem$) {
    /** @deprecated use `FeedbackResultItem$inboundSchema` instead. */
    FeedbackResultItem$.inboundSchema = exports.FeedbackResultItem$inboundSchema;
    /** @deprecated use `FeedbackResultItem$outboundSchema` instead. */
    FeedbackResultItem$.outboundSchema = exports.FeedbackResultItem$outboundSchema;
})(FeedbackResultItem$ || (exports.FeedbackResultItem$ = FeedbackResultItem$ = {}));
function feedbackResultItemToJSON(feedbackResultItem) {
    return JSON.stringify(exports.FeedbackResultItem$outboundSchema.parse(feedbackResultItem));
}
function feedbackResultItemFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FeedbackResultItem$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackResultItem' from JSON`);
}
/** @internal */
exports.QueryFeedbackResponseData$inboundSchema = z.object({
    result: z.array(z.lazy(() => exports.FeedbackResultItem$inboundSchema)),
    total: z.number(),
    pageSize: z.number(),
    count: z.number(),
});
/** @internal */
exports.QueryFeedbackResponseData$outboundSchema = z.object({
    result: z.array(z.lazy(() => exports.FeedbackResultItem$outboundSchema)),
    total: z.number(),
    pageSize: z.number(),
    count: z.number(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var QueryFeedbackResponseData$;
(function (QueryFeedbackResponseData$) {
    /** @deprecated use `QueryFeedbackResponseData$inboundSchema` instead. */
    QueryFeedbackResponseData$.inboundSchema = exports.QueryFeedbackResponseData$inboundSchema;
    /** @deprecated use `QueryFeedbackResponseData$outboundSchema` instead. */
    QueryFeedbackResponseData$.outboundSchema = exports.QueryFeedbackResponseData$outboundSchema;
})(QueryFeedbackResponseData$ || (exports.QueryFeedbackResponseData$ = QueryFeedbackResponseData$ = {}));
function queryFeedbackResponseDataToJSON(queryFeedbackResponseData) {
    return JSON.stringify(exports.QueryFeedbackResponseData$outboundSchema.parse(queryFeedbackResponseData));
}
function queryFeedbackResponseDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.QueryFeedbackResponseData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryFeedbackResponseData' from JSON`);
}
//# sourceMappingURL=queryfeedbackresponsedata.js.map