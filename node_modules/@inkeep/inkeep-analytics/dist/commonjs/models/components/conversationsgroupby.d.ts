import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ConversationsField } from "./conversationsfield.js";
/**
 * Group by options for conversations
 */
export type ConversationsGroupBy = {
    /**
     * Available fields for Conversations
     */
    field: ConversationsField;
    path?: Array<string> | undefined;
    includeInSelect?: boolean | undefined;
};
/** @internal */
export declare const ConversationsGroupBy$inboundSchema: z.ZodType<ConversationsGroupBy, z.ZodTypeDef, unknown>;
/** @internal */
export type ConversationsGroupBy$Outbound = {
    field: string;
    path?: Array<string> | undefined;
    includeInSelect: boolean;
};
/** @internal */
export declare const ConversationsGroupBy$outboundSchema: z.ZodType<ConversationsGroupBy$Outbound, z.ZodTypeDef, ConversationsGroupBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConversationsGroupBy$ {
    /** @deprecated use `ConversationsGroupBy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsGroupBy, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConversationsGroupBy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsGroupBy$Outbound, z.ZodTypeDef, ConversationsGroupBy>;
    /** @deprecated use `ConversationsGroupBy$Outbound` instead. */
    type Outbound = ConversationsGroupBy$Outbound;
}
export declare function conversationsGroupByToJSON(conversationsGroupBy: ConversationsGroupBy): string;
export declare function conversationsGroupByFromJSON(jsonString: string): SafeParseResult<ConversationsGroupBy, SDKValidationError>;
//# sourceMappingURL=conversationsgroupby.d.ts.map