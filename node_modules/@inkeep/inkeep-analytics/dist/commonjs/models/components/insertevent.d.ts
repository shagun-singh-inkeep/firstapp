import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { InsertConversationEvent, InsertConversationEvent$Outbound } from "./insertconversationevent.js";
import { InsertMessageEvent, InsertMessageEvent$Outbound } from "./insertmessageevent.js";
import { InsertSearchEvent, InsertSearchEvent$Outbound } from "./insertsearchevent.js";
export type InsertEvent = (InsertMessageEvent & {
    entityType: "message";
}) | (InsertConversationEvent & {
    entityType: "conversation";
}) | (InsertSearchEvent & {
    entityType: "search";
});
/** @internal */
export declare const InsertEvent$inboundSchema: z.ZodType<InsertEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type InsertEvent$Outbound = (InsertMessageEvent$Outbound & {
    entityType: "message";
}) | (InsertConversationEvent$Outbound & {
    entityType: "conversation";
}) | (InsertSearchEvent$Outbound & {
    entityType: "search";
});
/** @internal */
export declare const InsertEvent$outboundSchema: z.ZodType<InsertEvent$Outbound, z.ZodTypeDef, InsertEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InsertEvent$ {
    /** @deprecated use `InsertEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsertEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsertEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsertEvent$Outbound, z.ZodTypeDef, InsertEvent>;
    /** @deprecated use `InsertEvent$Outbound` instead. */
    type Outbound = InsertEvent$Outbound;
}
export declare function insertEventToJSON(insertEvent: InsertEvent): string;
export declare function insertEventFromJSON(jsonString: string): SafeParseResult<InsertEvent, SDKValidationError>;
//# sourceMappingURL=insertevent.d.ts.map