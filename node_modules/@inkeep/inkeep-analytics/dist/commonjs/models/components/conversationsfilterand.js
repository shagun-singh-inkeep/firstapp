"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationsFilterAND$ = exports.ConversationsFilterAND$outboundSchema = exports.ConversationsFilterAND$inboundSchema = exports.And$ = exports.And$outboundSchema = exports.And$inboundSchema = void 0;
exports.andToJSON = andToJSON;
exports.andFromJSON = andFromJSON;
exports.conversationsFilterANDToJSON = conversationsFilterANDToJSON;
exports.conversationsFilterANDFromJSON = conversationsFilterANDFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const conversationsfilter_js_1 = require("./conversationsfilter.js");
/** @internal */
exports.And$inboundSchema = z.lazy(() => conversationsfilter_js_1.ConversationsFilter$inboundSchema);
/** @internal */
exports.And$outboundSchema = z
    .lazy(() => conversationsfilter_js_1.ConversationsFilter$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var And$;
(function (And$) {
    /** @deprecated use `And$inboundSchema` instead. */
    And$.inboundSchema = exports.And$inboundSchema;
    /** @deprecated use `And$outboundSchema` instead. */
    And$.outboundSchema = exports.And$outboundSchema;
})(And$ || (exports.And$ = And$ = {}));
function andToJSON(and) {
    return JSON.stringify(exports.And$outboundSchema.parse(and));
}
function andFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.And$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'And' from JSON`);
}
/** @internal */
exports.ConversationsFilterAND$inboundSchema = z.object({
    and: z.array(z.lazy(() => conversationsfilter_js_1.ConversationsFilter$inboundSchema)),
});
/** @internal */
exports.ConversationsFilterAND$outboundSchema = z.object({
    and: z.array(z.lazy(() => conversationsfilter_js_1.ConversationsFilter$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ConversationsFilterAND$;
(function (ConversationsFilterAND$) {
    /** @deprecated use `ConversationsFilterAND$inboundSchema` instead. */
    ConversationsFilterAND$.inboundSchema = exports.ConversationsFilterAND$inboundSchema;
    /** @deprecated use `ConversationsFilterAND$outboundSchema` instead. */
    ConversationsFilterAND$.outboundSchema = exports.ConversationsFilterAND$outboundSchema;
})(ConversationsFilterAND$ || (exports.ConversationsFilterAND$ = ConversationsFilterAND$ = {}));
function conversationsFilterANDToJSON(conversationsFilterAND) {
    return JSON.stringify(exports.ConversationsFilterAND$outboundSchema.parse(conversationsFilterAND));
}
function conversationsFilterANDFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ConversationsFilterAND$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConversationsFilterAND' from JSON`);
}
//# sourceMappingURL=conversationsfilterand.js.map