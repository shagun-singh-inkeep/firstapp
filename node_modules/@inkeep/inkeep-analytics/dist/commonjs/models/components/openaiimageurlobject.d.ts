import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const Detail: {
    readonly Auto: "auto";
    readonly Low: "low";
    readonly High: "high";
};
export type Detail = ClosedEnum<typeof Detail>;
export type OpenAIImageUrlObject = {
    url: string;
    detail?: Detail | undefined;
};
/** @internal */
export declare const Detail$inboundSchema: z.ZodNativeEnum<typeof Detail>;
/** @internal */
export declare const Detail$outboundSchema: z.ZodNativeEnum<typeof Detail>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Detail$ {
    /** @deprecated use `Detail$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Auto: "auto";
        readonly Low: "low";
        readonly High: "high";
    }>;
    /** @deprecated use `Detail$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Auto: "auto";
        readonly Low: "low";
        readonly High: "high";
    }>;
}
/** @internal */
export declare const OpenAIImageUrlObject$inboundSchema: z.ZodType<OpenAIImageUrlObject, z.ZodTypeDef, unknown>;
/** @internal */
export type OpenAIImageUrlObject$Outbound = {
    url: string;
    detail: string;
};
/** @internal */
export declare const OpenAIImageUrlObject$outboundSchema: z.ZodType<OpenAIImageUrlObject$Outbound, z.ZodTypeDef, OpenAIImageUrlObject>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OpenAIImageUrlObject$ {
    /** @deprecated use `OpenAIImageUrlObject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OpenAIImageUrlObject, z.ZodTypeDef, unknown>;
    /** @deprecated use `OpenAIImageUrlObject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OpenAIImageUrlObject$Outbound, z.ZodTypeDef, OpenAIImageUrlObject>;
    /** @deprecated use `OpenAIImageUrlObject$Outbound` instead. */
    type Outbound = OpenAIImageUrlObject$Outbound;
}
export declare function openAIImageUrlObjectToJSON(openAIImageUrlObject: OpenAIImageUrlObject): string;
export declare function openAIImageUrlObjectFromJSON(jsonString: string): SafeParseResult<OpenAIImageUrlObject, SDKValidationError>;
//# sourceMappingURL=openaiimageurlobject.d.ts.map