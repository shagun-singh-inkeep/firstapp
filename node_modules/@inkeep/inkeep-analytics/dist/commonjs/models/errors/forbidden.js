"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Forbidden$ = exports.Forbidden$outboundSchema = exports.Forbidden$inboundSchema = exports.ForbiddenError$ = exports.ForbiddenError$outboundSchema = exports.ForbiddenError$inboundSchema = exports.ForbiddenErrorCode$ = exports.ForbiddenErrorCode$outboundSchema = exports.ForbiddenErrorCode$inboundSchema = exports.ForbiddenCode$ = exports.ForbiddenCode$outboundSchema = exports.ForbiddenCode$inboundSchema = exports.Forbidden = exports.ForbiddenErrorCode = exports.ForbiddenCode = void 0;
exports.forbiddenErrorToJSON = forbiddenErrorToJSON;
exports.forbiddenErrorFromJSON = forbiddenErrorFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const inkeepanalyticserror_js_1 = require("./inkeepanalyticserror.js");
/**
 * A short code indicating the error code returned.
 */
exports.ForbiddenCode = {
    Forbidden: "forbidden",
};
/**
 * A short code indicating the error code returned.
 */
exports.ForbiddenErrorCode = {
    Forbidden: "forbidden",
};
class Forbidden extends inkeepanalyticserror_js_1.InkeepAnalyticsError {
    constructor(err, httpMeta) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        this.title = err.title;
        this.status = err.status;
        this.detail = err.detail;
        if (err.instance != null)
            this.instance = err.instance;
        if (err.requestId != null)
            this.requestId = err.requestId;
        this.code = err.code;
        this.error = err.error;
        this.name = "Forbidden";
    }
}
exports.Forbidden = Forbidden;
/** @internal */
exports.ForbiddenCode$inboundSchema = z.nativeEnum(exports.ForbiddenCode);
/** @internal */
exports.ForbiddenCode$outboundSchema = exports.ForbiddenCode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ForbiddenCode$;
(function (ForbiddenCode$) {
    /** @deprecated use `ForbiddenCode$inboundSchema` instead. */
    ForbiddenCode$.inboundSchema = exports.ForbiddenCode$inboundSchema;
    /** @deprecated use `ForbiddenCode$outboundSchema` instead. */
    ForbiddenCode$.outboundSchema = exports.ForbiddenCode$outboundSchema;
})(ForbiddenCode$ || (exports.ForbiddenCode$ = ForbiddenCode$ = {}));
/** @internal */
exports.ForbiddenErrorCode$inboundSchema = z.nativeEnum(exports.ForbiddenErrorCode);
/** @internal */
exports.ForbiddenErrorCode$outboundSchema = exports.ForbiddenErrorCode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ForbiddenErrorCode$;
(function (ForbiddenErrorCode$) {
    /** @deprecated use `ForbiddenErrorCode$inboundSchema` instead. */
    ForbiddenErrorCode$.inboundSchema = exports.ForbiddenErrorCode$inboundSchema;
    /** @deprecated use `ForbiddenErrorCode$outboundSchema` instead. */
    ForbiddenErrorCode$.outboundSchema = exports.ForbiddenErrorCode$outboundSchema;
})(ForbiddenErrorCode$ || (exports.ForbiddenErrorCode$ = ForbiddenErrorCode$ = {}));
/** @internal */
exports.ForbiddenError$inboundSchema = z.object({
    code: exports.ForbiddenErrorCode$inboundSchema,
    message: z.string(),
});
/** @internal */
exports.ForbiddenError$outboundSchema = z.object({
    code: exports.ForbiddenErrorCode$outboundSchema,
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ForbiddenError$;
(function (ForbiddenError$) {
    /** @deprecated use `ForbiddenError$inboundSchema` instead. */
    ForbiddenError$.inboundSchema = exports.ForbiddenError$inboundSchema;
    /** @deprecated use `ForbiddenError$outboundSchema` instead. */
    ForbiddenError$.outboundSchema = exports.ForbiddenError$outboundSchema;
})(ForbiddenError$ || (exports.ForbiddenError$ = ForbiddenError$ = {}));
function forbiddenErrorToJSON(forbiddenError) {
    return JSON.stringify(exports.ForbiddenError$outboundSchema.parse(forbiddenError));
}
function forbiddenErrorFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ForbiddenError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ForbiddenError' from JSON`);
}
/** @internal */
exports.Forbidden$inboundSchema = z.object({
    title: z.string(),
    status: z.number(),
    detail: z.string(),
    instance: z.string().optional(),
    requestId: z.string().optional(),
    code: exports.ForbiddenCode$inboundSchema,
    error: z.lazy(() => exports.ForbiddenError$inboundSchema),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new Forbidden(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
exports.Forbidden$outboundSchema = z.instanceof(Forbidden)
    .transform(v => v.data$)
    .pipe(z.object({
    title: z.string(),
    status: z.number(),
    detail: z.string(),
    instance: z.string().optional(),
    requestId: z.string().optional(),
    code: exports.ForbiddenCode$outboundSchema,
    error: z.lazy(() => exports.ForbiddenError$outboundSchema),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Forbidden$;
(function (Forbidden$) {
    /** @deprecated use `Forbidden$inboundSchema` instead. */
    Forbidden$.inboundSchema = exports.Forbidden$inboundSchema;
    /** @deprecated use `Forbidden$outboundSchema` instead. */
    Forbidden$.outboundSchema = exports.Forbidden$outboundSchema;
})(Forbidden$ || (exports.Forbidden$ = Forbidden$ = {}));
//# sourceMappingURL=forbidden.js.map