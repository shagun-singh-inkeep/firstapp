import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { InkeepAnalyticsError } from "./inkeepanalyticserror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * A short code indicating the error code returned.
 */
export declare const UnauthorizedCode: {
    readonly Unauthorized: "unauthorized";
};
/**
 * A short code indicating the error code returned.
 */
export type UnauthorizedCode = ClosedEnum<typeof UnauthorizedCode>;
/**
 * A short code indicating the error code returned.
 */
export declare const UnauthorizedErrorCode: {
    readonly Unauthorized: "unauthorized";
};
/**
 * A short code indicating the error code returned.
 */
export type UnauthorizedErrorCode = ClosedEnum<typeof UnauthorizedErrorCode>;
/**
 * Legacy error format for backward compatibility.
 */
export type UnauthorizedError = {
    /**
     * A short code indicating the error code returned.
     */
    code: UnauthorizedErrorCode;
    /**
     * A concise error message suitable for display to end users. May be truncated if the full detail is long.
     */
    message: string;
};
export type UnauthorizedData = {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: UnauthorizedCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: UnauthorizedError;
};
export declare class Unauthorized extends InkeepAnalyticsError {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: UnauthorizedCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: UnauthorizedError;
    /** The original data that was passed to this error instance. */
    data$: UnauthorizedData;
    constructor(err: UnauthorizedData, httpMeta: {
        response: Response;
        request: Request;
        body: string;
    });
}
/** @internal */
export declare const UnauthorizedCode$inboundSchema: z.ZodNativeEnum<typeof UnauthorizedCode>;
/** @internal */
export declare const UnauthorizedCode$outboundSchema: z.ZodNativeEnum<typeof UnauthorizedCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnauthorizedCode$ {
    /** @deprecated use `UnauthorizedCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unauthorized: "unauthorized";
    }>;
    /** @deprecated use `UnauthorizedCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unauthorized: "unauthorized";
    }>;
}
/** @internal */
export declare const UnauthorizedErrorCode$inboundSchema: z.ZodNativeEnum<typeof UnauthorizedErrorCode>;
/** @internal */
export declare const UnauthorizedErrorCode$outboundSchema: z.ZodNativeEnum<typeof UnauthorizedErrorCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnauthorizedErrorCode$ {
    /** @deprecated use `UnauthorizedErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unauthorized: "unauthorized";
    }>;
    /** @deprecated use `UnauthorizedErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unauthorized: "unauthorized";
    }>;
}
/** @internal */
export declare const UnauthorizedError$inboundSchema: z.ZodType<UnauthorizedError, z.ZodTypeDef, unknown>;
/** @internal */
export type UnauthorizedError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const UnauthorizedError$outboundSchema: z.ZodType<UnauthorizedError$Outbound, z.ZodTypeDef, UnauthorizedError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnauthorizedError$ {
    /** @deprecated use `UnauthorizedError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UnauthorizedError, z.ZodTypeDef, unknown>;
    /** @deprecated use `UnauthorizedError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UnauthorizedError$Outbound, z.ZodTypeDef, UnauthorizedError>;
    /** @deprecated use `UnauthorizedError$Outbound` instead. */
    type Outbound = UnauthorizedError$Outbound;
}
export declare function unauthorizedErrorToJSON(unauthorizedError: UnauthorizedError): string;
export declare function unauthorizedErrorFromJSON(jsonString: string): SafeParseResult<UnauthorizedError, SDKValidationError>;
/** @internal */
export declare const Unauthorized$inboundSchema: z.ZodType<Unauthorized, z.ZodTypeDef, unknown>;
/** @internal */
export type Unauthorized$Outbound = {
    title: string;
    status: number;
    detail: string;
    instance?: string | undefined;
    requestId?: string | undefined;
    code: string;
    error: UnauthorizedError$Outbound;
};
/** @internal */
export declare const Unauthorized$outboundSchema: z.ZodType<Unauthorized$Outbound, z.ZodTypeDef, Unauthorized>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Unauthorized$ {
    /** @deprecated use `Unauthorized$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Unauthorized, z.ZodTypeDef, unknown>;
    /** @deprecated use `Unauthorized$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Unauthorized$Outbound, z.ZodTypeDef, Unauthorized>;
    /** @deprecated use `Unauthorized$Outbound` instead. */
    type Outbound = Unauthorized$Outbound;
}
//# sourceMappingURL=unauthorized.d.ts.map