import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { InkeepAnalyticsError } from "./inkeepanalyticserror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * A short code indicating the error code returned.
 */
export declare const InternalServerErrorCode: {
    readonly InternalServerError: "internal_server_error";
};
/**
 * A short code indicating the error code returned.
 */
export type InternalServerErrorCode = ClosedEnum<typeof InternalServerErrorCode>;
/**
 * A short code indicating the error code returned.
 */
export declare const InternalServerErrorErrorCode: {
    readonly InternalServerError: "internal_server_error";
};
/**
 * A short code indicating the error code returned.
 */
export type InternalServerErrorErrorCode = ClosedEnum<typeof InternalServerErrorErrorCode>;
/**
 * Legacy error format for backward compatibility.
 */
export type InternalServerErrorError = {
    /**
     * A short code indicating the error code returned.
     */
    code: InternalServerErrorErrorCode;
    /**
     * A concise error message suitable for display to end users. May be truncated if the full detail is long.
     */
    message: string;
};
export type InternalServerErrorData = {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: InternalServerErrorCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: InternalServerErrorError;
};
export declare class InternalServerError extends InkeepAnalyticsError {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: InternalServerErrorCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: InternalServerErrorError;
    /** The original data that was passed to this error instance. */
    data$: InternalServerErrorData;
    constructor(err: InternalServerErrorData, httpMeta: {
        response: Response;
        request: Request;
        body: string;
    });
}
/** @internal */
export declare const InternalServerErrorCode$inboundSchema: z.ZodNativeEnum<typeof InternalServerErrorCode>;
/** @internal */
export declare const InternalServerErrorCode$outboundSchema: z.ZodNativeEnum<typeof InternalServerErrorCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InternalServerErrorCode$ {
    /** @deprecated use `InternalServerErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly InternalServerError: "internal_server_error";
    }>;
    /** @deprecated use `InternalServerErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly InternalServerError: "internal_server_error";
    }>;
}
/** @internal */
export declare const InternalServerErrorErrorCode$inboundSchema: z.ZodNativeEnum<typeof InternalServerErrorErrorCode>;
/** @internal */
export declare const InternalServerErrorErrorCode$outboundSchema: z.ZodNativeEnum<typeof InternalServerErrorErrorCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InternalServerErrorErrorCode$ {
    /** @deprecated use `InternalServerErrorErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly InternalServerError: "internal_server_error";
    }>;
    /** @deprecated use `InternalServerErrorErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly InternalServerError: "internal_server_error";
    }>;
}
/** @internal */
export declare const InternalServerErrorError$inboundSchema: z.ZodType<InternalServerErrorError, z.ZodTypeDef, unknown>;
/** @internal */
export type InternalServerErrorError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const InternalServerErrorError$outboundSchema: z.ZodType<InternalServerErrorError$Outbound, z.ZodTypeDef, InternalServerErrorError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InternalServerErrorError$ {
    /** @deprecated use `InternalServerErrorError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InternalServerErrorError, z.ZodTypeDef, unknown>;
    /** @deprecated use `InternalServerErrorError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InternalServerErrorError$Outbound, z.ZodTypeDef, InternalServerErrorError>;
    /** @deprecated use `InternalServerErrorError$Outbound` instead. */
    type Outbound = InternalServerErrorError$Outbound;
}
export declare function internalServerErrorErrorToJSON(internalServerErrorError: InternalServerErrorError): string;
export declare function internalServerErrorErrorFromJSON(jsonString: string): SafeParseResult<InternalServerErrorError, SDKValidationError>;
/** @internal */
export declare const InternalServerError$inboundSchema: z.ZodType<InternalServerError, z.ZodTypeDef, unknown>;
/** @internal */
export type InternalServerError$Outbound = {
    title: string;
    status: number;
    detail: string;
    instance?: string | undefined;
    requestId?: string | undefined;
    code: string;
    error: InternalServerErrorError$Outbound;
};
/** @internal */
export declare const InternalServerError$outboundSchema: z.ZodType<InternalServerError$Outbound, z.ZodTypeDef, InternalServerError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace InternalServerError$ {
    /** @deprecated use `InternalServerError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InternalServerError, z.ZodTypeDef, unknown>;
    /** @deprecated use `InternalServerError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InternalServerError$Outbound, z.ZodTypeDef, InternalServerError>;
    /** @deprecated use `InternalServerError$Outbound` instead. */
    type Outbound = InternalServerError$Outbound;
}
//# sourceMappingURL=internalservererror.d.ts.map