"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalServerError$ = exports.InternalServerError$outboundSchema = exports.InternalServerError$inboundSchema = exports.InternalServerErrorError$ = exports.InternalServerErrorError$outboundSchema = exports.InternalServerErrorError$inboundSchema = exports.InternalServerErrorErrorCode$ = exports.InternalServerErrorErrorCode$outboundSchema = exports.InternalServerErrorErrorCode$inboundSchema = exports.InternalServerErrorCode$ = exports.InternalServerErrorCode$outboundSchema = exports.InternalServerErrorCode$inboundSchema = exports.InternalServerError = exports.InternalServerErrorErrorCode = exports.InternalServerErrorCode = void 0;
exports.internalServerErrorErrorToJSON = internalServerErrorErrorToJSON;
exports.internalServerErrorErrorFromJSON = internalServerErrorErrorFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const inkeepanalyticserror_js_1 = require("./inkeepanalyticserror.js");
/**
 * A short code indicating the error code returned.
 */
exports.InternalServerErrorCode = {
    InternalServerError: "internal_server_error",
};
/**
 * A short code indicating the error code returned.
 */
exports.InternalServerErrorErrorCode = {
    InternalServerError: "internal_server_error",
};
class InternalServerError extends inkeepanalyticserror_js_1.InkeepAnalyticsError {
    constructor(err, httpMeta) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message, httpMeta);
        this.data$ = err;
        this.title = err.title;
        this.status = err.status;
        this.detail = err.detail;
        if (err.instance != null)
            this.instance = err.instance;
        if (err.requestId != null)
            this.requestId = err.requestId;
        this.code = err.code;
        this.error = err.error;
        this.name = "InternalServerError";
    }
}
exports.InternalServerError = InternalServerError;
/** @internal */
exports.InternalServerErrorCode$inboundSchema = z.nativeEnum(exports.InternalServerErrorCode);
/** @internal */
exports.InternalServerErrorCode$outboundSchema = exports.InternalServerErrorCode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InternalServerErrorCode$;
(function (InternalServerErrorCode$) {
    /** @deprecated use `InternalServerErrorCode$inboundSchema` instead. */
    InternalServerErrorCode$.inboundSchema = exports.InternalServerErrorCode$inboundSchema;
    /** @deprecated use `InternalServerErrorCode$outboundSchema` instead. */
    InternalServerErrorCode$.outboundSchema = exports.InternalServerErrorCode$outboundSchema;
})(InternalServerErrorCode$ || (exports.InternalServerErrorCode$ = InternalServerErrorCode$ = {}));
/** @internal */
exports.InternalServerErrorErrorCode$inboundSchema = z.nativeEnum(exports.InternalServerErrorErrorCode);
/** @internal */
exports.InternalServerErrorErrorCode$outboundSchema = exports.InternalServerErrorErrorCode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InternalServerErrorErrorCode$;
(function (InternalServerErrorErrorCode$) {
    /** @deprecated use `InternalServerErrorErrorCode$inboundSchema` instead. */
    InternalServerErrorErrorCode$.inboundSchema = exports.InternalServerErrorErrorCode$inboundSchema;
    /** @deprecated use `InternalServerErrorErrorCode$outboundSchema` instead. */
    InternalServerErrorErrorCode$.outboundSchema = exports.InternalServerErrorErrorCode$outboundSchema;
})(InternalServerErrorErrorCode$ || (exports.InternalServerErrorErrorCode$ = InternalServerErrorErrorCode$ = {}));
/** @internal */
exports.InternalServerErrorError$inboundSchema = z.object({
    code: exports.InternalServerErrorErrorCode$inboundSchema,
    message: z.string(),
});
/** @internal */
exports.InternalServerErrorError$outboundSchema = z.object({
    code: exports.InternalServerErrorErrorCode$outboundSchema,
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InternalServerErrorError$;
(function (InternalServerErrorError$) {
    /** @deprecated use `InternalServerErrorError$inboundSchema` instead. */
    InternalServerErrorError$.inboundSchema = exports.InternalServerErrorError$inboundSchema;
    /** @deprecated use `InternalServerErrorError$outboundSchema` instead. */
    InternalServerErrorError$.outboundSchema = exports.InternalServerErrorError$outboundSchema;
})(InternalServerErrorError$ || (exports.InternalServerErrorError$ = InternalServerErrorError$ = {}));
function internalServerErrorErrorToJSON(internalServerErrorError) {
    return JSON.stringify(exports.InternalServerErrorError$outboundSchema.parse(internalServerErrorError));
}
function internalServerErrorErrorFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.InternalServerErrorError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InternalServerErrorError' from JSON`);
}
/** @internal */
exports.InternalServerError$inboundSchema = z.object({
    title: z.string(),
    status: z.number(),
    detail: z.string(),
    instance: z.string().optional(),
    requestId: z.string().optional(),
    code: exports.InternalServerErrorCode$inboundSchema,
    error: z.lazy(() => exports.InternalServerErrorError$inboundSchema),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
})
    .transform((v) => {
    return new InternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
    });
});
/** @internal */
exports.InternalServerError$outboundSchema = z.instanceof(InternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
    title: z.string(),
    status: z.number(),
    detail: z.string(),
    instance: z.string().optional(),
    requestId: z.string().optional(),
    code: exports.InternalServerErrorCode$outboundSchema,
    error: z.lazy(() => exports.InternalServerErrorError$outboundSchema),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var InternalServerError$;
(function (InternalServerError$) {
    /** @deprecated use `InternalServerError$inboundSchema` instead. */
    InternalServerError$.inboundSchema = exports.InternalServerError$inboundSchema;
    /** @deprecated use `InternalServerError$outboundSchema` instead. */
    InternalServerError$.outboundSchema = exports.InternalServerError$outboundSchema;
})(InternalServerError$ || (exports.InternalServerError$ = InternalServerError$ = {}));
//# sourceMappingURL=internalservererror.js.map