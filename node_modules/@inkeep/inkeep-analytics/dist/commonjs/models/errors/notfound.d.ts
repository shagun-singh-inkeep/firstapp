import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { InkeepAnalyticsError } from "./inkeepanalyticserror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * A short code indicating the error code returned.
 */
export declare const NotFoundCode: {
    readonly NotFound: "not_found";
};
/**
 * A short code indicating the error code returned.
 */
export type NotFoundCode = ClosedEnum<typeof NotFoundCode>;
/**
 * A short code indicating the error code returned.
 */
export declare const NotFoundErrorCode: {
    readonly NotFound: "not_found";
};
/**
 * A short code indicating the error code returned.
 */
export type NotFoundErrorCode = ClosedEnum<typeof NotFoundErrorCode>;
/**
 * Legacy error format for backward compatibility.
 */
export type NotFoundError = {
    /**
     * A short code indicating the error code returned.
     */
    code: NotFoundErrorCode;
    /**
     * A concise error message suitable for display to end users. May be truncated if the full detail is long.
     */
    message: string;
};
export type NotFoundData = {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: NotFoundCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: NotFoundError;
};
export declare class NotFound extends InkeepAnalyticsError {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: NotFoundCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: NotFoundError;
    /** The original data that was passed to this error instance. */
    data$: NotFoundData;
    constructor(err: NotFoundData, httpMeta: {
        response: Response;
        request: Request;
        body: string;
    });
}
/** @internal */
export declare const NotFoundCode$inboundSchema: z.ZodNativeEnum<typeof NotFoundCode>;
/** @internal */
export declare const NotFoundCode$outboundSchema: z.ZodNativeEnum<typeof NotFoundCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NotFoundCode$ {
    /** @deprecated use `NotFoundCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NotFound: "not_found";
    }>;
    /** @deprecated use `NotFoundCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NotFound: "not_found";
    }>;
}
/** @internal */
export declare const NotFoundErrorCode$inboundSchema: z.ZodNativeEnum<typeof NotFoundErrorCode>;
/** @internal */
export declare const NotFoundErrorCode$outboundSchema: z.ZodNativeEnum<typeof NotFoundErrorCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NotFoundErrorCode$ {
    /** @deprecated use `NotFoundErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NotFound: "not_found";
    }>;
    /** @deprecated use `NotFoundErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NotFound: "not_found";
    }>;
}
/** @internal */
export declare const NotFoundError$inboundSchema: z.ZodType<NotFoundError, z.ZodTypeDef, unknown>;
/** @internal */
export type NotFoundError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const NotFoundError$outboundSchema: z.ZodType<NotFoundError$Outbound, z.ZodTypeDef, NotFoundError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NotFoundError$ {
    /** @deprecated use `NotFoundError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NotFoundError, z.ZodTypeDef, unknown>;
    /** @deprecated use `NotFoundError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NotFoundError$Outbound, z.ZodTypeDef, NotFoundError>;
    /** @deprecated use `NotFoundError$Outbound` instead. */
    type Outbound = NotFoundError$Outbound;
}
export declare function notFoundErrorToJSON(notFoundError: NotFoundError): string;
export declare function notFoundErrorFromJSON(jsonString: string): SafeParseResult<NotFoundError, SDKValidationError>;
/** @internal */
export declare const NotFound$inboundSchema: z.ZodType<NotFound, z.ZodTypeDef, unknown>;
/** @internal */
export type NotFound$Outbound = {
    title: string;
    status: number;
    detail: string;
    instance?: string | undefined;
    requestId?: string | undefined;
    code: string;
    error: NotFoundError$Outbound;
};
/** @internal */
export declare const NotFound$outboundSchema: z.ZodType<NotFound$Outbound, z.ZodTypeDef, NotFound>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace NotFound$ {
    /** @deprecated use `NotFound$inboundSchema` instead. */
    const inboundSchema: z.ZodType<NotFound, z.ZodTypeDef, unknown>;
    /** @deprecated use `NotFound$outboundSchema` instead. */
    const outboundSchema: z.ZodType<NotFound$Outbound, z.ZodTypeDef, NotFound>;
    /** @deprecated use `NotFound$Outbound` instead. */
    type Outbound = NotFound$Outbound;
}
//# sourceMappingURL=notfound.d.ts.map