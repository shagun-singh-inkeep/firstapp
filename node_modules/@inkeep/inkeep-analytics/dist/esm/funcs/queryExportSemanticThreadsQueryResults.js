/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import { APIPromise } from "../types/async.js";
/**
 * Export Semantic Threads Query Results
 */
export function queryExportSemanticThreadsQueryResults(client, request, options) {
    return new APIPromise($do(client, request, options));
}
async function $do(client, request, options) {
    const parsed = safeParse(request, (value) => components.QuerySemanticThreadsRequestBody$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
    }
    const payload = parsed.value;
    const body = encodeJSON("body", payload, { explode: true });
    const path = pathToFunc("/query/semantic-threads/export")();
    const headers = new Headers(compactMap({
        "Content-Type": "application/json",
        Accept: "text/csv",
    }));
    const secConfig = await extractSecurity(client._options.apiIntegrationKey);
    const securityInput = secConfig == null
        ? {}
        : { apiIntegrationKey: secConfig };
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        options: client._options,
        baseURL: options?.serverURL ?? client._baseURL ?? "",
        operationID: "exportSemanticThreadsQueryResults",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiIntegrationKey,
        retryConfig: options?.retries
            || client._options.retryConfig
            || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 100,
                    maxInterval: 2000,
                    exponent: 1.5,
                    maxElapsedTime: 3600000,
                },
                retryConnectionErrors: true,
            }
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["5XX", "429"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        body: body,
        userAgent: client._options.userAgent,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "401", "403", "422", "4XX", "500", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.stream(200, z.instanceof((ReadableStream)), {
        ctype: "text/csv",
    }), M.jsonErr(400, errors.BadRequest$inboundSchema, {
        ctype: "application/problem+json",
    }), M.jsonErr(401, errors.Unauthorized$inboundSchema, {
        ctype: "application/problem+json",
    }), M.jsonErr(403, errors.Forbidden$inboundSchema, {
        ctype: "application/problem+json",
    }), M.jsonErr(422, errors.UnprocessableEntity$inboundSchema, {
        ctype: "application/problem+json",
    }), M.jsonErr(500, errors.InternalServerError$inboundSchema, {
        ctype: "application/problem+json",
    }), M.fail("4XX"), M.fail("5XX"))(response, req, { extraFields: responseFields });
    if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
    }
    return [result, { status: "complete", request: req, response }];
}
//# sourceMappingURL=queryExportSemanticThreadsQueryResults.js.map