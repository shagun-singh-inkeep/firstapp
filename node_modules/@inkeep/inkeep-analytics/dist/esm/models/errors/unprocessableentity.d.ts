import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { InkeepAnalyticsError } from "./inkeepanalyticserror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * A short code indicating the error code returned.
 */
export declare const UnprocessableEntityCode: {
    readonly UnprocessableEntity: "unprocessable_entity";
};
/**
 * A short code indicating the error code returned.
 */
export type UnprocessableEntityCode = ClosedEnum<typeof UnprocessableEntityCode>;
/**
 * A short code indicating the error code returned.
 */
export declare const UnprocessableEntityErrorCode: {
    readonly UnprocessableEntity: "unprocessable_entity";
};
/**
 * A short code indicating the error code returned.
 */
export type UnprocessableEntityErrorCode = ClosedEnum<typeof UnprocessableEntityErrorCode>;
/**
 * Legacy error format for backward compatibility.
 */
export type UnprocessableEntityError = {
    /**
     * A short code indicating the error code returned.
     */
    code: UnprocessableEntityErrorCode;
    /**
     * A concise error message suitable for display to end users. May be truncated if the full detail is long.
     */
    message: string;
};
export type UnprocessableEntityData = {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: UnprocessableEntityCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: UnprocessableEntityError;
};
export declare class UnprocessableEntity extends InkeepAnalyticsError {
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * A detailed explanation specific to this occurrence of the problem, providing context and specifics about what went wrong.
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | undefined;
    /**
     * A unique identifier for the request, useful for troubleshooting.
     */
    requestId?: string | undefined;
    /**
     * A short code indicating the error code returned.
     */
    code: UnprocessableEntityCode;
    /**
     * Legacy error format for backward compatibility.
     */
    error: UnprocessableEntityError;
    /** The original data that was passed to this error instance. */
    data$: UnprocessableEntityData;
    constructor(err: UnprocessableEntityData, httpMeta: {
        response: Response;
        request: Request;
        body: string;
    });
}
/** @internal */
export declare const UnprocessableEntityCode$inboundSchema: z.ZodNativeEnum<typeof UnprocessableEntityCode>;
/** @internal */
export declare const UnprocessableEntityCode$outboundSchema: z.ZodNativeEnum<typeof UnprocessableEntityCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnprocessableEntityCode$ {
    /** @deprecated use `UnprocessableEntityCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly UnprocessableEntity: "unprocessable_entity";
    }>;
    /** @deprecated use `UnprocessableEntityCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly UnprocessableEntity: "unprocessable_entity";
    }>;
}
/** @internal */
export declare const UnprocessableEntityErrorCode$inboundSchema: z.ZodNativeEnum<typeof UnprocessableEntityErrorCode>;
/** @internal */
export declare const UnprocessableEntityErrorCode$outboundSchema: z.ZodNativeEnum<typeof UnprocessableEntityErrorCode>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnprocessableEntityErrorCode$ {
    /** @deprecated use `UnprocessableEntityErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly UnprocessableEntity: "unprocessable_entity";
    }>;
    /** @deprecated use `UnprocessableEntityErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly UnprocessableEntity: "unprocessable_entity";
    }>;
}
/** @internal */
export declare const UnprocessableEntityError$inboundSchema: z.ZodType<UnprocessableEntityError, z.ZodTypeDef, unknown>;
/** @internal */
export type UnprocessableEntityError$Outbound = {
    code: string;
    message: string;
};
/** @internal */
export declare const UnprocessableEntityError$outboundSchema: z.ZodType<UnprocessableEntityError$Outbound, z.ZodTypeDef, UnprocessableEntityError>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnprocessableEntityError$ {
    /** @deprecated use `UnprocessableEntityError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UnprocessableEntityError, z.ZodTypeDef, unknown>;
    /** @deprecated use `UnprocessableEntityError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UnprocessableEntityError$Outbound, z.ZodTypeDef, UnprocessableEntityError>;
    /** @deprecated use `UnprocessableEntityError$Outbound` instead. */
    type Outbound = UnprocessableEntityError$Outbound;
}
export declare function unprocessableEntityErrorToJSON(unprocessableEntityError: UnprocessableEntityError): string;
export declare function unprocessableEntityErrorFromJSON(jsonString: string): SafeParseResult<UnprocessableEntityError, SDKValidationError>;
/** @internal */
export declare const UnprocessableEntity$inboundSchema: z.ZodType<UnprocessableEntity, z.ZodTypeDef, unknown>;
/** @internal */
export type UnprocessableEntity$Outbound = {
    title: string;
    status: number;
    detail: string;
    instance?: string | undefined;
    requestId?: string | undefined;
    code: string;
    error: UnprocessableEntityError$Outbound;
};
/** @internal */
export declare const UnprocessableEntity$outboundSchema: z.ZodType<UnprocessableEntity$Outbound, z.ZodTypeDef, UnprocessableEntity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UnprocessableEntity$ {
    /** @deprecated use `UnprocessableEntity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UnprocessableEntity, z.ZodTypeDef, unknown>;
    /** @deprecated use `UnprocessableEntity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UnprocessableEntity$Outbound, z.ZodTypeDef, UnprocessableEntity>;
    /** @deprecated use `UnprocessableEntity$Outbound` instead. */
    type Outbound = UnprocessableEntity$Outbound;
}
//# sourceMappingURL=unprocessableentity.d.ts.map