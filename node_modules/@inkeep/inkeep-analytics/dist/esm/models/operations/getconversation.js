/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const GetConversationSecurity$inboundSchema = z.object({
    WebIntegrationKey: z.string().optional(),
    ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "WebIntegrationKey": "webIntegrationKey",
        "ApiIntegrationKey": "apiIntegrationKey",
    });
});
/** @internal */
export const GetConversationSecurity$outboundSchema = z.object({
    webIntegrationKey: z.string().optional(),
    apiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        webIntegrationKey: "WebIntegrationKey",
        apiIntegrationKey: "ApiIntegrationKey",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConversationSecurity$;
(function (GetConversationSecurity$) {
    /** @deprecated use `GetConversationSecurity$inboundSchema` instead. */
    GetConversationSecurity$.inboundSchema = GetConversationSecurity$inboundSchema;
    /** @deprecated use `GetConversationSecurity$outboundSchema` instead. */
    GetConversationSecurity$.outboundSchema = GetConversationSecurity$outboundSchema;
})(GetConversationSecurity$ || (GetConversationSecurity$ = {}));
export function getConversationSecurityToJSON(getConversationSecurity) {
    return JSON.stringify(GetConversationSecurity$outboundSchema.parse(getConversationSecurity));
}
export function getConversationSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConversationSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConversationSecurity' from JSON`);
}
/** @internal */
export const GetConversationRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const GetConversationRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var GetConversationRequest$;
(function (GetConversationRequest$) {
    /** @deprecated use `GetConversationRequest$inboundSchema` instead. */
    GetConversationRequest$.inboundSchema = GetConversationRequest$inboundSchema;
    /** @deprecated use `GetConversationRequest$outboundSchema` instead. */
    GetConversationRequest$.outboundSchema = GetConversationRequest$outboundSchema;
})(GetConversationRequest$ || (GetConversationRequest$ = {}));
export function getConversationRequestToJSON(getConversationRequest) {
    return JSON.stringify(GetConversationRequest$outboundSchema.parse(getConversationRequest));
}
export function getConversationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => GetConversationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetConversationRequest' from JSON`);
}
//# sourceMappingURL=getconversation.js.map