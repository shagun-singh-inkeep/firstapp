/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
export const Type = {
    Positive: "positive",
    Negative: "negative",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const UserType = {
    User: "user",
    Member: "member",
};
export const LogFeedbackType = {
    Positive: "positive",
    Negative: "negative",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const LogFeedbackUserType = {
    User: "user",
    Member: "member",
};
/** @internal */
export const Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
export const Type$outboundSchema = Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const Reasons$inboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/** @internal */
export const Reasons$outboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Reasons$;
(function (Reasons$) {
    /** @deprecated use `Reasons$inboundSchema` instead. */
    Reasons$.inboundSchema = Reasons$inboundSchema;
    /** @deprecated use `Reasons$outboundSchema` instead. */
    Reasons$.outboundSchema = Reasons$outboundSchema;
})(Reasons$ || (Reasons$ = {}));
export function reasonsToJSON(reasons) {
    return JSON.stringify(Reasons$outboundSchema.parse(reasons));
}
export function reasonsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Reasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Reasons' from JSON`);
}
/** @internal */
export const Id$inboundSchema = z.union([
    z.string(),
    z.number(),
]);
/** @internal */
export const Id$outboundSchema = z
    .union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Id$;
(function (Id$) {
    /** @deprecated use `Id$inboundSchema` instead. */
    Id$.inboundSchema = Id$inboundSchema;
    /** @deprecated use `Id$outboundSchema` instead. */
    Id$.outboundSchema = Id$outboundSchema;
})(Id$ || (Id$ = {}));
export function idToJSON(id) {
    return JSON.stringify(Id$outboundSchema.parse(id));
}
export function idFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Id$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Id' from JSON`);
}
/** @internal */
export const UserId$inboundSchema = z
    .union([z.string(), z.number()]);
/** @internal */
export const UserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserId$;
(function (UserId$) {
    /** @deprecated use `UserId$inboundSchema` instead. */
    UserId$.inboundSchema = UserId$inboundSchema;
    /** @deprecated use `UserId$outboundSchema` instead. */
    UserId$.outboundSchema = UserId$outboundSchema;
})(UserId$ || (UserId$ = {}));
export function userIdToJSON(userId) {
    return JSON.stringify(UserId$outboundSchema.parse(userId));
}
export function userIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserId' from JSON`);
}
/** @internal */
export const UserType$inboundSchema = z
    .nativeEnum(UserType);
/** @internal */
export const UserType$outboundSchema = UserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserType$;
(function (UserType$) {
    /** @deprecated use `UserType$inboundSchema` instead. */
    UserType$.inboundSchema = UserType$inboundSchema;
    /** @deprecated use `UserType$outboundSchema` instead. */
    UserType$.outboundSchema = UserType$outboundSchema;
})(UserType$ || (UserType$ = {}));
/** @internal */
export const UserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(UserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const UserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(UserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserProperties$;
(function (UserProperties$) {
    /** @deprecated use `UserProperties$inboundSchema` instead. */
    UserProperties$.inboundSchema = UserProperties$inboundSchema;
    /** @deprecated use `UserProperties$outboundSchema` instead. */
    UserProperties$.outboundSchema = UserProperties$outboundSchema;
})(UserProperties$ || (UserProperties$ = {}));
export function userPropertiesToJSON(userProperties) {
    return JSON.stringify(UserProperties$outboundSchema.parse(userProperties));
}
export function userPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserProperties' from JSON`);
}
/** @internal */
export const LogFeedbackRequestBody$inboundSchema = z.object({
    id: z.string().optional(),
    type: Type$inboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    reasons: z.nullable(z.array(z.lazy(() => Reasons$inboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => UserProperties$inboundSchema))
        .optional(),
});
/** @internal */
export const LogFeedbackRequestBody$outboundSchema = z.object({
    id: z.string().optional(),
    type: Type$outboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    reasons: z.nullable(z.array(z.lazy(() => Reasons$outboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => UserProperties$outboundSchema))
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackRequestBody$;
(function (LogFeedbackRequestBody$) {
    /** @deprecated use `LogFeedbackRequestBody$inboundSchema` instead. */
    LogFeedbackRequestBody$.inboundSchema = LogFeedbackRequestBody$inboundSchema;
    /** @deprecated use `LogFeedbackRequestBody$outboundSchema` instead. */
    LogFeedbackRequestBody$.outboundSchema = LogFeedbackRequestBody$outboundSchema;
})(LogFeedbackRequestBody$ || (LogFeedbackRequestBody$ = {}));
export function logFeedbackRequestBodyToJSON(logFeedbackRequestBody) {
    return JSON.stringify(LogFeedbackRequestBody$outboundSchema.parse(logFeedbackRequestBody));
}
export function logFeedbackRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogFeedbackRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackRequestBody' from JSON`);
}
/** @internal */
export const LogFeedbackType$inboundSchema = z.nativeEnum(LogFeedbackType);
/** @internal */
export const LogFeedbackType$outboundSchema = LogFeedbackType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackType$;
(function (LogFeedbackType$) {
    /** @deprecated use `LogFeedbackType$inboundSchema` instead. */
    LogFeedbackType$.inboundSchema = LogFeedbackType$inboundSchema;
    /** @deprecated use `LogFeedbackType$outboundSchema` instead. */
    LogFeedbackType$.outboundSchema = LogFeedbackType$outboundSchema;
})(LogFeedbackType$ || (LogFeedbackType$ = {}));
/** @internal */
export const LogFeedbackReasons$inboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/** @internal */
export const LogFeedbackReasons$outboundSchema = z.object({
    label: z.string(),
    details: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackReasons$;
(function (LogFeedbackReasons$) {
    /** @deprecated use `LogFeedbackReasons$inboundSchema` instead. */
    LogFeedbackReasons$.inboundSchema = LogFeedbackReasons$inboundSchema;
    /** @deprecated use `LogFeedbackReasons$outboundSchema` instead. */
    LogFeedbackReasons$.outboundSchema = LogFeedbackReasons$outboundSchema;
})(LogFeedbackReasons$ || (LogFeedbackReasons$ = {}));
export function logFeedbackReasonsToJSON(logFeedbackReasons) {
    return JSON.stringify(LogFeedbackReasons$outboundSchema.parse(logFeedbackReasons));
}
export function logFeedbackReasonsFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogFeedbackReasons$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackReasons' from JSON`);
}
/** @internal */
export const LogFeedbackId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const LogFeedbackId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackId$;
(function (LogFeedbackId$) {
    /** @deprecated use `LogFeedbackId$inboundSchema` instead. */
    LogFeedbackId$.inboundSchema = LogFeedbackId$inboundSchema;
    /** @deprecated use `LogFeedbackId$outboundSchema` instead. */
    LogFeedbackId$.outboundSchema = LogFeedbackId$outboundSchema;
})(LogFeedbackId$ || (LogFeedbackId$ = {}));
export function logFeedbackIdToJSON(logFeedbackId) {
    return JSON.stringify(LogFeedbackId$outboundSchema.parse(logFeedbackId));
}
export function logFeedbackIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogFeedbackId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackId' from JSON`);
}
/** @internal */
export const LogFeedbackUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const LogFeedbackUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackUserId$;
(function (LogFeedbackUserId$) {
    /** @deprecated use `LogFeedbackUserId$inboundSchema` instead. */
    LogFeedbackUserId$.inboundSchema = LogFeedbackUserId$inboundSchema;
    /** @deprecated use `LogFeedbackUserId$outboundSchema` instead. */
    LogFeedbackUserId$.outboundSchema = LogFeedbackUserId$outboundSchema;
})(LogFeedbackUserId$ || (LogFeedbackUserId$ = {}));
export function logFeedbackUserIdToJSON(logFeedbackUserId) {
    return JSON.stringify(LogFeedbackUserId$outboundSchema.parse(logFeedbackUserId));
}
export function logFeedbackUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogFeedbackUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackUserId' from JSON`);
}
/** @internal */
export const LogFeedbackUserType$inboundSchema = z.nativeEnum(LogFeedbackUserType);
/** @internal */
export const LogFeedbackUserType$outboundSchema = LogFeedbackUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackUserType$;
(function (LogFeedbackUserType$) {
    /** @deprecated use `LogFeedbackUserType$inboundSchema` instead. */
    LogFeedbackUserType$.inboundSchema = LogFeedbackUserType$inboundSchema;
    /** @deprecated use `LogFeedbackUserType$outboundSchema` instead. */
    LogFeedbackUserType$.outboundSchema = LogFeedbackUserType$outboundSchema;
})(LogFeedbackUserType$ || (LogFeedbackUserType$ = {}));
/** @internal */
export const LogFeedbackUserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(LogFeedbackUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const LogFeedbackUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(LogFeedbackUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackUserProperties$;
(function (LogFeedbackUserProperties$) {
    /** @deprecated use `LogFeedbackUserProperties$inboundSchema` instead. */
    LogFeedbackUserProperties$.inboundSchema = LogFeedbackUserProperties$inboundSchema;
    /** @deprecated use `LogFeedbackUserProperties$outboundSchema` instead. */
    LogFeedbackUserProperties$.outboundSchema = LogFeedbackUserProperties$outboundSchema;
})(LogFeedbackUserProperties$ || (LogFeedbackUserProperties$ = {}));
export function logFeedbackUserPropertiesToJSON(logFeedbackUserProperties) {
    return JSON.stringify(LogFeedbackUserProperties$outboundSchema.parse(logFeedbackUserProperties));
}
export function logFeedbackUserPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogFeedbackUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackUserProperties' from JSON`);
}
/** @internal */
export const LogFeedbackResponseBody$inboundSchema = z.object({
    id: z.string(),
    type: LogFeedbackType$inboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    reasons: z.nullable(z.array(z.lazy(() => LogFeedbackReasons$inboundSchema)))
        .optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => LogFeedbackUserProperties$inboundSchema)).optional(),
});
/** @internal */
export const LogFeedbackResponseBody$outboundSchema = z.object({
    id: z.string(),
    type: LogFeedbackType$outboundSchema,
    messageId: z.string(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    reasons: z.nullable(z.array(z.lazy(() => LogFeedbackReasons$outboundSchema)))
        .optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => LogFeedbackUserProperties$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogFeedbackResponseBody$;
(function (LogFeedbackResponseBody$) {
    /** @deprecated use `LogFeedbackResponseBody$inboundSchema` instead. */
    LogFeedbackResponseBody$.inboundSchema = LogFeedbackResponseBody$inboundSchema;
    /** @deprecated use `LogFeedbackResponseBody$outboundSchema` instead. */
    LogFeedbackResponseBody$.outboundSchema = LogFeedbackResponseBody$outboundSchema;
})(LogFeedbackResponseBody$ || (LogFeedbackResponseBody$ = {}));
export function logFeedbackResponseBodyToJSON(logFeedbackResponseBody) {
    return JSON.stringify(LogFeedbackResponseBody$outboundSchema.parse(logFeedbackResponseBody));
}
export function logFeedbackResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogFeedbackResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogFeedbackResponseBody' from JSON`);
}
//# sourceMappingURL=logfeedback.js.map