/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LogEventSecurity$inboundSchema = z.object({
    WebIntegrationKey: z.string().optional(),
    ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "WebIntegrationKey": "webIntegrationKey",
        "ApiIntegrationKey": "apiIntegrationKey",
    });
});
/** @internal */
export const LogEventSecurity$outboundSchema = z.object({
    webIntegrationKey: z.string().optional(),
    apiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        webIntegrationKey: "WebIntegrationKey",
        apiIntegrationKey: "ApiIntegrationKey",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogEventSecurity$;
(function (LogEventSecurity$) {
    /** @deprecated use `LogEventSecurity$inboundSchema` instead. */
    LogEventSecurity$.inboundSchema = LogEventSecurity$inboundSchema;
    /** @deprecated use `LogEventSecurity$outboundSchema` instead. */
    LogEventSecurity$.outboundSchema = LogEventSecurity$outboundSchema;
})(LogEventSecurity$ || (LogEventSecurity$ = {}));
export function logEventSecurityToJSON(logEventSecurity) {
    return JSON.stringify(LogEventSecurity$outboundSchema.parse(logEventSecurity));
}
export function logEventSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogEventSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogEventSecurity' from JSON`);
}
//# sourceMappingURL=logevent.js.map