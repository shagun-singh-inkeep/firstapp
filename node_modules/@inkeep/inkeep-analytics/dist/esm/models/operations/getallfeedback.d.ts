import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetAllFeedbackRequest = {
    limit?: number | null | undefined;
    offset?: number | null | undefined;
};
/** @internal */
export declare const GetAllFeedbackRequest$inboundSchema: z.ZodType<GetAllFeedbackRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetAllFeedbackRequest$Outbound = {
    limit: number | null;
    offset: number | null;
};
/** @internal */
export declare const GetAllFeedbackRequest$outboundSchema: z.ZodType<GetAllFeedbackRequest$Outbound, z.ZodTypeDef, GetAllFeedbackRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetAllFeedbackRequest$ {
    /** @deprecated use `GetAllFeedbackRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAllFeedbackRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAllFeedbackRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAllFeedbackRequest$Outbound, z.ZodTypeDef, GetAllFeedbackRequest>;
    /** @deprecated use `GetAllFeedbackRequest$Outbound` instead. */
    type Outbound = GetAllFeedbackRequest$Outbound;
}
export declare function getAllFeedbackRequestToJSON(getAllFeedbackRequest: GetAllFeedbackRequest): string;
export declare function getAllFeedbackRequestFromJSON(jsonString: string): SafeParseResult<GetAllFeedbackRequest, SDKValidationError>;
//# sourceMappingURL=getallfeedback.d.ts.map