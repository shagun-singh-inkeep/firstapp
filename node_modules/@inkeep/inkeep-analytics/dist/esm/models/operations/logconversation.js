/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const LogConversationSecurity$inboundSchema = z.object({
    WebIntegrationKey: z.string().optional(),
    ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "WebIntegrationKey": "webIntegrationKey",
        "ApiIntegrationKey": "apiIntegrationKey",
    });
});
/** @internal */
export const LogConversationSecurity$outboundSchema = z.object({
    webIntegrationKey: z.string().optional(),
    apiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        webIntegrationKey: "WebIntegrationKey",
        apiIntegrationKey: "ApiIntegrationKey",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LogConversationSecurity$;
(function (LogConversationSecurity$) {
    /** @deprecated use `LogConversationSecurity$inboundSchema` instead. */
    LogConversationSecurity$.inboundSchema = LogConversationSecurity$inboundSchema;
    /** @deprecated use `LogConversationSecurity$outboundSchema` instead. */
    LogConversationSecurity$.outboundSchema = LogConversationSecurity$outboundSchema;
})(LogConversationSecurity$ || (LogConversationSecurity$ = {}));
export function logConversationSecurityToJSON(logConversationSecurity) {
    return JSON.stringify(LogConversationSecurity$outboundSchema.parse(logConversationSecurity));
}
export function logConversationSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LogConversationSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LogConversationSecurity' from JSON`);
}
//# sourceMappingURL=logconversation.js.map