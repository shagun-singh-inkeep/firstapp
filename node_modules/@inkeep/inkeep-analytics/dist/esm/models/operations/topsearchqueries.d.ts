import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type TopSearchQueriesRequest = {
    after?: string | undefined;
    projectId?: string | undefined;
};
export type Result = {
    searchQuery: string;
    count: string;
};
export type Data = {
    result: Array<Result>;
    total: number;
};
/**
 * Top search queries
 */
export type TopSearchQueriesResponseBody = {
    data: Data;
};
/** @internal */
export declare const TopSearchQueriesRequest$inboundSchema: z.ZodType<TopSearchQueriesRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type TopSearchQueriesRequest$Outbound = {
    after?: string | undefined;
    project_id?: string | undefined;
};
/** @internal */
export declare const TopSearchQueriesRequest$outboundSchema: z.ZodType<TopSearchQueriesRequest$Outbound, z.ZodTypeDef, TopSearchQueriesRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TopSearchQueriesRequest$ {
    /** @deprecated use `TopSearchQueriesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TopSearchQueriesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `TopSearchQueriesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TopSearchQueriesRequest$Outbound, z.ZodTypeDef, TopSearchQueriesRequest>;
    /** @deprecated use `TopSearchQueriesRequest$Outbound` instead. */
    type Outbound = TopSearchQueriesRequest$Outbound;
}
export declare function topSearchQueriesRequestToJSON(topSearchQueriesRequest: TopSearchQueriesRequest): string;
export declare function topSearchQueriesRequestFromJSON(jsonString: string): SafeParseResult<TopSearchQueriesRequest, SDKValidationError>;
/** @internal */
export declare const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown>;
/** @internal */
export type Result$Outbound = {
    search_query: string;
    count: string;
};
/** @internal */
export declare const Result$outboundSchema: z.ZodType<Result$Outbound, z.ZodTypeDef, Result>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Result$ {
    /** @deprecated use `Result$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown>;
    /** @deprecated use `Result$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Result$Outbound, z.ZodTypeDef, Result>;
    /** @deprecated use `Result$Outbound` instead. */
    type Outbound = Result$Outbound;
}
export declare function resultToJSON(result: Result): string;
export declare function resultFromJSON(jsonString: string): SafeParseResult<Result, SDKValidationError>;
/** @internal */
export declare const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown>;
/** @internal */
export type Data$Outbound = {
    result: Array<Result$Outbound>;
    total: number;
};
/** @internal */
export declare const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Data$ {
    /** @deprecated use `Data$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown>;
    /** @deprecated use `Data$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data>;
    /** @deprecated use `Data$Outbound` instead. */
    type Outbound = Data$Outbound;
}
export declare function dataToJSON(data: Data): string;
export declare function dataFromJSON(jsonString: string): SafeParseResult<Data, SDKValidationError>;
/** @internal */
export declare const TopSearchQueriesResponseBody$inboundSchema: z.ZodType<TopSearchQueriesResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type TopSearchQueriesResponseBody$Outbound = {
    data: Data$Outbound;
};
/** @internal */
export declare const TopSearchQueriesResponseBody$outboundSchema: z.ZodType<TopSearchQueriesResponseBody$Outbound, z.ZodTypeDef, TopSearchQueriesResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TopSearchQueriesResponseBody$ {
    /** @deprecated use `TopSearchQueriesResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TopSearchQueriesResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `TopSearchQueriesResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TopSearchQueriesResponseBody$Outbound, z.ZodTypeDef, TopSearchQueriesResponseBody>;
    /** @deprecated use `TopSearchQueriesResponseBody$Outbound` instead. */
    type Outbound = TopSearchQueriesResponseBody$Outbound;
}
export declare function topSearchQueriesResponseBodyToJSON(topSearchQueriesResponseBody: TopSearchQueriesResponseBody): string;
export declare function topSearchQueriesResponseBodyFromJSON(jsonString: string): SafeParseResult<TopSearchQueriesResponseBody, SDKValidationError>;
//# sourceMappingURL=topsearchqueries.d.ts.map