/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const DeleteConversationSecurity$inboundSchema = z.object({
    WebIntegrationKey: z.string().optional(),
    ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        "WebIntegrationKey": "webIntegrationKey",
        "ApiIntegrationKey": "apiIntegrationKey",
    });
});
/** @internal */
export const DeleteConversationSecurity$outboundSchema = z.object({
    webIntegrationKey: z.string().optional(),
    apiIntegrationKey: z.string().optional(),
}).transform((v) => {
    return remap$(v, {
        webIntegrationKey: "WebIntegrationKey",
        apiIntegrationKey: "ApiIntegrationKey",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteConversationSecurity$;
(function (DeleteConversationSecurity$) {
    /** @deprecated use `DeleteConversationSecurity$inboundSchema` instead. */
    DeleteConversationSecurity$.inboundSchema = DeleteConversationSecurity$inboundSchema;
    /** @deprecated use `DeleteConversationSecurity$outboundSchema` instead. */
    DeleteConversationSecurity$.outboundSchema = DeleteConversationSecurity$outboundSchema;
})(DeleteConversationSecurity$ || (DeleteConversationSecurity$ = {}));
export function deleteConversationSecurityToJSON(deleteConversationSecurity) {
    return JSON.stringify(DeleteConversationSecurity$outboundSchema.parse(deleteConversationSecurity));
}
export function deleteConversationSecurityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteConversationSecurity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteConversationSecurity' from JSON`);
}
/** @internal */
export const DeleteConversationRequest$inboundSchema = z.object({
    id: z.string(),
});
/** @internal */
export const DeleteConversationRequest$outboundSchema = z.object({
    id: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteConversationRequest$;
(function (DeleteConversationRequest$) {
    /** @deprecated use `DeleteConversationRequest$inboundSchema` instead. */
    DeleteConversationRequest$.inboundSchema = DeleteConversationRequest$inboundSchema;
    /** @deprecated use `DeleteConversationRequest$outboundSchema` instead. */
    DeleteConversationRequest$.outboundSchema = DeleteConversationRequest$outboundSchema;
})(DeleteConversationRequest$ || (DeleteConversationRequest$ = {}));
export function deleteConversationRequestToJSON(deleteConversationRequest) {
    return JSON.stringify(DeleteConversationRequest$outboundSchema.parse(deleteConversationRequest));
}
export function deleteConversationRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteConversationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteConversationRequest' from JSON`);
}
/** @internal */
export const DeleteConversationResponseBody$inboundSchema = z.object({
    success: z.boolean(),
    message: z.string(),
});
/** @internal */
export const DeleteConversationResponseBody$outboundSchema = z.object({
    success: z.boolean(),
    message: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DeleteConversationResponseBody$;
(function (DeleteConversationResponseBody$) {
    /** @deprecated use `DeleteConversationResponseBody$inboundSchema` instead. */
    DeleteConversationResponseBody$.inboundSchema = DeleteConversationResponseBody$inboundSchema;
    /** @deprecated use `DeleteConversationResponseBody$outboundSchema` instead. */
    DeleteConversationResponseBody$.outboundSchema = DeleteConversationResponseBody$outboundSchema;
})(DeleteConversationResponseBody$ || (DeleteConversationResponseBody$ = {}));
export function deleteConversationResponseBodyToJSON(deleteConversationResponseBody) {
    return JSON.stringify(DeleteConversationResponseBody$outboundSchema.parse(deleteConversationResponseBody));
}
export function deleteConversationResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DeleteConversationResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteConversationResponseBody' from JSON`);
}
//# sourceMappingURL=deleteconversation.js.map