import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const Type: {
    readonly Positive: "positive";
    readonly Negative: "negative";
};
export type Type = ClosedEnum<typeof Type>;
export type Reasons = {
    label: string;
    details: string;
};
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type Id = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type UserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const UserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type UserType = ClosedEnum<typeof UserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type UserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: UserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
/**
 * Note: The maximum size of the request body is 2 MB.
 */
export type LogFeedbackRequestBody = {
    id?: string | undefined;
    type: Type;
    messageId: string;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    createdAt?: Date | null | undefined;
    reasons?: Array<Reasons> | null | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: UserProperties | null | undefined;
};
export declare const LogFeedbackType: {
    readonly Positive: "positive";
    readonly Negative: "negative";
};
export type LogFeedbackType = ClosedEnum<typeof LogFeedbackType>;
export type LogFeedbackReasons = {
    label: string;
    details: string;
};
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type LogFeedbackId = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type LogFeedbackUserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const LogFeedbackUserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type LogFeedbackUserType = ClosedEnum<typeof LogFeedbackUserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type LogFeedbackUserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: LogFeedbackUserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
/**
 * Feedback provided successfully
 */
export type LogFeedbackResponseBody = {
    id: string;
    type: LogFeedbackType;
    messageId: string;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    createdAt?: Date | null | undefined;
    reasons?: Array<LogFeedbackReasons> | null | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: LogFeedbackUserProperties | null | undefined;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
}
/** @internal */
export declare const Reasons$inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown>;
/** @internal */
export type Reasons$Outbound = {
    label: string;
    details: string;
};
/** @internal */
export declare const Reasons$outboundSchema: z.ZodType<Reasons$Outbound, z.ZodTypeDef, Reasons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Reasons$ {
    /** @deprecated use `Reasons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown>;
    /** @deprecated use `Reasons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Reasons$Outbound, z.ZodTypeDef, Reasons>;
    /** @deprecated use `Reasons$Outbound` instead. */
    type Outbound = Reasons$Outbound;
}
export declare function reasonsToJSON(reasons: Reasons): string;
export declare function reasonsFromJSON(jsonString: string): SafeParseResult<Reasons, SDKValidationError>;
/** @internal */
export declare const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown>;
/** @internal */
export type Id$Outbound = string | number;
/** @internal */
export declare const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Id$ {
    /** @deprecated use `Id$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown>;
    /** @deprecated use `Id$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id>;
    /** @deprecated use `Id$Outbound` instead. */
    type Outbound = Id$Outbound;
}
export declare function idToJSON(id: Id): string;
export declare function idFromJSON(jsonString: string): SafeParseResult<Id, SDKValidationError>;
/** @internal */
export declare const UserId$inboundSchema: z.ZodType<UserId, z.ZodTypeDef, unknown>;
/** @internal */
export type UserId$Outbound = string | number;
/** @internal */
export declare const UserId$outboundSchema: z.ZodType<UserId$Outbound, z.ZodTypeDef, UserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserId$ {
    /** @deprecated use `UserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserId$Outbound, z.ZodTypeDef, UserId>;
    /** @deprecated use `UserId$Outbound` instead. */
    type Outbound = UserId$Outbound;
}
export declare function userIdToJSON(userId: UserId): string;
export declare function userIdFromJSON(jsonString: string): SafeParseResult<UserId, SDKValidationError>;
/** @internal */
export declare const UserType$inboundSchema: z.ZodNativeEnum<typeof UserType>;
/** @internal */
export declare const UserType$outboundSchema: z.ZodNativeEnum<typeof UserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserType$ {
    /** @deprecated use `UserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `UserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const UserProperties$inboundSchema: z.ZodType<UserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type UserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const UserProperties$outboundSchema: z.ZodType<UserProperties$Outbound, z.ZodTypeDef, UserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserProperties$ {
    /** @deprecated use `UserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserProperties$Outbound, z.ZodTypeDef, UserProperties>;
    /** @deprecated use `UserProperties$Outbound` instead. */
    type Outbound = UserProperties$Outbound;
}
export declare function userPropertiesToJSON(userProperties: UserProperties): string;
export declare function userPropertiesFromJSON(jsonString: string): SafeParseResult<UserProperties, SDKValidationError>;
/** @internal */
export declare const LogFeedbackRequestBody$inboundSchema: z.ZodType<LogFeedbackRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type LogFeedbackRequestBody$Outbound = {
    id?: string | undefined;
    type: string;
    messageId: string;
    createdAt?: string | null | undefined;
    reasons?: Array<Reasons$Outbound> | null | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: UserProperties$Outbound | null | undefined;
};
/** @internal */
export declare const LogFeedbackRequestBody$outboundSchema: z.ZodType<LogFeedbackRequestBody$Outbound, z.ZodTypeDef, LogFeedbackRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackRequestBody$ {
    /** @deprecated use `LogFeedbackRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogFeedbackRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogFeedbackRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogFeedbackRequestBody$Outbound, z.ZodTypeDef, LogFeedbackRequestBody>;
    /** @deprecated use `LogFeedbackRequestBody$Outbound` instead. */
    type Outbound = LogFeedbackRequestBody$Outbound;
}
export declare function logFeedbackRequestBodyToJSON(logFeedbackRequestBody: LogFeedbackRequestBody): string;
export declare function logFeedbackRequestBodyFromJSON(jsonString: string): SafeParseResult<LogFeedbackRequestBody, SDKValidationError>;
/** @internal */
export declare const LogFeedbackType$inboundSchema: z.ZodNativeEnum<typeof LogFeedbackType>;
/** @internal */
export declare const LogFeedbackType$outboundSchema: z.ZodNativeEnum<typeof LogFeedbackType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackType$ {
    /** @deprecated use `LogFeedbackType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
    /** @deprecated use `LogFeedbackType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Positive: "positive";
        readonly Negative: "negative";
    }>;
}
/** @internal */
export declare const LogFeedbackReasons$inboundSchema: z.ZodType<LogFeedbackReasons, z.ZodTypeDef, unknown>;
/** @internal */
export type LogFeedbackReasons$Outbound = {
    label: string;
    details: string;
};
/** @internal */
export declare const LogFeedbackReasons$outboundSchema: z.ZodType<LogFeedbackReasons$Outbound, z.ZodTypeDef, LogFeedbackReasons>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackReasons$ {
    /** @deprecated use `LogFeedbackReasons$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogFeedbackReasons, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogFeedbackReasons$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogFeedbackReasons$Outbound, z.ZodTypeDef, LogFeedbackReasons>;
    /** @deprecated use `LogFeedbackReasons$Outbound` instead. */
    type Outbound = LogFeedbackReasons$Outbound;
}
export declare function logFeedbackReasonsToJSON(logFeedbackReasons: LogFeedbackReasons): string;
export declare function logFeedbackReasonsFromJSON(jsonString: string): SafeParseResult<LogFeedbackReasons, SDKValidationError>;
/** @internal */
export declare const LogFeedbackId$inboundSchema: z.ZodType<LogFeedbackId, z.ZodTypeDef, unknown>;
/** @internal */
export type LogFeedbackId$Outbound = string | number;
/** @internal */
export declare const LogFeedbackId$outboundSchema: z.ZodType<LogFeedbackId$Outbound, z.ZodTypeDef, LogFeedbackId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackId$ {
    /** @deprecated use `LogFeedbackId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogFeedbackId, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogFeedbackId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogFeedbackId$Outbound, z.ZodTypeDef, LogFeedbackId>;
    /** @deprecated use `LogFeedbackId$Outbound` instead. */
    type Outbound = LogFeedbackId$Outbound;
}
export declare function logFeedbackIdToJSON(logFeedbackId: LogFeedbackId): string;
export declare function logFeedbackIdFromJSON(jsonString: string): SafeParseResult<LogFeedbackId, SDKValidationError>;
/** @internal */
export declare const LogFeedbackUserId$inboundSchema: z.ZodType<LogFeedbackUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type LogFeedbackUserId$Outbound = string | number;
/** @internal */
export declare const LogFeedbackUserId$outboundSchema: z.ZodType<LogFeedbackUserId$Outbound, z.ZodTypeDef, LogFeedbackUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackUserId$ {
    /** @deprecated use `LogFeedbackUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogFeedbackUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogFeedbackUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogFeedbackUserId$Outbound, z.ZodTypeDef, LogFeedbackUserId>;
    /** @deprecated use `LogFeedbackUserId$Outbound` instead. */
    type Outbound = LogFeedbackUserId$Outbound;
}
export declare function logFeedbackUserIdToJSON(logFeedbackUserId: LogFeedbackUserId): string;
export declare function logFeedbackUserIdFromJSON(jsonString: string): SafeParseResult<LogFeedbackUserId, SDKValidationError>;
/** @internal */
export declare const LogFeedbackUserType$inboundSchema: z.ZodNativeEnum<typeof LogFeedbackUserType>;
/** @internal */
export declare const LogFeedbackUserType$outboundSchema: z.ZodNativeEnum<typeof LogFeedbackUserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackUserType$ {
    /** @deprecated use `LogFeedbackUserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `LogFeedbackUserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const LogFeedbackUserProperties$inboundSchema: z.ZodType<LogFeedbackUserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type LogFeedbackUserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const LogFeedbackUserProperties$outboundSchema: z.ZodType<LogFeedbackUserProperties$Outbound, z.ZodTypeDef, LogFeedbackUserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackUserProperties$ {
    /** @deprecated use `LogFeedbackUserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogFeedbackUserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogFeedbackUserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogFeedbackUserProperties$Outbound, z.ZodTypeDef, LogFeedbackUserProperties>;
    /** @deprecated use `LogFeedbackUserProperties$Outbound` instead. */
    type Outbound = LogFeedbackUserProperties$Outbound;
}
export declare function logFeedbackUserPropertiesToJSON(logFeedbackUserProperties: LogFeedbackUserProperties): string;
export declare function logFeedbackUserPropertiesFromJSON(jsonString: string): SafeParseResult<LogFeedbackUserProperties, SDKValidationError>;
/** @internal */
export declare const LogFeedbackResponseBody$inboundSchema: z.ZodType<LogFeedbackResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type LogFeedbackResponseBody$Outbound = {
    id: string;
    type: string;
    messageId: string;
    createdAt?: string | null | undefined;
    reasons?: Array<LogFeedbackReasons$Outbound> | null | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: LogFeedbackUserProperties$Outbound | null | undefined;
};
/** @internal */
export declare const LogFeedbackResponseBody$outboundSchema: z.ZodType<LogFeedbackResponseBody$Outbound, z.ZodTypeDef, LogFeedbackResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LogFeedbackResponseBody$ {
    /** @deprecated use `LogFeedbackResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LogFeedbackResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `LogFeedbackResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LogFeedbackResponseBody$Outbound, z.ZodTypeDef, LogFeedbackResponseBody>;
    /** @deprecated use `LogFeedbackResponseBody$Outbound` instead. */
    type Outbound = LogFeedbackResponseBody$Outbound;
}
export declare function logFeedbackResponseBodyToJSON(logFeedbackResponseBody: LogFeedbackResponseBody): string;
export declare function logFeedbackResponseBodyFromJSON(jsonString: string): SafeParseResult<LogFeedbackResponseBody, SDKValidationError>;
//# sourceMappingURL=logfeedback.d.ts.map