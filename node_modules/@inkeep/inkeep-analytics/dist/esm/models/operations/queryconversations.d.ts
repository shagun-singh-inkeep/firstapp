import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type QueryConversationsSecurity = {
    webIntegrationKey?: string | undefined;
    apiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const QueryConversationsSecurity$inboundSchema: z.ZodType<QueryConversationsSecurity, z.ZodTypeDef, unknown>;
/** @internal */
export type QueryConversationsSecurity$Outbound = {
    WebIntegrationKey?: string | undefined;
    ApiIntegrationKey?: string | undefined;
};
/** @internal */
export declare const QueryConversationsSecurity$outboundSchema: z.ZodType<QueryConversationsSecurity$Outbound, z.ZodTypeDef, QueryConversationsSecurity>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QueryConversationsSecurity$ {
    /** @deprecated use `QueryConversationsSecurity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryConversationsSecurity, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryConversationsSecurity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryConversationsSecurity$Outbound, z.ZodTypeDef, QueryConversationsSecurity>;
    /** @deprecated use `QueryConversationsSecurity$Outbound` instead. */
    type Outbound = QueryConversationsSecurity$Outbound;
}
export declare function queryConversationsSecurityToJSON(queryConversationsSecurity: QueryConversationsSecurity): string;
export declare function queryConversationsSecurityFromJSON(jsonString: string): SafeParseResult<QueryConversationsSecurity, SDKValidationError>;
//# sourceMappingURL=queryconversations.d.ts.map