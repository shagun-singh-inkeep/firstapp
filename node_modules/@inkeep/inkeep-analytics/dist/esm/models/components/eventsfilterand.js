/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { EventsFilter$inboundSchema, EventsFilter$outboundSchema, } from "./eventsfilter.js";
/** @internal */
export const EventsFilterANDAND$inboundSchema = z.lazy(() => EventsFilter$inboundSchema);
/** @internal */
export const EventsFilterANDAND$outboundSchema = z.lazy(() => EventsFilter$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsFilterANDAND$;
(function (EventsFilterANDAND$) {
    /** @deprecated use `EventsFilterANDAND$inboundSchema` instead. */
    EventsFilterANDAND$.inboundSchema = EventsFilterANDAND$inboundSchema;
    /** @deprecated use `EventsFilterANDAND$outboundSchema` instead. */
    EventsFilterANDAND$.outboundSchema = EventsFilterANDAND$outboundSchema;
})(EventsFilterANDAND$ || (EventsFilterANDAND$ = {}));
export function eventsFilterANDANDToJSON(eventsFilterANDAND) {
    return JSON.stringify(EventsFilterANDAND$outboundSchema.parse(eventsFilterANDAND));
}
export function eventsFilterANDANDFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsFilterANDAND$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterANDAND' from JSON`);
}
/** @internal */
export const EventsFilterAND$inboundSchema = z.object({
    and: z.array(z.lazy(() => EventsFilter$inboundSchema)),
});
/** @internal */
export const EventsFilterAND$outboundSchema = z.object({
    and: z.array(z.lazy(() => EventsFilter$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsFilterAND$;
(function (EventsFilterAND$) {
    /** @deprecated use `EventsFilterAND$inboundSchema` instead. */
    EventsFilterAND$.inboundSchema = EventsFilterAND$inboundSchema;
    /** @deprecated use `EventsFilterAND$outboundSchema` instead. */
    EventsFilterAND$.outboundSchema = EventsFilterAND$outboundSchema;
})(EventsFilterAND$ || (EventsFilterAND$ = {}));
export function eventsFilterANDToJSON(eventsFilterAND) {
    return JSON.stringify(EventsFilterAND$outboundSchema.parse(eventsFilterAND));
}
export function eventsFilterANDFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsFilterAND$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterAND' from JSON`);
}
//# sourceMappingURL=eventsfilterand.js.map