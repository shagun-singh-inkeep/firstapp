/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { CreateOpenAIConversation$inboundSchema, CreateOpenAIConversation$outboundSchema, } from "./createopenaiconversation.js";
import { CreateSupportCopilotConversation$inboundSchema, CreateSupportCopilotConversation$outboundSchema, } from "./createsupportcopilotconversation.js";
import { CreateSupportTicketConversation$inboundSchema, CreateSupportTicketConversation$outboundSchema, } from "./createsupportticketconversation.js";
/** @internal */
export const CreateConversation$inboundSchema = z.union([
    CreateOpenAIConversation$inboundSchema.and(z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
    }))),
    CreateSupportTicketConversation$inboundSchema.and(z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
    }))),
    CreateSupportCopilotConversation$inboundSchema.and(z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
    }))),
]);
/** @internal */
export const CreateConversation$outboundSchema = z.union([
    CreateOpenAIConversation$outboundSchema.and(z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
    }))),
    CreateSupportTicketConversation$outboundSchema.and(z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
    }))),
    CreateSupportCopilotConversation$outboundSchema.and(z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateConversation$;
(function (CreateConversation$) {
    /** @deprecated use `CreateConversation$inboundSchema` instead. */
    CreateConversation$.inboundSchema = CreateConversation$inboundSchema;
    /** @deprecated use `CreateConversation$outboundSchema` instead. */
    CreateConversation$.outboundSchema = CreateConversation$outboundSchema;
})(CreateConversation$ || (CreateConversation$ = {}));
export function createConversationToJSON(createConversation) {
    return JSON.stringify(CreateConversation$outboundSchema.parse(createConversation));
}
export function createConversationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateConversation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateConversation' from JSON`);
}
//# sourceMappingURL=createconversation.js.map