/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { QueryConversationsResponseData$inboundSchema, QueryConversationsResponseData$outboundSchema, } from "./queryconversationsresponsedata.js";
/**
 * Status of the response
 */
export const Status = {
    Ok: "ok",
};
/** @internal */
export const Status$inboundSchema = z
    .nativeEnum(Status);
/** @internal */
export const Status$outboundSchema = Status$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = Status$outboundSchema;
})(Status$ || (Status$ = {}));
/** @internal */
export const QueryConversationsResponseBody$inboundSchema = z.object({
    status: Status$inboundSchema,
    data: QueryConversationsResponseData$inboundSchema,
});
/** @internal */
export const QueryConversationsResponseBody$outboundSchema = z.object({
    status: Status$outboundSchema,
    data: QueryConversationsResponseData$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryConversationsResponseBody$;
(function (QueryConversationsResponseBody$) {
    /** @deprecated use `QueryConversationsResponseBody$inboundSchema` instead. */
    QueryConversationsResponseBody$.inboundSchema = QueryConversationsResponseBody$inboundSchema;
    /** @deprecated use `QueryConversationsResponseBody$outboundSchema` instead. */
    QueryConversationsResponseBody$.outboundSchema = QueryConversationsResponseBody$outboundSchema;
})(QueryConversationsResponseBody$ || (QueryConversationsResponseBody$ = {}));
export function queryConversationsResponseBodyToJSON(queryConversationsResponseBody) {
    return JSON.stringify(QueryConversationsResponseBody$outboundSchema.parse(queryConversationsResponseBody));
}
export function queryConversationsResponseBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryConversationsResponseBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryConversationsResponseBody' from JSON`);
}
//# sourceMappingURL=queryconversationsresponsebody.js.map