/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SelectConversationEventUserType = {
    User: "user",
    Member: "member",
};
export const SelectConversationEventEntityType = {
    Conversation: "conversation",
};
/** @internal */
export const SelectConversationEventId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const SelectConversationEventId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectConversationEventId$;
(function (SelectConversationEventId$) {
    /** @deprecated use `SelectConversationEventId$inboundSchema` instead. */
    SelectConversationEventId$.inboundSchema = SelectConversationEventId$inboundSchema;
    /** @deprecated use `SelectConversationEventId$outboundSchema` instead. */
    SelectConversationEventId$.outboundSchema = SelectConversationEventId$outboundSchema;
})(SelectConversationEventId$ || (SelectConversationEventId$ = {}));
export function selectConversationEventIdToJSON(selectConversationEventId) {
    return JSON.stringify(SelectConversationEventId$outboundSchema.parse(selectConversationEventId));
}
export function selectConversationEventIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SelectConversationEventId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectConversationEventId' from JSON`);
}
/** @internal */
export const SelectConversationEventUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const SelectConversationEventUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectConversationEventUserId$;
(function (SelectConversationEventUserId$) {
    /** @deprecated use `SelectConversationEventUserId$inboundSchema` instead. */
    SelectConversationEventUserId$.inboundSchema = SelectConversationEventUserId$inboundSchema;
    /** @deprecated use `SelectConversationEventUserId$outboundSchema` instead. */
    SelectConversationEventUserId$.outboundSchema = SelectConversationEventUserId$outboundSchema;
})(SelectConversationEventUserId$ || (SelectConversationEventUserId$ = {}));
export function selectConversationEventUserIdToJSON(selectConversationEventUserId) {
    return JSON.stringify(SelectConversationEventUserId$outboundSchema.parse(selectConversationEventUserId));
}
export function selectConversationEventUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SelectConversationEventUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectConversationEventUserId' from JSON`);
}
/** @internal */
export const SelectConversationEventUserType$inboundSchema = z.nativeEnum(SelectConversationEventUserType);
/** @internal */
export const SelectConversationEventUserType$outboundSchema = SelectConversationEventUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectConversationEventUserType$;
(function (SelectConversationEventUserType$) {
    /** @deprecated use `SelectConversationEventUserType$inboundSchema` instead. */
    SelectConversationEventUserType$.inboundSchema = SelectConversationEventUserType$inboundSchema;
    /** @deprecated use `SelectConversationEventUserType$outboundSchema` instead. */
    SelectConversationEventUserType$.outboundSchema = SelectConversationEventUserType$outboundSchema;
})(SelectConversationEventUserType$ || (SelectConversationEventUserType$ = {}));
/** @internal */
export const SelectConversationEventUserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SelectConversationEventUserType$inboundSchema)
        .optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const SelectConversationEventUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SelectConversationEventUserType$outboundSchema)
        .optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectConversationEventUserProperties$;
(function (SelectConversationEventUserProperties$) {
    /** @deprecated use `SelectConversationEventUserProperties$inboundSchema` instead. */
    SelectConversationEventUserProperties$.inboundSchema = SelectConversationEventUserProperties$inboundSchema;
    /** @deprecated use `SelectConversationEventUserProperties$outboundSchema` instead. */
    SelectConversationEventUserProperties$.outboundSchema = SelectConversationEventUserProperties$outboundSchema;
})(SelectConversationEventUserProperties$ || (SelectConversationEventUserProperties$ = {}));
export function selectConversationEventUserPropertiesToJSON(selectConversationEventUserProperties) {
    return JSON.stringify(SelectConversationEventUserProperties$outboundSchema.parse(selectConversationEventUserProperties));
}
export function selectConversationEventUserPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SelectConversationEventUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectConversationEventUserProperties' from JSON`);
}
/** @internal */
export const SelectConversationEventEntityType$inboundSchema = z.nativeEnum(SelectConversationEventEntityType);
/** @internal */
export const SelectConversationEventEntityType$outboundSchema = SelectConversationEventEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectConversationEventEntityType$;
(function (SelectConversationEventEntityType$) {
    /** @deprecated use `SelectConversationEventEntityType$inboundSchema` instead. */
    SelectConversationEventEntityType$.inboundSchema = SelectConversationEventEntityType$inboundSchema;
    /** @deprecated use `SelectConversationEventEntityType$outboundSchema` instead. */
    SelectConversationEventEntityType$.outboundSchema = SelectConversationEventEntityType$outboundSchema;
})(SelectConversationEventEntityType$ || (SelectConversationEventEntityType$ = {}));
/** @internal */
export const SelectConversationEvent$inboundSchema = z.object({
    id: z.string(),
    type: z.string(),
    conversationId: z.string(),
    createdAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => SelectConversationEventUserProperties$inboundSchema)).optional(),
    entityType: SelectConversationEventEntityType$inboundSchema,
});
/** @internal */
export const SelectConversationEvent$outboundSchema = z.object({
    id: z.string(),
    type: z.string(),
    conversationId: z.string(),
    createdAt: z.string(),
    projectId: z.nullable(z.string()),
    integrationId: z.nullable(z.string()),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => SelectConversationEventUserProperties$outboundSchema)).optional(),
    entityType: SelectConversationEventEntityType$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectConversationEvent$;
(function (SelectConversationEvent$) {
    /** @deprecated use `SelectConversationEvent$inboundSchema` instead. */
    SelectConversationEvent$.inboundSchema = SelectConversationEvent$inboundSchema;
    /** @deprecated use `SelectConversationEvent$outboundSchema` instead. */
    SelectConversationEvent$.outboundSchema = SelectConversationEvent$outboundSchema;
})(SelectConversationEvent$ || (SelectConversationEvent$ = {}));
export function selectConversationEventToJSON(selectConversationEvent) {
    return JSON.stringify(SelectConversationEvent$outboundSchema.parse(selectConversationEvent));
}
export function selectConversationEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SelectConversationEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectConversationEvent' from JSON`);
}
//# sourceMappingURL=selectconversationevent.js.map