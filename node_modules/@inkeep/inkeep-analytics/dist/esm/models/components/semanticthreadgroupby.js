/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { SemanticThreadField$inboundSchema, SemanticThreadField$outboundSchema, } from "./semanticthreadfield.js";
/** @internal */
export const SemanticThreadGroupBy$inboundSchema = z.object({
    field: SemanticThreadField$inboundSchema,
    path: z.array(z.string()).optional(),
    includeInSelect: z.boolean().default(true),
});
/** @internal */
export const SemanticThreadGroupBy$outboundSchema = z.object({
    field: SemanticThreadField$outboundSchema,
    path: z.array(z.string()).optional(),
    includeInSelect: z.boolean().default(true),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadGroupBy$;
(function (SemanticThreadGroupBy$) {
    /** @deprecated use `SemanticThreadGroupBy$inboundSchema` instead. */
    SemanticThreadGroupBy$.inboundSchema = SemanticThreadGroupBy$inboundSchema;
    /** @deprecated use `SemanticThreadGroupBy$outboundSchema` instead. */
    SemanticThreadGroupBy$.outboundSchema = SemanticThreadGroupBy$outboundSchema;
})(SemanticThreadGroupBy$ || (SemanticThreadGroupBy$ = {}));
export function semanticThreadGroupByToJSON(semanticThreadGroupBy) {
    return JSON.stringify(SemanticThreadGroupBy$outboundSchema.parse(semanticThreadGroupBy));
}
export function semanticThreadGroupByFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SemanticThreadGroupBy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadGroupBy' from JSON`);
}
//# sourceMappingURL=semanticthreadgroupby.js.map