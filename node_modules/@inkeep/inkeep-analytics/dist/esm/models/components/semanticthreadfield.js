/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
/**
 * Available fields for SemanticThread
 */
export const SemanticThreadField = {
    Id: "id",
    MessageIds: "messageIds",
    MessagesCount: "messagesCount",
    OrganizationId: "organizationId",
    Question: "question",
    QuestionLength: "questionLength",
    Answer: "answer",
    IsOnTopic: "isOnTopic",
    IsClear: "isClear",
    IsDocumented: "isDocumented",
    IsFeatureSupported: "isFeatureSupported",
    IsAnswerConfident: "isAnswerConfident",
    GapSummary: "gapSummary",
    Subject: "subject",
    Category: "category",
    Languages: "languages",
    FirstPartyEntities: "firstPartyEntities",
    ThirdPartyEntities: "thirdPartyEntities",
    Emotion: "emotion",
    Sentiment: "sentiment",
    QuestionType: "questionType",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    Properties: "properties",
    UserProperties: "userProperties",
    FirstMessageTime: "firstMessageTime",
    LastMessageTime: "lastMessageTime",
    LastUpdated: "lastUpdated",
    HasPositiveFeedback: "hasPositiveFeedback",
    HasNegativeFeedback: "hasNegativeFeedback",
    ConversationIds: "conversationIds",
    AreAIAnnotationsVerified: "areAIAnnotationsVerified",
    IsInitialQuestionAnswer: "isInitialQuestionAnswer",
};
/** @internal */
export const SemanticThreadField$inboundSchema = z.nativeEnum(SemanticThreadField);
/** @internal */
export const SemanticThreadField$outboundSchema = SemanticThreadField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadField$;
(function (SemanticThreadField$) {
    /** @deprecated use `SemanticThreadField$inboundSchema` instead. */
    SemanticThreadField$.inboundSchema = SemanticThreadField$inboundSchema;
    /** @deprecated use `SemanticThreadField$outboundSchema` instead. */
    SemanticThreadField$.outboundSchema = SemanticThreadField$outboundSchema;
})(SemanticThreadField$ || (SemanticThreadField$ = {}));
//# sourceMappingURL=semanticthreadfield.js.map