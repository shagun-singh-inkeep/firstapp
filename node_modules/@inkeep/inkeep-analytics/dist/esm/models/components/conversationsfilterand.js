/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ConversationsFilter$inboundSchema, ConversationsFilter$outboundSchema, } from "./conversationsfilter.js";
/** @internal */
export const And$inboundSchema = z.lazy(() => ConversationsFilter$inboundSchema);
/** @internal */
export const And$outboundSchema = z
    .lazy(() => ConversationsFilter$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var And$;
(function (And$) {
    /** @deprecated use `And$inboundSchema` instead. */
    And$.inboundSchema = And$inboundSchema;
    /** @deprecated use `And$outboundSchema` instead. */
    And$.outboundSchema = And$outboundSchema;
})(And$ || (And$ = {}));
export function andToJSON(and) {
    return JSON.stringify(And$outboundSchema.parse(and));
}
export function andFromJSON(jsonString) {
    return safeParse(jsonString, (x) => And$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'And' from JSON`);
}
/** @internal */
export const ConversationsFilterAND$inboundSchema = z.object({
    and: z.array(z.lazy(() => ConversationsFilter$inboundSchema)),
});
/** @internal */
export const ConversationsFilterAND$outboundSchema = z.object({
    and: z.array(z.lazy(() => ConversationsFilter$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConversationsFilterAND$;
(function (ConversationsFilterAND$) {
    /** @deprecated use `ConversationsFilterAND$inboundSchema` instead. */
    ConversationsFilterAND$.inboundSchema = ConversationsFilterAND$inboundSchema;
    /** @deprecated use `ConversationsFilterAND$outboundSchema` instead. */
    ConversationsFilterAND$.outboundSchema = ConversationsFilterAND$outboundSchema;
})(ConversationsFilterAND$ || (ConversationsFilterAND$ = {}));
export function conversationsFilterANDToJSON(conversationsFilterAND) {
    return JSON.stringify(ConversationsFilterAND$outboundSchema.parse(conversationsFilterAND));
}
export function conversationsFilterANDFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConversationsFilterAND$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConversationsFilterAND' from JSON`);
}
//# sourceMappingURL=conversationsfilterand.js.map