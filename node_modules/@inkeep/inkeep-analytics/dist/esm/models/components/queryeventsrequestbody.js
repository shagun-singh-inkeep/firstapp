/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { EventsFilter$inboundSchema, EventsFilter$outboundSchema, } from "./eventsfilter.js";
import { EventsGroupBy$inboundSchema, EventsGroupBy$outboundSchema, } from "./eventsgroupby.js";
import { EventsOrderBy$inboundSchema, EventsOrderBy$outboundSchema, } from "./eventsorderby.js";
import { EventsSelection$inboundSchema, EventsSelection$outboundSchema, } from "./eventsselection.js";
/** @internal */
export const QueryEventsRequestBody$inboundSchema = z.object({
    select: z.array(EventsSelection$inboundSchema).optional(),
    groupBy: z.array(EventsGroupBy$inboundSchema).optional(),
    where: EventsFilter$inboundSchema.optional(),
    orderBy: z.array(EventsOrderBy$inboundSchema).optional(),
    notes: z.string().optional(),
});
/** @internal */
export const QueryEventsRequestBody$outboundSchema = z.object({
    select: z.array(EventsSelection$outboundSchema).optional(),
    groupBy: z.array(EventsGroupBy$outboundSchema).optional(),
    where: EventsFilter$outboundSchema.optional(),
    orderBy: z.array(EventsOrderBy$outboundSchema).optional(),
    notes: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryEventsRequestBody$;
(function (QueryEventsRequestBody$) {
    /** @deprecated use `QueryEventsRequestBody$inboundSchema` instead. */
    QueryEventsRequestBody$.inboundSchema = QueryEventsRequestBody$inboundSchema;
    /** @deprecated use `QueryEventsRequestBody$outboundSchema` instead. */
    QueryEventsRequestBody$.outboundSchema = QueryEventsRequestBody$outboundSchema;
})(QueryEventsRequestBody$ || (QueryEventsRequestBody$ = {}));
export function queryEventsRequestBodyToJSON(queryEventsRequestBody) {
    return JSON.stringify(QueryEventsRequestBody$outboundSchema.parse(queryEventsRequestBody));
}
export function queryEventsRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryEventsRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryEventsRequestBody' from JSON`);
}
//# sourceMappingURL=queryeventsrequestbody.js.map