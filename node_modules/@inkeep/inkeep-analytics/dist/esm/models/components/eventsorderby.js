/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
export const EventsOrderByField = {
    Id: "id",
    OrganizationId: "organizationId",
    MessageId: "messageId",
    ConversationId: "conversationId",
    CreatedAt: "createdAt",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    EventType: "eventType",
    Type: "type",
    SearchQuery: "searchQuery",
    Properties: "properties",
    UserProperties: "userProperties",
    IdHour: "id_hour",
    IdDay: "id_day",
    IdWeek: "id_week",
    IdMonth: "id_month",
    OrganizationIdHour: "organizationId_hour",
    OrganizationIdDay: "organizationId_day",
    OrganizationIdWeek: "organizationId_week",
    OrganizationIdMonth: "organizationId_month",
    MessageIdHour: "messageId_hour",
    MessageIdDay: "messageId_day",
    MessageIdWeek: "messageId_week",
    MessageIdMonth: "messageId_month",
    ConversationIdHour: "conversationId_hour",
    ConversationIdDay: "conversationId_day",
    ConversationIdWeek: "conversationId_week",
    ConversationIdMonth: "conversationId_month",
    CreatedAtHour: "createdAt_hour",
    CreatedAtDay: "createdAt_day",
    CreatedAtWeek: "createdAt_week",
    CreatedAtMonth: "createdAt_month",
    ProjectIdHour: "projectId_hour",
    ProjectIdDay: "projectId_day",
    ProjectIdWeek: "projectId_week",
    ProjectIdMonth: "projectId_month",
    IntegrationIdHour: "integrationId_hour",
    IntegrationIdDay: "integrationId_day",
    IntegrationIdWeek: "integrationId_week",
    IntegrationIdMonth: "integrationId_month",
    EventTypeHour: "eventType_hour",
    EventTypeDay: "eventType_day",
    EventTypeWeek: "eventType_week",
    EventTypeMonth: "eventType_month",
    TypeHour: "type_hour",
    TypeDay: "type_day",
    TypeWeek: "type_week",
    TypeMonth: "type_month",
    SearchQueryHour: "searchQuery_hour",
    SearchQueryDay: "searchQuery_day",
    SearchQueryWeek: "searchQuery_week",
    SearchQueryMonth: "searchQuery_month",
    PropertiesHour: "properties_hour",
    PropertiesDay: "properties_day",
    PropertiesWeek: "properties_week",
    PropertiesMonth: "properties_month",
    UserPropertiesHour: "userProperties_hour",
    UserPropertiesDay: "userProperties_day",
    UserPropertiesWeek: "userProperties_week",
    UserPropertiesMonth: "userProperties_month",
    SumId: "sum_id",
    SumOrganizationId: "sum_organizationId",
    SumMessageId: "sum_messageId",
    SumConversationId: "sum_conversationId",
    SumCreatedAt: "sum_createdAt",
    SumProjectId: "sum_projectId",
    SumIntegrationId: "sum_integrationId",
    SumEventType: "sum_eventType",
    SumType: "sum_type",
    SumSearchQuery: "sum_searchQuery",
    SumProperties: "sum_properties",
    SumUserProperties: "sum_userProperties",
    CountId: "count_id",
    CountOrganizationId: "count_organizationId",
    CountMessageId: "count_messageId",
    CountConversationId: "count_conversationId",
    CountCreatedAt: "count_createdAt",
    CountProjectId: "count_projectId",
    CountIntegrationId: "count_integrationId",
    CountEventType: "count_eventType",
    CountType: "count_type",
    CountSearchQuery: "count_searchQuery",
    CountProperties: "count_properties",
    CountUserProperties: "count_userProperties",
    AvgId: "avg_id",
    AvgOrganizationId: "avg_organizationId",
    AvgMessageId: "avg_messageId",
    AvgConversationId: "avg_conversationId",
    AvgCreatedAt: "avg_createdAt",
    AvgProjectId: "avg_projectId",
    AvgIntegrationId: "avg_integrationId",
    AvgEventType: "avg_eventType",
    AvgType: "avg_type",
    AvgSearchQuery: "avg_searchQuery",
    AvgProperties: "avg_properties",
    AvgUserProperties: "avg_userProperties",
    MinId: "min_id",
    MinOrganizationId: "min_organizationId",
    MinMessageId: "min_messageId",
    MinConversationId: "min_conversationId",
    MinCreatedAt: "min_createdAt",
    MinProjectId: "min_projectId",
    MinIntegrationId: "min_integrationId",
    MinEventType: "min_eventType",
    MinType: "min_type",
    MinSearchQuery: "min_searchQuery",
    MinProperties: "min_properties",
    MinUserProperties: "min_userProperties",
    MaxId: "max_id",
    MaxOrganizationId: "max_organizationId",
    MaxMessageId: "max_messageId",
    MaxConversationId: "max_conversationId",
    MaxCreatedAt: "max_createdAt",
    MaxProjectId: "max_projectId",
    MaxIntegrationId: "max_integrationId",
    MaxEventType: "max_eventType",
    MaxType: "max_type",
    MaxSearchQuery: "max_searchQuery",
    MaxProperties: "max_properties",
    MaxUserProperties: "max_userProperties",
};
export const EventsOrderByDirection = {
    Asc: "asc",
    Desc: "desc",
};
/** @internal */
export const EventsOrderByField$inboundSchema = z.nativeEnum(EventsOrderByField);
/** @internal */
export const EventsOrderByField$outboundSchema = EventsOrderByField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsOrderByField$;
(function (EventsOrderByField$) {
    /** @deprecated use `EventsOrderByField$inboundSchema` instead. */
    EventsOrderByField$.inboundSchema = EventsOrderByField$inboundSchema;
    /** @deprecated use `EventsOrderByField$outboundSchema` instead. */
    EventsOrderByField$.outboundSchema = EventsOrderByField$outboundSchema;
})(EventsOrderByField$ || (EventsOrderByField$ = {}));
/** @internal */
export const EventsOrderByDirection$inboundSchema = z.nativeEnum(EventsOrderByDirection);
/** @internal */
export const EventsOrderByDirection$outboundSchema = EventsOrderByDirection$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsOrderByDirection$;
(function (EventsOrderByDirection$) {
    /** @deprecated use `EventsOrderByDirection$inboundSchema` instead. */
    EventsOrderByDirection$.inboundSchema = EventsOrderByDirection$inboundSchema;
    /** @deprecated use `EventsOrderByDirection$outboundSchema` instead. */
    EventsOrderByDirection$.outboundSchema = EventsOrderByDirection$outboundSchema;
})(EventsOrderByDirection$ || (EventsOrderByDirection$ = {}));
/** @internal */
export const EventsOrderBy$inboundSchema = z.object({
    field: EventsOrderByField$inboundSchema,
    direction: EventsOrderByDirection$inboundSchema,
});
/** @internal */
export const EventsOrderBy$outboundSchema = z.object({
    field: EventsOrderByField$outboundSchema,
    direction: EventsOrderByDirection$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsOrderBy$;
(function (EventsOrderBy$) {
    /** @deprecated use `EventsOrderBy$inboundSchema` instead. */
    EventsOrderBy$.inboundSchema = EventsOrderBy$inboundSchema;
    /** @deprecated use `EventsOrderBy$outboundSchema` instead. */
    EventsOrderBy$.outboundSchema = EventsOrderBy$outboundSchema;
})(EventsOrderBy$ || (EventsOrderBy$ = {}));
export function eventsOrderByToJSON(eventsOrderBy) {
    return JSON.stringify(EventsOrderBy$outboundSchema.parse(eventsOrderBy));
}
export function eventsOrderByFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsOrderBy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsOrderBy' from JSON`);
}
//# sourceMappingURL=eventsorderby.js.map