/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ConversationsField$inboundSchema, ConversationsField$outboundSchema, } from "./conversationsfield.js";
import { FilterOperator$inboundSchema, FilterOperator$outboundSchema, } from "./filteroperator.js";
/** @internal */
export const Four$inboundSchema = z
    .union([z.string(), z.number(), z.boolean()]);
/** @internal */
export const Four$outboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Four$;
(function (Four$) {
    /** @deprecated use `Four$inboundSchema` instead. */
    Four$.inboundSchema = Four$inboundSchema;
    /** @deprecated use `Four$outboundSchema` instead. */
    Four$.outboundSchema = Four$outboundSchema;
})(Four$ || (Four$ = {}));
export function fourToJSON(four) {
    return JSON.stringify(Four$outboundSchema.parse(four));
}
export function fourFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Four$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Four' from JSON`);
}
/** @internal */
export const Value$inboundSchema = z
    .union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/** @internal */
export const Value$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Value$;
(function (Value$) {
    /** @deprecated use `Value$inboundSchema` instead. */
    Value$.inboundSchema = Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    Value$.outboundSchema = Value$outboundSchema;
})(Value$ || (Value$ = {}));
export function valueToJSON(value) {
    return JSON.stringify(Value$outboundSchema.parse(value));
}
export function valueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Value$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Value' from JSON`);
}
/** @internal */
export const Seven$inboundSchema = z
    .object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/** @internal */
export const Seven$outboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Seven$;
(function (Seven$) {
    /** @deprecated use `Seven$inboundSchema` instead. */
    Seven$.inboundSchema = Seven$inboundSchema;
    /** @deprecated use `Seven$outboundSchema` instead. */
    Seven$.outboundSchema = Seven$outboundSchema;
})(Seven$ || (Seven$ = {}));
export function sevenToJSON(seven) {
    return JSON.stringify(Seven$outboundSchema.parse(seven));
}
export function sevenFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Seven$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Seven' from JSON`);
}
/** @internal */
export const Condition$inboundSchema = z.object({
    field: ConversationsField$inboundSchema,
    operator: FilterOperator$inboundSchema,
    value: z.any().optional(),
});
/** @internal */
export const Condition$outboundSchema = z.object({
    field: ConversationsField$outboundSchema,
    operator: FilterOperator$outboundSchema,
    value: z.any().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Condition$;
(function (Condition$) {
    /** @deprecated use `Condition$inboundSchema` instead. */
    Condition$.inboundSchema = Condition$inboundSchema;
    /** @deprecated use `Condition$outboundSchema` instead. */
    Condition$.outboundSchema = Condition$outboundSchema;
})(Condition$ || (Condition$ = {}));
export function conditionToJSON(condition) {
    return JSON.stringify(Condition$outboundSchema.parse(condition));
}
export function conditionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Condition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Condition' from JSON`);
}
/** @internal */
export const ConversationsFilterCondition$inboundSchema = z.object({
    condition: z.lazy(() => Condition$inboundSchema),
});
/** @internal */
export const ConversationsFilterCondition$outboundSchema = z.object({
    condition: z.lazy(() => Condition$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConversationsFilterCondition$;
(function (ConversationsFilterCondition$) {
    /** @deprecated use `ConversationsFilterCondition$inboundSchema` instead. */
    ConversationsFilterCondition$.inboundSchema = ConversationsFilterCondition$inboundSchema;
    /** @deprecated use `ConversationsFilterCondition$outboundSchema` instead. */
    ConversationsFilterCondition$.outboundSchema = ConversationsFilterCondition$outboundSchema;
})(ConversationsFilterCondition$ || (ConversationsFilterCondition$ = {}));
export function conversationsFilterConditionToJSON(conversationsFilterCondition) {
    return JSON.stringify(ConversationsFilterCondition$outboundSchema.parse(conversationsFilterCondition));
}
export function conversationsFilterConditionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConversationsFilterCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConversationsFilterCondition' from JSON`);
}
//# sourceMappingURL=conversationsfiltercondition.js.map