/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { SelectConversationEvent$inboundSchema, SelectConversationEvent$outboundSchema, } from "./selectconversationevent.js";
import { SelectMessageEvent$inboundSchema, SelectMessageEvent$outboundSchema, } from "./selectmessageevent.js";
import { SelectSearchEvent$inboundSchema, SelectSearchEvent$outboundSchema, } from "./selectsearchevent.js";
/** @internal */
export const SelectEvent$inboundSchema = z.union([
    SelectMessageEvent$inboundSchema.and(z.object({ entityType: z.literal("message") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    SelectConversationEvent$inboundSchema.and(z.object({ entityType: z.literal("conversation") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    SelectSearchEvent$inboundSchema.and(z.object({ entityType: z.literal("search") }).transform((v) => ({
        entityType: v.entityType,
    }))),
]);
/** @internal */
export const SelectEvent$outboundSchema = z.union([
    SelectMessageEvent$outboundSchema.and(z.object({ entityType: z.literal("message") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    SelectConversationEvent$outboundSchema.and(z.object({ entityType: z.literal("conversation") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    SelectSearchEvent$outboundSchema.and(z.object({ entityType: z.literal("search") }).transform((v) => ({
        entityType: v.entityType,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SelectEvent$;
(function (SelectEvent$) {
    /** @deprecated use `SelectEvent$inboundSchema` instead. */
    SelectEvent$.inboundSchema = SelectEvent$inboundSchema;
    /** @deprecated use `SelectEvent$outboundSchema` instead. */
    SelectEvent$.outboundSchema = SelectEvent$outboundSchema;
})(SelectEvent$ || (SelectEvent$ = {}));
export function selectEventToJSON(selectEvent) {
    return JSON.stringify(SelectEvent$outboundSchema.parse(selectEvent));
}
export function selectEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SelectEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SelectEvent' from JSON`);
}
//# sourceMappingURL=selectevent.js.map