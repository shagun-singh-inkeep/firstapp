/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { FeedbackAggregationSelection$inboundSchema, FeedbackAggregationSelection$outboundSchema, } from "./feedbackaggregationselection.js";
import { FeedbackSimpleFieldSelection$inboundSchema, FeedbackSimpleFieldSelection$outboundSchema, } from "./feedbacksimplefieldselection.js";
import { FeedbackTimeBasedGroupBySelection$inboundSchema, FeedbackTimeBasedGroupBySelection$outboundSchema, } from "./feedbacktimebasedgroupbyselection.js";
/** @internal */
export const FeedbackSelection$inboundSchema = z.union([
    FeedbackTimeBasedGroupBySelection$inboundSchema.and(z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type }))),
    FeedbackSimpleFieldSelection$inboundSchema.and(z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type }))),
    FeedbackAggregationSelection$inboundSchema.and(z.object({ type: z.literal("aggregation") }).transform((v) => ({
        type: v.type,
    }))),
]);
/** @internal */
export const FeedbackSelection$outboundSchema = z.union([
    FeedbackTimeBasedGroupBySelection$outboundSchema.and(z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type }))),
    FeedbackSimpleFieldSelection$outboundSchema.and(z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type }))),
    FeedbackAggregationSelection$outboundSchema.and(z.object({ type: z.literal("aggregation") }).transform((v) => ({
        type: v.type,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackSelection$;
(function (FeedbackSelection$) {
    /** @deprecated use `FeedbackSelection$inboundSchema` instead. */
    FeedbackSelection$.inboundSchema = FeedbackSelection$inboundSchema;
    /** @deprecated use `FeedbackSelection$outboundSchema` instead. */
    FeedbackSelection$.outboundSchema = FeedbackSelection$outboundSchema;
})(FeedbackSelection$ || (FeedbackSelection$ = {}));
export function feedbackSelectionToJSON(feedbackSelection) {
    return JSON.stringify(FeedbackSelection$outboundSchema.parse(feedbackSelection));
}
export function feedbackSelectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackSelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackSelection' from JSON`);
}
//# sourceMappingURL=feedbackselection.js.map