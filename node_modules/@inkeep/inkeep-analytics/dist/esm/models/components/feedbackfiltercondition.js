/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { FeedbackField$inboundSchema, FeedbackField$outboundSchema, } from "./feedbackfield.js";
import { FilterOperator$inboundSchema, FilterOperator$outboundSchema, } from "./filteroperator.js";
/** @internal */
export const FeedbackFilterConditionValueValue4$inboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/** @internal */
export const FeedbackFilterConditionValueValue4$outboundSchema = z.union([z.string(), z.number(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterConditionValueValue4$;
(function (FeedbackFilterConditionValueValue4$) {
    /** @deprecated use `FeedbackFilterConditionValueValue4$inboundSchema` instead. */
    FeedbackFilterConditionValueValue4$.inboundSchema = FeedbackFilterConditionValueValue4$inboundSchema;
    /** @deprecated use `FeedbackFilterConditionValueValue4$outboundSchema` instead. */
    FeedbackFilterConditionValueValue4$.outboundSchema = FeedbackFilterConditionValueValue4$outboundSchema;
})(FeedbackFilterConditionValueValue4$ || (FeedbackFilterConditionValueValue4$ = {}));
export function feedbackFilterConditionValueValue4ToJSON(feedbackFilterConditionValueValue4) {
    return JSON.stringify(FeedbackFilterConditionValueValue4$outboundSchema.parse(feedbackFilterConditionValueValue4));
}
export function feedbackFilterConditionValueValue4FromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterConditionValueValue4$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterConditionValueValue4' from JSON`);
}
/** @internal */
export const FeedbackFilterConditionValueValue$inboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/** @internal */
export const FeedbackFilterConditionValueValue$outboundSchema = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterConditionValueValue$;
(function (FeedbackFilterConditionValueValue$) {
    /** @deprecated use `FeedbackFilterConditionValueValue$inboundSchema` instead. */
    FeedbackFilterConditionValueValue$.inboundSchema = FeedbackFilterConditionValueValue$inboundSchema;
    /** @deprecated use `FeedbackFilterConditionValueValue$outboundSchema` instead. */
    FeedbackFilterConditionValueValue$.outboundSchema = FeedbackFilterConditionValueValue$outboundSchema;
})(FeedbackFilterConditionValueValue$ || (FeedbackFilterConditionValueValue$ = {}));
export function feedbackFilterConditionValueValueToJSON(feedbackFilterConditionValueValue) {
    return JSON.stringify(FeedbackFilterConditionValueValue$outboundSchema.parse(feedbackFilterConditionValueValue));
}
export function feedbackFilterConditionValueValueFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterConditionValueValue$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterConditionValueValue' from JSON`);
}
/** @internal */
export const FeedbackFilterConditionValue7$inboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/** @internal */
export const FeedbackFilterConditionValue7$outboundSchema = z.object({
    path: z.array(z.string()),
    value: z.nullable(z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ])),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterConditionValue7$;
(function (FeedbackFilterConditionValue7$) {
    /** @deprecated use `FeedbackFilterConditionValue7$inboundSchema` instead. */
    FeedbackFilterConditionValue7$.inboundSchema = FeedbackFilterConditionValue7$inboundSchema;
    /** @deprecated use `FeedbackFilterConditionValue7$outboundSchema` instead. */
    FeedbackFilterConditionValue7$.outboundSchema = FeedbackFilterConditionValue7$outboundSchema;
})(FeedbackFilterConditionValue7$ || (FeedbackFilterConditionValue7$ = {}));
export function feedbackFilterConditionValue7ToJSON(feedbackFilterConditionValue7) {
    return JSON.stringify(FeedbackFilterConditionValue7$outboundSchema.parse(feedbackFilterConditionValue7));
}
export function feedbackFilterConditionValue7FromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterConditionValue7$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterConditionValue7' from JSON`);
}
/** @internal */
export const FeedbackFilterConditionCondition$inboundSchema = z.object({
    field: FeedbackField$inboundSchema,
    operator: FilterOperator$inboundSchema,
    value: z.any().optional(),
});
/** @internal */
export const FeedbackFilterConditionCondition$outboundSchema = z.object({
    field: FeedbackField$outboundSchema,
    operator: FilterOperator$outboundSchema,
    value: z.any().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterConditionCondition$;
(function (FeedbackFilterConditionCondition$) {
    /** @deprecated use `FeedbackFilterConditionCondition$inboundSchema` instead. */
    FeedbackFilterConditionCondition$.inboundSchema = FeedbackFilterConditionCondition$inboundSchema;
    /** @deprecated use `FeedbackFilterConditionCondition$outboundSchema` instead. */
    FeedbackFilterConditionCondition$.outboundSchema = FeedbackFilterConditionCondition$outboundSchema;
})(FeedbackFilterConditionCondition$ || (FeedbackFilterConditionCondition$ = {}));
export function feedbackFilterConditionConditionToJSON(feedbackFilterConditionCondition) {
    return JSON.stringify(FeedbackFilterConditionCondition$outboundSchema.parse(feedbackFilterConditionCondition));
}
export function feedbackFilterConditionConditionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterConditionCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterConditionCondition' from JSON`);
}
/** @internal */
export const FeedbackFilterCondition$inboundSchema = z.object({
    condition: z.lazy(() => FeedbackFilterConditionCondition$inboundSchema),
});
/** @internal */
export const FeedbackFilterCondition$outboundSchema = z.object({
    condition: z.lazy(() => FeedbackFilterConditionCondition$outboundSchema),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterCondition$;
(function (FeedbackFilterCondition$) {
    /** @deprecated use `FeedbackFilterCondition$inboundSchema` instead. */
    FeedbackFilterCondition$.inboundSchema = FeedbackFilterCondition$inboundSchema;
    /** @deprecated use `FeedbackFilterCondition$outboundSchema` instead. */
    FeedbackFilterCondition$.outboundSchema = FeedbackFilterCondition$outboundSchema;
})(FeedbackFilterCondition$ || (FeedbackFilterCondition$ = {}));
export function feedbackFilterConditionToJSON(feedbackFilterCondition) {
    return JSON.stringify(FeedbackFilterCondition$outboundSchema.parse(feedbackFilterCondition));
}
export function feedbackFilterConditionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterCondition$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterCondition' from JSON`);
}
//# sourceMappingURL=feedbackfiltercondition.js.map