import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SemanticThreadAggregationSelection, SemanticThreadAggregationSelection$Outbound } from "./semanticthreadaggregationselection.js";
import { SemanticThreadSimpleFieldSelection, SemanticThreadSimpleFieldSelection$Outbound } from "./semanticthreadsimplefieldselection.js";
import { SemanticThreadTimeBasedGroupBySelection, SemanticThreadTimeBasedGroupBySelection$Outbound } from "./semanticthreadtimebasedgroupbyselection.js";
/**
 * Fields to select from semantic threads
 */
export type SemanticThreadSelection = (SemanticThreadTimeBasedGroupBySelection & {
    type: "time";
}) | (SemanticThreadSimpleFieldSelection & {
    type: "field";
}) | (SemanticThreadAggregationSelection & {
    type: "aggregation";
});
/** @internal */
export declare const SemanticThreadSelection$inboundSchema: z.ZodType<SemanticThreadSelection, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadSelection$Outbound = (SemanticThreadTimeBasedGroupBySelection$Outbound & {
    type: "time";
}) | (SemanticThreadSimpleFieldSelection$Outbound & {
    type: "field";
}) | (SemanticThreadAggregationSelection$Outbound & {
    type: "aggregation";
});
/** @internal */
export declare const SemanticThreadSelection$outboundSchema: z.ZodType<SemanticThreadSelection$Outbound, z.ZodTypeDef, SemanticThreadSelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadSelection$ {
    /** @deprecated use `SemanticThreadSelection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadSelection, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadSelection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadSelection$Outbound, z.ZodTypeDef, SemanticThreadSelection>;
    /** @deprecated use `SemanticThreadSelection$Outbound` instead. */
    type Outbound = SemanticThreadSelection$Outbound;
}
export declare function semanticThreadSelectionToJSON(semanticThreadSelection: SemanticThreadSelection): string;
export declare function semanticThreadSelectionFromJSON(jsonString: string): SafeParseResult<SemanticThreadSelection, SDKValidationError>;
//# sourceMappingURL=semanticthreadselection.d.ts.map