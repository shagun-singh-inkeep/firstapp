/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { EventsField$inboundSchema, EventsField$outboundSchema, } from "./eventsfield.js";
/** @internal */
export const EventsGroupBy$inboundSchema = z.object({
    field: EventsField$inboundSchema,
    path: z.array(z.string()).optional(),
    includeInSelect: z.boolean().default(true),
});
/** @internal */
export const EventsGroupBy$outboundSchema = z.object({
    field: EventsField$outboundSchema,
    path: z.array(z.string()).optional(),
    includeInSelect: z.boolean().default(true),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsGroupBy$;
(function (EventsGroupBy$) {
    /** @deprecated use `EventsGroupBy$inboundSchema` instead. */
    EventsGroupBy$.inboundSchema = EventsGroupBy$inboundSchema;
    /** @deprecated use `EventsGroupBy$outboundSchema` instead. */
    EventsGroupBy$.outboundSchema = EventsGroupBy$outboundSchema;
})(EventsGroupBy$ || (EventsGroupBy$ = {}));
export function eventsGroupByToJSON(eventsGroupBy) {
    return JSON.stringify(EventsGroupBy$outboundSchema.parse(eventsGroupBy));
}
export function eventsGroupByFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsGroupBy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsGroupBy' from JSON`);
}
//# sourceMappingURL=eventsgroupby.js.map