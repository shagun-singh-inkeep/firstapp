/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { OpenAIExtendedMessage$inboundSchema, OpenAIExtendedMessage$outboundSchema, } from "./openaiextendedmessage.js";
import { SupportCopilotMessage$inboundSchema, SupportCopilotMessage$outboundSchema, } from "./supportcopilotmessage.js";
import { SupportTicketMessage$inboundSchema, SupportTicketMessage$outboundSchema, } from "./supportticketmessage.js";
/** @internal */
export const Message$inboundSchema = z.union([
    SupportTicketMessage$inboundSchema.and(z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
    }))),
    SupportCopilotMessage$inboundSchema.and(z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
    }))),
    OpenAIExtendedMessage$inboundSchema.and(z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
    }))),
]);
/** @internal */
export const Message$outboundSchema = z.union([
    SupportTicketMessage$outboundSchema.and(z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
    }))),
    SupportCopilotMessage$outboundSchema.and(z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
    }))),
    OpenAIExtendedMessage$outboundSchema.and(z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Message$;
(function (Message$) {
    /** @deprecated use `Message$inboundSchema` instead. */
    Message$.inboundSchema = Message$inboundSchema;
    /** @deprecated use `Message$outboundSchema` instead. */
    Message$.outboundSchema = Message$outboundSchema;
})(Message$ || (Message$ = {}));
export function messageToJSON(message) {
    return JSON.stringify(Message$outboundSchema.parse(message));
}
export function messageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Message$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Message' from JSON`);
}
//# sourceMappingURL=message.js.map