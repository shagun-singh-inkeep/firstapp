/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { SemanticThreadFilterAND$inboundSchema, SemanticThreadFilterAND$outboundSchema, } from "./semanticthreadfilterand.js";
import { SemanticThreadFilterCondition$inboundSchema, SemanticThreadFilterCondition$outboundSchema, } from "./semanticthreadfiltercondition.js";
import { SemanticThreadFilterOR$inboundSchema, SemanticThreadFilterOR$outboundSchema, } from "./semanticthreadfilteror.js";
/** @internal */
export const SemanticThreadFilter$inboundSchema = z.union([
    SemanticThreadFilterCondition$inboundSchema,
    z.lazy(() => SemanticThreadFilterAND$inboundSchema),
    z.lazy(() => SemanticThreadFilterOR$inboundSchema),
]);
/** @internal */
export const SemanticThreadFilter$outboundSchema = z.union([
    SemanticThreadFilterCondition$outboundSchema,
    z.lazy(() => SemanticThreadFilterAND$outboundSchema),
    z.lazy(() => SemanticThreadFilterOR$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadFilter$;
(function (SemanticThreadFilter$) {
    /** @deprecated use `SemanticThreadFilter$inboundSchema` instead. */
    SemanticThreadFilter$.inboundSchema = SemanticThreadFilter$inboundSchema;
    /** @deprecated use `SemanticThreadFilter$outboundSchema` instead. */
    SemanticThreadFilter$.outboundSchema = SemanticThreadFilter$outboundSchema;
})(SemanticThreadFilter$ || (SemanticThreadFilter$ = {}));
export function semanticThreadFilterToJSON(semanticThreadFilter) {
    return JSON.stringify(SemanticThreadFilter$outboundSchema.parse(semanticThreadFilter));
}
export function semanticThreadFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SemanticThreadFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadFilter' from JSON`);
}
//# sourceMappingURL=semanticthreadfilter.js.map