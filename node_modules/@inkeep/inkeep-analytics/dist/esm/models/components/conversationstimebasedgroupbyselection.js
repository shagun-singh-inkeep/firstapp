/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { TimeUnit$inboundSchema, TimeUnit$outboundSchema, } from "./timeunit.js";
export const ConversationsTimeBasedGroupBySelectionType = {
    Time: "time",
};
export const ConversationsTimeBasedGroupBySelectionField = {
    Id: "id",
    UserMessageCount: "userMessageCount",
    OrganizationId: "organizationId",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    FirstMessageTime: "firstMessageTime",
    Type: "type",
    Properties: "properties",
    UserProperties: "userProperties",
};
/** @internal */
export const ConversationsTimeBasedGroupBySelectionType$inboundSchema = z
    .nativeEnum(ConversationsTimeBasedGroupBySelectionType);
/** @internal */
export const ConversationsTimeBasedGroupBySelectionType$outboundSchema = ConversationsTimeBasedGroupBySelectionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConversationsTimeBasedGroupBySelectionType$;
(function (ConversationsTimeBasedGroupBySelectionType$) {
    /** @deprecated use `ConversationsTimeBasedGroupBySelectionType$inboundSchema` instead. */
    ConversationsTimeBasedGroupBySelectionType$.inboundSchema = ConversationsTimeBasedGroupBySelectionType$inboundSchema;
    /** @deprecated use `ConversationsTimeBasedGroupBySelectionType$outboundSchema` instead. */
    ConversationsTimeBasedGroupBySelectionType$.outboundSchema = ConversationsTimeBasedGroupBySelectionType$outboundSchema;
})(ConversationsTimeBasedGroupBySelectionType$ || (ConversationsTimeBasedGroupBySelectionType$ = {}));
/** @internal */
export const ConversationsTimeBasedGroupBySelectionField$inboundSchema = z
    .nativeEnum(ConversationsTimeBasedGroupBySelectionField);
/** @internal */
export const ConversationsTimeBasedGroupBySelectionField$outboundSchema = ConversationsTimeBasedGroupBySelectionField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConversationsTimeBasedGroupBySelectionField$;
(function (ConversationsTimeBasedGroupBySelectionField$) {
    /** @deprecated use `ConversationsTimeBasedGroupBySelectionField$inboundSchema` instead. */
    ConversationsTimeBasedGroupBySelectionField$.inboundSchema = ConversationsTimeBasedGroupBySelectionField$inboundSchema;
    /** @deprecated use `ConversationsTimeBasedGroupBySelectionField$outboundSchema` instead. */
    ConversationsTimeBasedGroupBySelectionField$.outboundSchema = ConversationsTimeBasedGroupBySelectionField$outboundSchema;
})(ConversationsTimeBasedGroupBySelectionField$ || (ConversationsTimeBasedGroupBySelectionField$ = {}));
/** @internal */
export const ConversationsTimeBasedGroupBySelection$inboundSchema = z.object({
    type: ConversationsTimeBasedGroupBySelectionType$inboundSchema,
    timeUnit: TimeUnit$inboundSchema,
    field: ConversationsTimeBasedGroupBySelectionField$inboundSchema.optional(),
});
/** @internal */
export const ConversationsTimeBasedGroupBySelection$outboundSchema = z.object({
    type: ConversationsTimeBasedGroupBySelectionType$outboundSchema,
    timeUnit: TimeUnit$outboundSchema,
    field: ConversationsTimeBasedGroupBySelectionField$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConversationsTimeBasedGroupBySelection$;
(function (ConversationsTimeBasedGroupBySelection$) {
    /** @deprecated use `ConversationsTimeBasedGroupBySelection$inboundSchema` instead. */
    ConversationsTimeBasedGroupBySelection$.inboundSchema = ConversationsTimeBasedGroupBySelection$inboundSchema;
    /** @deprecated use `ConversationsTimeBasedGroupBySelection$outboundSchema` instead. */
    ConversationsTimeBasedGroupBySelection$.outboundSchema = ConversationsTimeBasedGroupBySelection$outboundSchema;
})(ConversationsTimeBasedGroupBySelection$ || (ConversationsTimeBasedGroupBySelection$ = {}));
export function conversationsTimeBasedGroupBySelectionToJSON(conversationsTimeBasedGroupBySelection) {
    return JSON.stringify(ConversationsTimeBasedGroupBySelection$outboundSchema.parse(conversationsTimeBasedGroupBySelection));
}
export function conversationsTimeBasedGroupBySelectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConversationsTimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConversationsTimeBasedGroupBySelection' from JSON`);
}
//# sourceMappingURL=conversationstimebasedgroupbyselection.js.map