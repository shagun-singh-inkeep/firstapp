/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { OpenAIConversation$inboundSchema, OpenAIConversation$outboundSchema, } from "./openaiconversation.js";
import { SupportCopilotConversation$inboundSchema, SupportCopilotConversation$outboundSchema, } from "./supportcopilotconversation.js";
import { SupportTicketConversation$inboundSchema, SupportTicketConversation$outboundSchema, } from "./supportticketconversation.js";
/** @internal */
export const Conversation$inboundSchema = z.union([
    SupportTicketConversation$inboundSchema.and(z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
    }))),
    SupportCopilotConversation$inboundSchema.and(z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
    }))),
    OpenAIConversation$inboundSchema.and(z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
    }))),
]);
/** @internal */
export const Conversation$outboundSchema = z.union([
    SupportTicketConversation$outboundSchema.and(z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
    }))),
    SupportCopilotConversation$outboundSchema.and(z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
    }))),
    OpenAIConversation$outboundSchema.and(z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Conversation$;
(function (Conversation$) {
    /** @deprecated use `Conversation$inboundSchema` instead. */
    Conversation$.inboundSchema = Conversation$inboundSchema;
    /** @deprecated use `Conversation$outboundSchema` instead. */
    Conversation$.outboundSchema = Conversation$outboundSchema;
})(Conversation$ || (Conversation$ = {}));
export function conversationToJSON(conversation) {
    return JSON.stringify(Conversation$outboundSchema.parse(conversation));
}
export function conversationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Conversation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Conversation' from JSON`);
}
//# sourceMappingURL=conversation.js.map