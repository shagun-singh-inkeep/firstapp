import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SelectConversationEvent, SelectConversationEvent$Outbound } from "./selectconversationevent.js";
import { SelectMessageEvent, SelectMessageEvent$Outbound } from "./selectmessageevent.js";
import { SelectSearchEvent, SelectSearchEvent$Outbound } from "./selectsearchevent.js";
export type SelectEvent = (SelectMessageEvent & {
    entityType: "message";
}) | (SelectConversationEvent & {
    entityType: "conversation";
}) | (SelectSearchEvent & {
    entityType: "search";
});
/** @internal */
export declare const SelectEvent$inboundSchema: z.ZodType<SelectEvent, z.ZodTypeDef, unknown>;
/** @internal */
export type SelectEvent$Outbound = (SelectMessageEvent$Outbound & {
    entityType: "message";
}) | (SelectConversationEvent$Outbound & {
    entityType: "conversation";
}) | (SelectSearchEvent$Outbound & {
    entityType: "search";
});
/** @internal */
export declare const SelectEvent$outboundSchema: z.ZodType<SelectEvent$Outbound, z.ZodTypeDef, SelectEvent>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SelectEvent$ {
    /** @deprecated use `SelectEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SelectEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `SelectEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SelectEvent$Outbound, z.ZodTypeDef, SelectEvent>;
    /** @deprecated use `SelectEvent$Outbound` instead. */
    type Outbound = SelectEvent$Outbound;
}
export declare function selectEventToJSON(selectEvent: SelectEvent): string;
export declare function selectEventFromJSON(jsonString: string): SafeParseResult<SelectEvent, SDKValidationError>;
//# sourceMappingURL=selectevent.d.ts.map