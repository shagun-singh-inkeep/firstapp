import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
/**
 * Available operators for filtering data
 */
export declare const FilterOperator: {
    readonly Eq: "eq";
    readonly Neq: "neq";
    readonly Gt: "gt";
    readonly Gte: "gte";
    readonly Lt: "lt";
    readonly Lte: "lte";
    readonly In: "in";
    readonly NotIn: "notIn";
    readonly ArrayContains: "arrayContains";
    readonly JsonContains: "jsonContains";
    readonly JsonContainedBy: "jsonContainedBy";
    readonly JsonHasKey: "jsonHasKey";
    readonly JsonHasAnyKey: "jsonHasAnyKey";
    readonly JsonHasAllKeys: "jsonHasAllKeys";
    readonly IsNull: "isNull";
    readonly IsNotNull: "isNotNull";
};
/**
 * Available operators for filtering data
 */
export type FilterOperator = ClosedEnum<typeof FilterOperator>;
/** @internal */
export declare const FilterOperator$inboundSchema: z.ZodNativeEnum<typeof FilterOperator>;
/** @internal */
export declare const FilterOperator$outboundSchema: z.ZodNativeEnum<typeof FilterOperator>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FilterOperator$ {
    /** @deprecated use `FilterOperator$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Eq: "eq";
        readonly Neq: "neq";
        readonly Gt: "gt";
        readonly Gte: "gte";
        readonly Lt: "lt";
        readonly Lte: "lte";
        readonly In: "in";
        readonly NotIn: "notIn";
        readonly ArrayContains: "arrayContains";
        readonly JsonContains: "jsonContains";
        readonly JsonContainedBy: "jsonContainedBy";
        readonly JsonHasKey: "jsonHasKey";
        readonly JsonHasAnyKey: "jsonHasAnyKey";
        readonly JsonHasAllKeys: "jsonHasAllKeys";
        readonly IsNull: "isNull";
        readonly IsNotNull: "isNotNull";
    }>;
    /** @deprecated use `FilterOperator$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Eq: "eq";
        readonly Neq: "neq";
        readonly Gt: "gt";
        readonly Gte: "gte";
        readonly Lt: "lt";
        readonly Lte: "lte";
        readonly In: "in";
        readonly NotIn: "notIn";
        readonly ArrayContains: "arrayContains";
        readonly JsonContains: "jsonContains";
        readonly JsonContainedBy: "jsonContainedBy";
        readonly JsonHasKey: "jsonHasKey";
        readonly JsonHasAnyKey: "jsonHasAnyKey";
        readonly JsonHasAllKeys: "jsonHasAllKeys";
        readonly IsNull: "isNull";
        readonly IsNotNull: "isNotNull";
    }>;
}
//# sourceMappingURL=filteroperator.d.ts.map