/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { TimeUnit$inboundSchema, TimeUnit$outboundSchema, } from "./timeunit.js";
export const EventsTimeBasedGroupBySelectionType = {
    Time: "time",
};
export const EventsTimeBasedGroupBySelectionField = {
    Id: "id",
    OrganizationId: "organizationId",
    MessageId: "messageId",
    ConversationId: "conversationId",
    CreatedAt: "createdAt",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    EventType: "eventType",
    Type: "type",
    SearchQuery: "searchQuery",
    Properties: "properties",
    UserProperties: "userProperties",
};
/** @internal */
export const EventsTimeBasedGroupBySelectionType$inboundSchema = z.nativeEnum(EventsTimeBasedGroupBySelectionType);
/** @internal */
export const EventsTimeBasedGroupBySelectionType$outboundSchema = EventsTimeBasedGroupBySelectionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsTimeBasedGroupBySelectionType$;
(function (EventsTimeBasedGroupBySelectionType$) {
    /** @deprecated use `EventsTimeBasedGroupBySelectionType$inboundSchema` instead. */
    EventsTimeBasedGroupBySelectionType$.inboundSchema = EventsTimeBasedGroupBySelectionType$inboundSchema;
    /** @deprecated use `EventsTimeBasedGroupBySelectionType$outboundSchema` instead. */
    EventsTimeBasedGroupBySelectionType$.outboundSchema = EventsTimeBasedGroupBySelectionType$outboundSchema;
})(EventsTimeBasedGroupBySelectionType$ || (EventsTimeBasedGroupBySelectionType$ = {}));
/** @internal */
export const EventsTimeBasedGroupBySelectionField$inboundSchema = z.nativeEnum(EventsTimeBasedGroupBySelectionField);
/** @internal */
export const EventsTimeBasedGroupBySelectionField$outboundSchema = EventsTimeBasedGroupBySelectionField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsTimeBasedGroupBySelectionField$;
(function (EventsTimeBasedGroupBySelectionField$) {
    /** @deprecated use `EventsTimeBasedGroupBySelectionField$inboundSchema` instead. */
    EventsTimeBasedGroupBySelectionField$.inboundSchema = EventsTimeBasedGroupBySelectionField$inboundSchema;
    /** @deprecated use `EventsTimeBasedGroupBySelectionField$outboundSchema` instead. */
    EventsTimeBasedGroupBySelectionField$.outboundSchema = EventsTimeBasedGroupBySelectionField$outboundSchema;
})(EventsTimeBasedGroupBySelectionField$ || (EventsTimeBasedGroupBySelectionField$ = {}));
/** @internal */
export const EventsTimeBasedGroupBySelection$inboundSchema = z.object({
    type: EventsTimeBasedGroupBySelectionType$inboundSchema,
    timeUnit: TimeUnit$inboundSchema,
    field: EventsTimeBasedGroupBySelectionField$inboundSchema.optional(),
});
/** @internal */
export const EventsTimeBasedGroupBySelection$outboundSchema = z.object({
    type: EventsTimeBasedGroupBySelectionType$outboundSchema,
    timeUnit: TimeUnit$outboundSchema,
    field: EventsTimeBasedGroupBySelectionField$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsTimeBasedGroupBySelection$;
(function (EventsTimeBasedGroupBySelection$) {
    /** @deprecated use `EventsTimeBasedGroupBySelection$inboundSchema` instead. */
    EventsTimeBasedGroupBySelection$.inboundSchema = EventsTimeBasedGroupBySelection$inboundSchema;
    /** @deprecated use `EventsTimeBasedGroupBySelection$outboundSchema` instead. */
    EventsTimeBasedGroupBySelection$.outboundSchema = EventsTimeBasedGroupBySelection$outboundSchema;
})(EventsTimeBasedGroupBySelection$ || (EventsTimeBasedGroupBySelection$ = {}));
export function eventsTimeBasedGroupBySelectionToJSON(eventsTimeBasedGroupBySelection) {
    return JSON.stringify(EventsTimeBasedGroupBySelection$outboundSchema.parse(eventsTimeBasedGroupBySelection));
}
export function eventsTimeBasedGroupBySelectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsTimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsTimeBasedGroupBySelection' from JSON`);
}
//# sourceMappingURL=eventstimebasedgroupbyselection.js.map