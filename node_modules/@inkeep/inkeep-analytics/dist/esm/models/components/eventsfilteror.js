/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { EventsFilter$inboundSchema, EventsFilter$outboundSchema, } from "./eventsfilter.js";
/** @internal */
export const EventsFilterOROR$inboundSchema = z.lazy(() => EventsFilter$inboundSchema);
/** @internal */
export const EventsFilterOROR$outboundSchema = z.lazy(() => EventsFilter$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsFilterOROR$;
(function (EventsFilterOROR$) {
    /** @deprecated use `EventsFilterOROR$inboundSchema` instead. */
    EventsFilterOROR$.inboundSchema = EventsFilterOROR$inboundSchema;
    /** @deprecated use `EventsFilterOROR$outboundSchema` instead. */
    EventsFilterOROR$.outboundSchema = EventsFilterOROR$outboundSchema;
})(EventsFilterOROR$ || (EventsFilterOROR$ = {}));
export function eventsFilterORORToJSON(eventsFilterOROR) {
    return JSON.stringify(EventsFilterOROR$outboundSchema.parse(eventsFilterOROR));
}
export function eventsFilterORORFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsFilterOROR$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterOROR' from JSON`);
}
/** @internal */
export const EventsFilterOR$inboundSchema = z.object({
    or: z.array(z.lazy(() => EventsFilter$inboundSchema)),
});
/** @internal */
export const EventsFilterOR$outboundSchema = z.object({
    or: z.array(z.lazy(() => EventsFilter$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsFilterOR$;
(function (EventsFilterOR$) {
    /** @deprecated use `EventsFilterOR$inboundSchema` instead. */
    EventsFilterOR$.inboundSchema = EventsFilterOR$inboundSchema;
    /** @deprecated use `EventsFilterOR$outboundSchema` instead. */
    EventsFilterOR$.outboundSchema = EventsFilterOR$outboundSchema;
})(EventsFilterOR$ || (EventsFilterOR$ = {}));
export function eventsFilterORToJSON(eventsFilterOR) {
    return JSON.stringify(EventsFilterOR$outboundSchema.parse(eventsFilterOR));
}
export function eventsFilterORFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsFilterOR$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilterOR' from JSON`);
}
//# sourceMappingURL=eventsfilteror.js.map