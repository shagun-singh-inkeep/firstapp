import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { QuerySemanticThreadsResponseData, QuerySemanticThreadsResponseData$Outbound } from "./querysemanticthreadsresponsedata.js";
/**
 * Status of the response
 */
export declare const QuerySemanticThreadsResponseBodyStatus: {
    readonly Ok: "ok";
};
/**
 * Status of the response
 */
export type QuerySemanticThreadsResponseBodyStatus = ClosedEnum<typeof QuerySemanticThreadsResponseBodyStatus>;
/**
 * Response body for QuerySemanticThreads query endpoint
 */
export type QuerySemanticThreadsResponseBody = {
    /**
     * Status of the response
     */
    status: QuerySemanticThreadsResponseBodyStatus;
    /**
     * Data object containing QuerySemanticThreads query results and pagination information
     */
    data: QuerySemanticThreadsResponseData;
};
/** @internal */
export declare const QuerySemanticThreadsResponseBodyStatus$inboundSchema: z.ZodNativeEnum<typeof QuerySemanticThreadsResponseBodyStatus>;
/** @internal */
export declare const QuerySemanticThreadsResponseBodyStatus$outboundSchema: z.ZodNativeEnum<typeof QuerySemanticThreadsResponseBodyStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseBodyStatus$ {
    /** @deprecated use `QuerySemanticThreadsResponseBodyStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Ok: "ok";
    }>;
    /** @deprecated use `QuerySemanticThreadsResponseBodyStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Ok: "ok";
    }>;
}
/** @internal */
export declare const QuerySemanticThreadsResponseBody$inboundSchema: z.ZodType<QuerySemanticThreadsResponseBody, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsResponseBody$Outbound = {
    status: string;
    data: QuerySemanticThreadsResponseData$Outbound;
};
/** @internal */
export declare const QuerySemanticThreadsResponseBody$outboundSchema: z.ZodType<QuerySemanticThreadsResponseBody$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseBody$ {
    /** @deprecated use `QuerySemanticThreadsResponseBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsResponseBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsResponseBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsResponseBody$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseBody>;
    /** @deprecated use `QuerySemanticThreadsResponseBody$Outbound` instead. */
    type Outbound = QuerySemanticThreadsResponseBody$Outbound;
}
export declare function querySemanticThreadsResponseBodyToJSON(querySemanticThreadsResponseBody: QuerySemanticThreadsResponseBody): string;
export declare function querySemanticThreadsResponseBodyFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsResponseBody, SDKValidationError>;
//# sourceMappingURL=querysemanticthreadsresponsebody.d.ts.map