import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ConversationsFilterAND, ConversationsFilterAND$Outbound } from "./conversationsfilterand.js";
import { ConversationsFilterCondition, ConversationsFilterCondition$Outbound } from "./conversationsfiltercondition.js";
import { ConversationsFilterOR, ConversationsFilterOR$Outbound } from "./conversationsfilteror.js";
export type ConversationsFilter = ConversationsFilterCondition | ConversationsFilterAND | ConversationsFilterOR;
/** @internal */
export declare const ConversationsFilter$inboundSchema: z.ZodType<ConversationsFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type ConversationsFilter$Outbound = ConversationsFilterCondition$Outbound | ConversationsFilterAND$Outbound | ConversationsFilterOR$Outbound;
/** @internal */
export declare const ConversationsFilter$outboundSchema: z.ZodType<ConversationsFilter$Outbound, z.ZodTypeDef, ConversationsFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConversationsFilter$ {
    /** @deprecated use `ConversationsFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConversationsFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsFilter$Outbound, z.ZodTypeDef, ConversationsFilter>;
    /** @deprecated use `ConversationsFilter$Outbound` instead. */
    type Outbound = ConversationsFilter$Outbound;
}
export declare function conversationsFilterToJSON(conversationsFilter: ConversationsFilter): string;
export declare function conversationsFilterFromJSON(jsonString: string): SafeParseResult<ConversationsFilter, SDKValidationError>;
//# sourceMappingURL=conversationsfilter.d.ts.map