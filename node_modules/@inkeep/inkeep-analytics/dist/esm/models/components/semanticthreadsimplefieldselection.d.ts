import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const SemanticThreadSimpleFieldSelectionType: {
    readonly Field: "field";
};
export type SemanticThreadSimpleFieldSelectionType = ClosedEnum<typeof SemanticThreadSimpleFieldSelectionType>;
export declare const SemanticThreadSimpleFieldSelectionField: {
    readonly Id: "id";
    readonly MessageIds: "messageIds";
    readonly MessagesCount: "messagesCount";
    readonly OrganizationId: "organizationId";
    readonly Question: "question";
    readonly QuestionLength: "questionLength";
    readonly Answer: "answer";
    readonly IsOnTopic: "isOnTopic";
    readonly IsClear: "isClear";
    readonly IsDocumented: "isDocumented";
    readonly IsFeatureSupported: "isFeatureSupported";
    readonly IsAnswerConfident: "isAnswerConfident";
    readonly GapSummary: "gapSummary";
    readonly Subject: "subject";
    readonly Category: "category";
    readonly Languages: "languages";
    readonly FirstPartyEntities: "firstPartyEntities";
    readonly ThirdPartyEntities: "thirdPartyEntities";
    readonly Emotion: "emotion";
    readonly Sentiment: "sentiment";
    readonly QuestionType: "questionType";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
    readonly FirstMessageTime: "firstMessageTime";
    readonly LastMessageTime: "lastMessageTime";
    readonly LastUpdated: "lastUpdated";
    readonly HasPositiveFeedback: "hasPositiveFeedback";
    readonly HasNegativeFeedback: "hasNegativeFeedback";
    readonly ConversationIds: "conversationIds";
    readonly AreAIAnnotationsVerified: "areAIAnnotationsVerified";
    readonly IsInitialQuestionAnswer: "isInitialQuestionAnswer";
};
export type SemanticThreadSimpleFieldSelectionField = ClosedEnum<typeof SemanticThreadSimpleFieldSelectionField>;
export type SemanticThreadSimpleFieldSelection = {
    type: SemanticThreadSimpleFieldSelectionType;
    field: SemanticThreadSimpleFieldSelectionField;
    path?: Array<string> | undefined;
};
/** @internal */
export declare const SemanticThreadSimpleFieldSelectionType$inboundSchema: z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionType>;
/** @internal */
export declare const SemanticThreadSimpleFieldSelectionType$outboundSchema: z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadSimpleFieldSelectionType$ {
    /** @deprecated use `SemanticThreadSimpleFieldSelectionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Field: "field";
    }>;
    /** @deprecated use `SemanticThreadSimpleFieldSelectionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Field: "field";
    }>;
}
/** @internal */
export declare const SemanticThreadSimpleFieldSelectionField$inboundSchema: z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionField>;
/** @internal */
export declare const SemanticThreadSimpleFieldSelectionField$outboundSchema: z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadSimpleFieldSelectionField$ {
    /** @deprecated use `SemanticThreadSimpleFieldSelectionField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly MessageIds: "messageIds";
        readonly MessagesCount: "messagesCount";
        readonly OrganizationId: "organizationId";
        readonly Question: "question";
        readonly QuestionLength: "questionLength";
        readonly Answer: "answer";
        readonly IsOnTopic: "isOnTopic";
        readonly IsClear: "isClear";
        readonly IsDocumented: "isDocumented";
        readonly IsFeatureSupported: "isFeatureSupported";
        readonly IsAnswerConfident: "isAnswerConfident";
        readonly GapSummary: "gapSummary";
        readonly Subject: "subject";
        readonly Category: "category";
        readonly Languages: "languages";
        readonly FirstPartyEntities: "firstPartyEntities";
        readonly ThirdPartyEntities: "thirdPartyEntities";
        readonly Emotion: "emotion";
        readonly Sentiment: "sentiment";
        readonly QuestionType: "questionType";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly FirstMessageTime: "firstMessageTime";
        readonly LastMessageTime: "lastMessageTime";
        readonly LastUpdated: "lastUpdated";
        readonly HasPositiveFeedback: "hasPositiveFeedback";
        readonly HasNegativeFeedback: "hasNegativeFeedback";
        readonly ConversationIds: "conversationIds";
        readonly AreAIAnnotationsVerified: "areAIAnnotationsVerified";
        readonly IsInitialQuestionAnswer: "isInitialQuestionAnswer";
    }>;
    /** @deprecated use `SemanticThreadSimpleFieldSelectionField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly MessageIds: "messageIds";
        readonly MessagesCount: "messagesCount";
        readonly OrganizationId: "organizationId";
        readonly Question: "question";
        readonly QuestionLength: "questionLength";
        readonly Answer: "answer";
        readonly IsOnTopic: "isOnTopic";
        readonly IsClear: "isClear";
        readonly IsDocumented: "isDocumented";
        readonly IsFeatureSupported: "isFeatureSupported";
        readonly IsAnswerConfident: "isAnswerConfident";
        readonly GapSummary: "gapSummary";
        readonly Subject: "subject";
        readonly Category: "category";
        readonly Languages: "languages";
        readonly FirstPartyEntities: "firstPartyEntities";
        readonly ThirdPartyEntities: "thirdPartyEntities";
        readonly Emotion: "emotion";
        readonly Sentiment: "sentiment";
        readonly QuestionType: "questionType";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly FirstMessageTime: "firstMessageTime";
        readonly LastMessageTime: "lastMessageTime";
        readonly LastUpdated: "lastUpdated";
        readonly HasPositiveFeedback: "hasPositiveFeedback";
        readonly HasNegativeFeedback: "hasNegativeFeedback";
        readonly ConversationIds: "conversationIds";
        readonly AreAIAnnotationsVerified: "areAIAnnotationsVerified";
        readonly IsInitialQuestionAnswer: "isInitialQuestionAnswer";
    }>;
}
/** @internal */
export declare const SemanticThreadSimpleFieldSelection$inboundSchema: z.ZodType<SemanticThreadSimpleFieldSelection, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadSimpleFieldSelection$Outbound = {
    type: string;
    field: string;
    path?: Array<string> | undefined;
};
/** @internal */
export declare const SemanticThreadSimpleFieldSelection$outboundSchema: z.ZodType<SemanticThreadSimpleFieldSelection$Outbound, z.ZodTypeDef, SemanticThreadSimpleFieldSelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadSimpleFieldSelection$ {
    /** @deprecated use `SemanticThreadSimpleFieldSelection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadSimpleFieldSelection, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadSimpleFieldSelection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadSimpleFieldSelection$Outbound, z.ZodTypeDef, SemanticThreadSimpleFieldSelection>;
    /** @deprecated use `SemanticThreadSimpleFieldSelection$Outbound` instead. */
    type Outbound = SemanticThreadSimpleFieldSelection$Outbound;
}
export declare function semanticThreadSimpleFieldSelectionToJSON(semanticThreadSimpleFieldSelection: SemanticThreadSimpleFieldSelection): string;
export declare function semanticThreadSimpleFieldSelectionFromJSON(jsonString: string): SafeParseResult<SemanticThreadSimpleFieldSelection, SDKValidationError>;
//# sourceMappingURL=semanticthreadsimplefieldselection.d.ts.map