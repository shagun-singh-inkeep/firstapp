import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { OpenAIExtendedMessage, OpenAIExtendedMessage$Outbound } from "./openaiextendedmessage.js";
import { SupportCopilotMessage, SupportCopilotMessage$Outbound } from "./supportcopilotmessage.js";
import { SupportTicketMessage, SupportTicketMessage$Outbound } from "./supportticketmessage.js";
export type Message = (SupportTicketMessage & {
    type: "support_ticket";
}) | (SupportCopilotMessage & {
    type: "support_copilot";
}) | (OpenAIExtendedMessage & {
    type: "openai";
});
/** @internal */
export declare const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown>;
/** @internal */
export type Message$Outbound = (SupportTicketMessage$Outbound & {
    type: "support_ticket";
}) | (SupportCopilotMessage$Outbound & {
    type: "support_copilot";
}) | (OpenAIExtendedMessage$Outbound & {
    type: "openai";
});
/** @internal */
export declare const Message$outboundSchema: z.ZodType<Message$Outbound, z.ZodTypeDef, Message>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Message$ {
    /** @deprecated use `Message$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown>;
    /** @deprecated use `Message$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Message$Outbound, z.ZodTypeDef, Message>;
    /** @deprecated use `Message$Outbound` instead. */
    type Outbound = Message$Outbound;
}
export declare function messageToJSON(message: Message): string;
export declare function messageFromJSON(jsonString: string): SafeParseResult<Message, SDKValidationError>;
//# sourceMappingURL=message.d.ts.map