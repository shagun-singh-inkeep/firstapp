/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
export const SupportCopilotMessageType = {
    SupportCopilot: "support_copilot",
};
export const SupportCopilotMessageType1 = {
    Documentation: "documentation",
    Site: "site",
    DiscoursePost: "discourse_post",
    GithubIssue: "github_issue",
    GithubDiscussion: "github_discussion",
    StackoverflowQuestion: "stackoverflow_question",
    DiscordForumPost: "discord_forum_post",
    DiscordMessage: "discord_message",
    CustomQuestionAnswer: "custom_question_answer",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SupportCopilotMessageUserType = {
    User: "user",
    Member: "member",
};
/** @internal */
export const SupportCopilotMessageType$inboundSchema = z.nativeEnum(SupportCopilotMessageType);
/** @internal */
export const SupportCopilotMessageType$outboundSchema = SupportCopilotMessageType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageType$;
(function (SupportCopilotMessageType$) {
    /** @deprecated use `SupportCopilotMessageType$inboundSchema` instead. */
    SupportCopilotMessageType$.inboundSchema = SupportCopilotMessageType$inboundSchema;
    /** @deprecated use `SupportCopilotMessageType$outboundSchema` instead. */
    SupportCopilotMessageType$.outboundSchema = SupportCopilotMessageType$outboundSchema;
})(SupportCopilotMessageType$ || (SupportCopilotMessageType$ = {}));
/** @internal */
export const SupportCopilotMessageType1$inboundSchema = z.nativeEnum(SupportCopilotMessageType1);
/** @internal */
export const SupportCopilotMessageType1$outboundSchema = SupportCopilotMessageType1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageType1$;
(function (SupportCopilotMessageType1$) {
    /** @deprecated use `SupportCopilotMessageType1$inboundSchema` instead. */
    SupportCopilotMessageType1$.inboundSchema = SupportCopilotMessageType1$inboundSchema;
    /** @deprecated use `SupportCopilotMessageType1$outboundSchema` instead. */
    SupportCopilotMessageType1$.outboundSchema = SupportCopilotMessageType1$outboundSchema;
})(SupportCopilotMessageType1$ || (SupportCopilotMessageType1$ = {}));
/** @internal */
export const SupportCopilotMessageLinksType$inboundSchema = z.union([SupportCopilotMessageType1$inboundSchema, z.string()]);
/** @internal */
export const SupportCopilotMessageLinksType$outboundSchema = z.union([SupportCopilotMessageType1$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageLinksType$;
(function (SupportCopilotMessageLinksType$) {
    /** @deprecated use `SupportCopilotMessageLinksType$inboundSchema` instead. */
    SupportCopilotMessageLinksType$.inboundSchema = SupportCopilotMessageLinksType$inboundSchema;
    /** @deprecated use `SupportCopilotMessageLinksType$outboundSchema` instead. */
    SupportCopilotMessageLinksType$.outboundSchema = SupportCopilotMessageLinksType$outboundSchema;
})(SupportCopilotMessageLinksType$ || (SupportCopilotMessageLinksType$ = {}));
export function supportCopilotMessageLinksTypeToJSON(supportCopilotMessageLinksType) {
    return JSON.stringify(SupportCopilotMessageLinksType$outboundSchema.parse(supportCopilotMessageLinksType));
}
export function supportCopilotMessageLinksTypeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SupportCopilotMessageLinksType$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotMessageLinksType' from JSON`);
}
/** @internal */
export const SupportCopilotMessageLinks$inboundSchema = z.object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(z.union([SupportCopilotMessageType1$inboundSchema, z.string()])).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const SupportCopilotMessageLinks$outboundSchema = z.object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(z.union([SupportCopilotMessageType1$outboundSchema, z.string()])).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageLinks$;
(function (SupportCopilotMessageLinks$) {
    /** @deprecated use `SupportCopilotMessageLinks$inboundSchema` instead. */
    SupportCopilotMessageLinks$.inboundSchema = SupportCopilotMessageLinks$inboundSchema;
    /** @deprecated use `SupportCopilotMessageLinks$outboundSchema` instead. */
    SupportCopilotMessageLinks$.outboundSchema = SupportCopilotMessageLinks$outboundSchema;
})(SupportCopilotMessageLinks$ || (SupportCopilotMessageLinks$ = {}));
export function supportCopilotMessageLinksToJSON(supportCopilotMessageLinks) {
    return JSON.stringify(SupportCopilotMessageLinks$outboundSchema.parse(supportCopilotMessageLinks));
}
export function supportCopilotMessageLinksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SupportCopilotMessageLinks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotMessageLinks' from JSON`);
}
/** @internal */
export const SupportCopilotMessageId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const SupportCopilotMessageId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageId$;
(function (SupportCopilotMessageId$) {
    /** @deprecated use `SupportCopilotMessageId$inboundSchema` instead. */
    SupportCopilotMessageId$.inboundSchema = SupportCopilotMessageId$inboundSchema;
    /** @deprecated use `SupportCopilotMessageId$outboundSchema` instead. */
    SupportCopilotMessageId$.outboundSchema = SupportCopilotMessageId$outboundSchema;
})(SupportCopilotMessageId$ || (SupportCopilotMessageId$ = {}));
export function supportCopilotMessageIdToJSON(supportCopilotMessageId) {
    return JSON.stringify(SupportCopilotMessageId$outboundSchema.parse(supportCopilotMessageId));
}
export function supportCopilotMessageIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SupportCopilotMessageId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotMessageId' from JSON`);
}
/** @internal */
export const SupportCopilotMessageUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const SupportCopilotMessageUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageUserId$;
(function (SupportCopilotMessageUserId$) {
    /** @deprecated use `SupportCopilotMessageUserId$inboundSchema` instead. */
    SupportCopilotMessageUserId$.inboundSchema = SupportCopilotMessageUserId$inboundSchema;
    /** @deprecated use `SupportCopilotMessageUserId$outboundSchema` instead. */
    SupportCopilotMessageUserId$.outboundSchema = SupportCopilotMessageUserId$outboundSchema;
})(SupportCopilotMessageUserId$ || (SupportCopilotMessageUserId$ = {}));
export function supportCopilotMessageUserIdToJSON(supportCopilotMessageUserId) {
    return JSON.stringify(SupportCopilotMessageUserId$outboundSchema.parse(supportCopilotMessageUserId));
}
export function supportCopilotMessageUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SupportCopilotMessageUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotMessageUserId' from JSON`);
}
/** @internal */
export const SupportCopilotMessageUserType$inboundSchema = z.nativeEnum(SupportCopilotMessageUserType);
/** @internal */
export const SupportCopilotMessageUserType$outboundSchema = SupportCopilotMessageUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageUserType$;
(function (SupportCopilotMessageUserType$) {
    /** @deprecated use `SupportCopilotMessageUserType$inboundSchema` instead. */
    SupportCopilotMessageUserType$.inboundSchema = SupportCopilotMessageUserType$inboundSchema;
    /** @deprecated use `SupportCopilotMessageUserType$outboundSchema` instead. */
    SupportCopilotMessageUserType$.outboundSchema = SupportCopilotMessageUserType$outboundSchema;
})(SupportCopilotMessageUserType$ || (SupportCopilotMessageUserType$ = {}));
/** @internal */
export const SupportCopilotMessageUserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SupportCopilotMessageUserType$inboundSchema)
        .optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const SupportCopilotMessageUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SupportCopilotMessageUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessageUserProperties$;
(function (SupportCopilotMessageUserProperties$) {
    /** @deprecated use `SupportCopilotMessageUserProperties$inboundSchema` instead. */
    SupportCopilotMessageUserProperties$.inboundSchema = SupportCopilotMessageUserProperties$inboundSchema;
    /** @deprecated use `SupportCopilotMessageUserProperties$outboundSchema` instead. */
    SupportCopilotMessageUserProperties$.outboundSchema = SupportCopilotMessageUserProperties$outboundSchema;
})(SupportCopilotMessageUserProperties$ || (SupportCopilotMessageUserProperties$ = {}));
export function supportCopilotMessageUserPropertiesToJSON(supportCopilotMessageUserProperties) {
    return JSON.stringify(SupportCopilotMessageUserProperties$outboundSchema.parse(supportCopilotMessageUserProperties));
}
export function supportCopilotMessageUserPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SupportCopilotMessageUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotMessageUserProperties' from JSON`);
}
/** @internal */
export const SupportCopilotMessage$inboundSchema = z.object({
    id: z.string(),
    type: SupportCopilotMessageType$inboundSchema,
    externalId: z.nullable(z.string()),
    externalUrl: z.nullable(z.string()),
    conversationId: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    role: z.string(),
    content: z.nullable(z.string()),
    name: z.nullable(z.string()).optional(),
    links: z.nullable(z.array(z.lazy(() => SupportCopilotMessageLinks$inboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => SupportCopilotMessageUserProperties$inboundSchema)).optional(),
});
/** @internal */
export const SupportCopilotMessage$outboundSchema = z.object({
    id: z.string(),
    type: SupportCopilotMessageType$outboundSchema,
    externalId: z.nullable(z.string()),
    externalUrl: z.nullable(z.string()),
    conversationId: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    role: z.string(),
    content: z.nullable(z.string()),
    name: z.nullable(z.string()).optional(),
    links: z.nullable(z.array(z.lazy(() => SupportCopilotMessageLinks$outboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => SupportCopilotMessageUserProperties$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SupportCopilotMessage$;
(function (SupportCopilotMessage$) {
    /** @deprecated use `SupportCopilotMessage$inboundSchema` instead. */
    SupportCopilotMessage$.inboundSchema = SupportCopilotMessage$inboundSchema;
    /** @deprecated use `SupportCopilotMessage$outboundSchema` instead. */
    SupportCopilotMessage$.outboundSchema = SupportCopilotMessage$outboundSchema;
})(SupportCopilotMessage$ || (SupportCopilotMessage$ = {}));
export function supportCopilotMessageToJSON(supportCopilotMessage) {
    return JSON.stringify(SupportCopilotMessage$outboundSchema.parse(supportCopilotMessage));
}
export function supportCopilotMessageFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SupportCopilotMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SupportCopilotMessage' from JSON`);
}
//# sourceMappingURL=supportcopilotmessage.js.map