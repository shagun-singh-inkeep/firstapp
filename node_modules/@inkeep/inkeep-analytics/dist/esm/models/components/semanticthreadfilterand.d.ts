import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { SemanticThreadFilter, SemanticThreadFilter$Outbound } from "./semanticthreadfilter.js";
export type SemanticThreadFilterANDAND = SemanticThreadFilter;
/**
 * SemanticThreadFilter AND operator
 */
export type SemanticThreadFilterAND = {
    /**
     * SemanticThreadFilter AND condition
     */
    and: Array<SemanticThreadFilter>;
};
/** @internal */
export declare const SemanticThreadFilterANDAND$inboundSchema: z.ZodType<SemanticThreadFilterANDAND, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterANDAND$Outbound = SemanticThreadFilter$Outbound;
/** @internal */
export declare const SemanticThreadFilterANDAND$outboundSchema: z.ZodType<SemanticThreadFilterANDAND$Outbound, z.ZodTypeDef, SemanticThreadFilterANDAND>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterANDAND$ {
    /** @deprecated use `SemanticThreadFilterANDAND$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterANDAND$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilter$Outbound, z.ZodTypeDef, SemanticThreadFilter>;
    /** @deprecated use `SemanticThreadFilterANDAND$Outbound` instead. */
    type Outbound = SemanticThreadFilterANDAND$Outbound;
}
export declare function semanticThreadFilterANDANDToJSON(semanticThreadFilterANDAND: SemanticThreadFilterANDAND): string;
export declare function semanticThreadFilterANDANDFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterANDAND, SDKValidationError>;
/** @internal */
export declare const SemanticThreadFilterAND$inboundSchema: z.ZodType<SemanticThreadFilterAND, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadFilterAND$Outbound = {
    and: Array<SemanticThreadFilter$Outbound>;
};
/** @internal */
export declare const SemanticThreadFilterAND$outboundSchema: z.ZodType<SemanticThreadFilterAND$Outbound, z.ZodTypeDef, SemanticThreadFilterAND>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadFilterAND$ {
    /** @deprecated use `SemanticThreadFilterAND$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadFilterAND, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadFilterAND$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadFilterAND$Outbound, z.ZodTypeDef, SemanticThreadFilterAND>;
    /** @deprecated use `SemanticThreadFilterAND$Outbound` instead. */
    type Outbound = SemanticThreadFilterAND$Outbound;
}
export declare function semanticThreadFilterANDToJSON(semanticThreadFilterAND: SemanticThreadFilterAND): string;
export declare function semanticThreadFilterANDFromJSON(jsonString: string): SafeParseResult<SemanticThreadFilterAND, SDKValidationError>;
//# sourceMappingURL=semanticthreadfilterand.d.ts.map