/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { EventsFilterAND$inboundSchema, EventsFilterAND$outboundSchema, } from "./eventsfilterand.js";
import { EventsFilterCondition$inboundSchema, EventsFilterCondition$outboundSchema, } from "./eventsfiltercondition.js";
import { EventsFilterOR$inboundSchema, EventsFilterOR$outboundSchema, } from "./eventsfilteror.js";
/** @internal */
export const EventsFilter$inboundSchema = z.union([
    EventsFilterCondition$inboundSchema,
    z.lazy(() => EventsFilterAND$inboundSchema),
    z.lazy(() => EventsFilterOR$inboundSchema),
]);
/** @internal */
export const EventsFilter$outboundSchema = z.union([
    EventsFilterCondition$outboundSchema,
    z.lazy(() => EventsFilterAND$outboundSchema),
    z.lazy(() => EventsFilterOR$outboundSchema),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var EventsFilter$;
(function (EventsFilter$) {
    /** @deprecated use `EventsFilter$inboundSchema` instead. */
    EventsFilter$.inboundSchema = EventsFilter$inboundSchema;
    /** @deprecated use `EventsFilter$outboundSchema` instead. */
    EventsFilter$.outboundSchema = EventsFilter$outboundSchema;
})(EventsFilter$ || (EventsFilter$ = {}));
export function eventsFilterToJSON(eventsFilter) {
    return JSON.stringify(EventsFilter$outboundSchema.parse(eventsFilter));
}
export function eventsFilterFromJSON(jsonString) {
    return safeParse(jsonString, (x) => EventsFilter$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventsFilter' from JSON`);
}
//# sourceMappingURL=eventsfilter.js.map