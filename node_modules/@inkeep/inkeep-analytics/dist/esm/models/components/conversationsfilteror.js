/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ConversationsFilter$inboundSchema, ConversationsFilter$outboundSchema, } from "./conversationsfilter.js";
/** @internal */
export const Or$inboundSchema = z.lazy(() => ConversationsFilter$inboundSchema);
/** @internal */
export const Or$outboundSchema = z
    .lazy(() => ConversationsFilter$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Or$;
(function (Or$) {
    /** @deprecated use `Or$inboundSchema` instead. */
    Or$.inboundSchema = Or$inboundSchema;
    /** @deprecated use `Or$outboundSchema` instead. */
    Or$.outboundSchema = Or$outboundSchema;
})(Or$ || (Or$ = {}));
export function orToJSON(or) {
    return JSON.stringify(Or$outboundSchema.parse(or));
}
export function orFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Or$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Or' from JSON`);
}
/** @internal */
export const ConversationsFilterOR$inboundSchema = z.object({
    or: z.array(z.lazy(() => ConversationsFilter$inboundSchema)),
});
/** @internal */
export const ConversationsFilterOR$outboundSchema = z.object({
    or: z.array(z.lazy(() => ConversationsFilter$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ConversationsFilterOR$;
(function (ConversationsFilterOR$) {
    /** @deprecated use `ConversationsFilterOR$inboundSchema` instead. */
    ConversationsFilterOR$.inboundSchema = ConversationsFilterOR$inboundSchema;
    /** @deprecated use `ConversationsFilterOR$outboundSchema` instead. */
    ConversationsFilterOR$.outboundSchema = ConversationsFilterOR$outboundSchema;
})(ConversationsFilterOR$ || (ConversationsFilterOR$ = {}));
export function conversationsFilterORToJSON(conversationsFilterOR) {
    return JSON.stringify(ConversationsFilterOR$outboundSchema.parse(conversationsFilterOR));
}
export function conversationsFilterORFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ConversationsFilterOR$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ConversationsFilterOR' from JSON`);
}
//# sourceMappingURL=conversationsfilteror.js.map