/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { SemanticThreadFilter$inboundSchema, SemanticThreadFilter$outboundSchema, } from "./semanticthreadfilter.js";
import { SemanticThreadGroupBy$inboundSchema, SemanticThreadGroupBy$outboundSchema, } from "./semanticthreadgroupby.js";
import { SemanticThreadOrderBy$inboundSchema, SemanticThreadOrderBy$outboundSchema, } from "./semanticthreadorderby.js";
import { SemanticThreadSelection$inboundSchema, SemanticThreadSelection$outboundSchema, } from "./semanticthreadselection.js";
/** @internal */
export const QuerySemanticThreadsRequestBody$inboundSchema = z.object({
    query: z.string().optional(),
    select: z.array(SemanticThreadSelection$inboundSchema).optional(),
    groupBy: z.array(SemanticThreadGroupBy$inboundSchema).optional(),
    where: SemanticThreadFilter$inboundSchema.optional(),
    orderBy: z.array(SemanticThreadOrderBy$inboundSchema).optional(),
    notes: z.string().optional(),
});
/** @internal */
export const QuerySemanticThreadsRequestBody$outboundSchema = z.object({
    query: z.string().optional(),
    select: z.array(SemanticThreadSelection$outboundSchema).optional(),
    groupBy: z.array(SemanticThreadGroupBy$outboundSchema).optional(),
    where: SemanticThreadFilter$outboundSchema.optional(),
    orderBy: z.array(SemanticThreadOrderBy$outboundSchema).optional(),
    notes: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QuerySemanticThreadsRequestBody$;
(function (QuerySemanticThreadsRequestBody$) {
    /** @deprecated use `QuerySemanticThreadsRequestBody$inboundSchema` instead. */
    QuerySemanticThreadsRequestBody$.inboundSchema = QuerySemanticThreadsRequestBody$inboundSchema;
    /** @deprecated use `QuerySemanticThreadsRequestBody$outboundSchema` instead. */
    QuerySemanticThreadsRequestBody$.outboundSchema = QuerySemanticThreadsRequestBody$outboundSchema;
})(QuerySemanticThreadsRequestBody$ || (QuerySemanticThreadsRequestBody$ = {}));
export function querySemanticThreadsRequestBodyToJSON(querySemanticThreadsRequestBody) {
    return JSON.stringify(QuerySemanticThreadsRequestBody$outboundSchema.parse(querySemanticThreadsRequestBody));
}
export function querySemanticThreadsRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QuerySemanticThreadsRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QuerySemanticThreadsRequestBody' from JSON`);
}
//# sourceMappingURL=querysemanticthreadsrequestbody.js.map