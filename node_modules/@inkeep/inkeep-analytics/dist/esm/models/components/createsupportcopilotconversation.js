/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
export const CreateSupportCopilotConversationType = {
    SupportCopilot: "support_copilot",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const CreateSupportCopilotConversationUserType = {
    User: "user",
    Member: "member",
};
export const CreateSupportCopilotConversationVisibility = {
    Private: "private",
    Public: "public",
};
export const CreateSupportCopilotConversationType1 = {
    Documentation: "documentation",
    Site: "site",
    DiscoursePost: "discourse_post",
    GithubIssue: "github_issue",
    GithubDiscussion: "github_discussion",
    StackoverflowQuestion: "stackoverflow_question",
    DiscordForumPost: "discord_forum_post",
    DiscordMessage: "discord_message",
    CustomQuestionAnswer: "custom_question_answer",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const CreateSupportCopilotConversationMessagesUserType = {
    User: "user",
    Member: "member",
};
/** @internal */
export const CreateSupportCopilotConversationType$inboundSchema = z.nativeEnum(CreateSupportCopilotConversationType);
/** @internal */
export const CreateSupportCopilotConversationType$outboundSchema = CreateSupportCopilotConversationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationType$;
(function (CreateSupportCopilotConversationType$) {
    /** @deprecated use `CreateSupportCopilotConversationType$inboundSchema` instead. */
    CreateSupportCopilotConversationType$.inboundSchema = CreateSupportCopilotConversationType$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationType$outboundSchema` instead. */
    CreateSupportCopilotConversationType$.outboundSchema = CreateSupportCopilotConversationType$outboundSchema;
})(CreateSupportCopilotConversationType$ || (CreateSupportCopilotConversationType$ = {}));
/** @internal */
export const CreateSupportCopilotConversationId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateSupportCopilotConversationId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationId$;
(function (CreateSupportCopilotConversationId$) {
    /** @deprecated use `CreateSupportCopilotConversationId$inboundSchema` instead. */
    CreateSupportCopilotConversationId$.inboundSchema = CreateSupportCopilotConversationId$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationId$outboundSchema` instead. */
    CreateSupportCopilotConversationId$.outboundSchema = CreateSupportCopilotConversationId$outboundSchema;
})(CreateSupportCopilotConversationId$ || (CreateSupportCopilotConversationId$ = {}));
export function createSupportCopilotConversationIdToJSON(createSupportCopilotConversationId) {
    return JSON.stringify(CreateSupportCopilotConversationId$outboundSchema.parse(createSupportCopilotConversationId));
}
export function createSupportCopilotConversationIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationId' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateSupportCopilotConversationUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationUserId$;
(function (CreateSupportCopilotConversationUserId$) {
    /** @deprecated use `CreateSupportCopilotConversationUserId$inboundSchema` instead. */
    CreateSupportCopilotConversationUserId$.inboundSchema = CreateSupportCopilotConversationUserId$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationUserId$outboundSchema` instead. */
    CreateSupportCopilotConversationUserId$.outboundSchema = CreateSupportCopilotConversationUserId$outboundSchema;
})(CreateSupportCopilotConversationUserId$ || (CreateSupportCopilotConversationUserId$ = {}));
export function createSupportCopilotConversationUserIdToJSON(createSupportCopilotConversationUserId) {
    return JSON.stringify(CreateSupportCopilotConversationUserId$outboundSchema.parse(createSupportCopilotConversationUserId));
}
export function createSupportCopilotConversationUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationUserId' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationUserType$inboundSchema = z
    .nativeEnum(CreateSupportCopilotConversationUserType);
/** @internal */
export const CreateSupportCopilotConversationUserType$outboundSchema = CreateSupportCopilotConversationUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationUserType$;
(function (CreateSupportCopilotConversationUserType$) {
    /** @deprecated use `CreateSupportCopilotConversationUserType$inboundSchema` instead. */
    CreateSupportCopilotConversationUserType$.inboundSchema = CreateSupportCopilotConversationUserType$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationUserType$outboundSchema` instead. */
    CreateSupportCopilotConversationUserType$.outboundSchema = CreateSupportCopilotConversationUserType$outboundSchema;
})(CreateSupportCopilotConversationUserType$ || (CreateSupportCopilotConversationUserType$ = {}));
/** @internal */
export const CreateSupportCopilotConversationUserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(CreateSupportCopilotConversationUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const CreateSupportCopilotConversationUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(CreateSupportCopilotConversationUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationUserProperties$;
(function (CreateSupportCopilotConversationUserProperties$) {
    /** @deprecated use `CreateSupportCopilotConversationUserProperties$inboundSchema` instead. */
    CreateSupportCopilotConversationUserProperties$.inboundSchema = CreateSupportCopilotConversationUserProperties$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationUserProperties$outboundSchema` instead. */
    CreateSupportCopilotConversationUserProperties$.outboundSchema = CreateSupportCopilotConversationUserProperties$outboundSchema;
})(CreateSupportCopilotConversationUserProperties$ || (CreateSupportCopilotConversationUserProperties$ = {}));
export function createSupportCopilotConversationUserPropertiesToJSON(createSupportCopilotConversationUserProperties) {
    return JSON.stringify(CreateSupportCopilotConversationUserProperties$outboundSchema.parse(createSupportCopilotConversationUserProperties));
}
export function createSupportCopilotConversationUserPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationUserProperties' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationVisibility$inboundSchema = z
    .nativeEnum(CreateSupportCopilotConversationVisibility);
/** @internal */
export const CreateSupportCopilotConversationVisibility$outboundSchema = CreateSupportCopilotConversationVisibility$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationVisibility$;
(function (CreateSupportCopilotConversationVisibility$) {
    /** @deprecated use `CreateSupportCopilotConversationVisibility$inboundSchema` instead. */
    CreateSupportCopilotConversationVisibility$.inboundSchema = CreateSupportCopilotConversationVisibility$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationVisibility$outboundSchema` instead. */
    CreateSupportCopilotConversationVisibility$.outboundSchema = CreateSupportCopilotConversationVisibility$outboundSchema;
})(CreateSupportCopilotConversationVisibility$ || (CreateSupportCopilotConversationVisibility$ = {}));
/** @internal */
export const CreateSupportCopilotConversationType1$inboundSchema = z.nativeEnum(CreateSupportCopilotConversationType1);
/** @internal */
export const CreateSupportCopilotConversationType1$outboundSchema = CreateSupportCopilotConversationType1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationType1$;
(function (CreateSupportCopilotConversationType1$) {
    /** @deprecated use `CreateSupportCopilotConversationType1$inboundSchema` instead. */
    CreateSupportCopilotConversationType1$.inboundSchema = CreateSupportCopilotConversationType1$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationType1$outboundSchema` instead. */
    CreateSupportCopilotConversationType1$.outboundSchema = CreateSupportCopilotConversationType1$outboundSchema;
})(CreateSupportCopilotConversationType1$ || (CreateSupportCopilotConversationType1$ = {}));
/** @internal */
export const CreateSupportCopilotConversationMessagesType$inboundSchema = z.union([
    CreateSupportCopilotConversationType1$inboundSchema,
    z.string(),
]);
/** @internal */
export const CreateSupportCopilotConversationMessagesType$outboundSchema = z.union([
    CreateSupportCopilotConversationType1$outboundSchema,
    z.string(),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationMessagesType$;
(function (CreateSupportCopilotConversationMessagesType$) {
    /** @deprecated use `CreateSupportCopilotConversationMessagesType$inboundSchema` instead. */
    CreateSupportCopilotConversationMessagesType$.inboundSchema = CreateSupportCopilotConversationMessagesType$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationMessagesType$outboundSchema` instead. */
    CreateSupportCopilotConversationMessagesType$.outboundSchema = CreateSupportCopilotConversationMessagesType$outboundSchema;
})(CreateSupportCopilotConversationMessagesType$ || (CreateSupportCopilotConversationMessagesType$ = {}));
export function createSupportCopilotConversationMessagesTypeToJSON(createSupportCopilotConversationMessagesType) {
    return JSON.stringify(CreateSupportCopilotConversationMessagesType$outboundSchema.parse(createSupportCopilotConversationMessagesType));
}
export function createSupportCopilotConversationMessagesTypeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationMessagesType$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationMessagesType' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationLinks$inboundSchema = z.object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(z.union([CreateSupportCopilotConversationType1$inboundSchema, z.string()])).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const CreateSupportCopilotConversationLinks$outboundSchema = z.object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(z.union([CreateSupportCopilotConversationType1$outboundSchema, z.string()])).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationLinks$;
(function (CreateSupportCopilotConversationLinks$) {
    /** @deprecated use `CreateSupportCopilotConversationLinks$inboundSchema` instead. */
    CreateSupportCopilotConversationLinks$.inboundSchema = CreateSupportCopilotConversationLinks$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationLinks$outboundSchema` instead. */
    CreateSupportCopilotConversationLinks$.outboundSchema = CreateSupportCopilotConversationLinks$outboundSchema;
})(CreateSupportCopilotConversationLinks$ || (CreateSupportCopilotConversationLinks$ = {}));
export function createSupportCopilotConversationLinksToJSON(createSupportCopilotConversationLinks) {
    return JSON.stringify(CreateSupportCopilotConversationLinks$outboundSchema.parse(createSupportCopilotConversationLinks));
}
export function createSupportCopilotConversationLinksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationLinks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationLinks' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationMessagesId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateSupportCopilotConversationMessagesId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationMessagesId$;
(function (CreateSupportCopilotConversationMessagesId$) {
    /** @deprecated use `CreateSupportCopilotConversationMessagesId$inboundSchema` instead. */
    CreateSupportCopilotConversationMessagesId$.inboundSchema = CreateSupportCopilotConversationMessagesId$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationMessagesId$outboundSchema` instead. */
    CreateSupportCopilotConversationMessagesId$.outboundSchema = CreateSupportCopilotConversationMessagesId$outboundSchema;
})(CreateSupportCopilotConversationMessagesId$ || (CreateSupportCopilotConversationMessagesId$ = {}));
export function createSupportCopilotConversationMessagesIdToJSON(createSupportCopilotConversationMessagesId) {
    return JSON.stringify(CreateSupportCopilotConversationMessagesId$outboundSchema.parse(createSupportCopilotConversationMessagesId));
}
export function createSupportCopilotConversationMessagesIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationMessagesId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationMessagesId' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationMessagesUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateSupportCopilotConversationMessagesUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationMessagesUserId$;
(function (CreateSupportCopilotConversationMessagesUserId$) {
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$inboundSchema` instead. */
    CreateSupportCopilotConversationMessagesUserId$.inboundSchema = CreateSupportCopilotConversationMessagesUserId$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$outboundSchema` instead. */
    CreateSupportCopilotConversationMessagesUserId$.outboundSchema = CreateSupportCopilotConversationMessagesUserId$outboundSchema;
})(CreateSupportCopilotConversationMessagesUserId$ || (CreateSupportCopilotConversationMessagesUserId$ = {}));
export function createSupportCopilotConversationMessagesUserIdToJSON(createSupportCopilotConversationMessagesUserId) {
    return JSON.stringify(CreateSupportCopilotConversationMessagesUserId$outboundSchema.parse(createSupportCopilotConversationMessagesUserId));
}
export function createSupportCopilotConversationMessagesUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationMessagesUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationMessagesUserId' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationMessagesUserType$inboundSchema = z
    .nativeEnum(CreateSupportCopilotConversationMessagesUserType);
/** @internal */
export const CreateSupportCopilotConversationMessagesUserType$outboundSchema = CreateSupportCopilotConversationMessagesUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationMessagesUserType$;
(function (CreateSupportCopilotConversationMessagesUserType$) {
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserType$inboundSchema` instead. */
    CreateSupportCopilotConversationMessagesUserType$.inboundSchema = CreateSupportCopilotConversationMessagesUserType$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserType$outboundSchema` instead. */
    CreateSupportCopilotConversationMessagesUserType$.outboundSchema = CreateSupportCopilotConversationMessagesUserType$outboundSchema;
})(CreateSupportCopilotConversationMessagesUserType$ || (CreateSupportCopilotConversationMessagesUserType$ = {}));
/** @internal */
export const CreateSupportCopilotConversationMessagesUserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(CreateSupportCopilotConversationMessagesUserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const CreateSupportCopilotConversationMessagesUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(CreateSupportCopilotConversationMessagesUserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationMessagesUserProperties$;
(function (CreateSupportCopilotConversationMessagesUserProperties$) {
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$inboundSchema` instead. */
    CreateSupportCopilotConversationMessagesUserProperties$.inboundSchema = CreateSupportCopilotConversationMessagesUserProperties$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$outboundSchema` instead. */
    CreateSupportCopilotConversationMessagesUserProperties$.outboundSchema = CreateSupportCopilotConversationMessagesUserProperties$outboundSchema;
})(CreateSupportCopilotConversationMessagesUserProperties$ || (CreateSupportCopilotConversationMessagesUserProperties$ = {}));
export function createSupportCopilotConversationMessagesUserPropertiesToJSON(createSupportCopilotConversationMessagesUserProperties) {
    return JSON.stringify(CreateSupportCopilotConversationMessagesUserProperties$outboundSchema.parse(createSupportCopilotConversationMessagesUserProperties));
}
export function createSupportCopilotConversationMessagesUserPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationMessagesUserProperties$inboundSchema
        .parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationMessagesUserProperties' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversationMessages$inboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    role: z.string(),
    content: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    links: z.nullable(z.array(z.lazy(() => CreateSupportCopilotConversationLinks$inboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => CreateSupportCopilotConversationMessagesUserProperties$inboundSchema)).optional(),
});
/** @internal */
export const CreateSupportCopilotConversationMessages$outboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    role: z.string(),
    content: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    links: z.nullable(z.array(z.lazy(() => CreateSupportCopilotConversationLinks$outboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => CreateSupportCopilotConversationMessagesUserProperties$outboundSchema)).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversationMessages$;
(function (CreateSupportCopilotConversationMessages$) {
    /** @deprecated use `CreateSupportCopilotConversationMessages$inboundSchema` instead. */
    CreateSupportCopilotConversationMessages$.inboundSchema = CreateSupportCopilotConversationMessages$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversationMessages$outboundSchema` instead. */
    CreateSupportCopilotConversationMessages$.outboundSchema = CreateSupportCopilotConversationMessages$outboundSchema;
})(CreateSupportCopilotConversationMessages$ || (CreateSupportCopilotConversationMessages$ = {}));
export function createSupportCopilotConversationMessagesToJSON(createSupportCopilotConversationMessages) {
    return JSON.stringify(CreateSupportCopilotConversationMessages$outboundSchema.parse(createSupportCopilotConversationMessages));
}
export function createSupportCopilotConversationMessagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversationMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversationMessages' from JSON`);
}
/** @internal */
export const CreateSupportCopilotConversation$inboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    type: CreateSupportCopilotConversationType$inboundSchema,
    supportTicketConversationId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => CreateSupportCopilotConversationUserProperties$inboundSchema)).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    visibility: z.nullable(CreateSupportCopilotConversationVisibility$inboundSchema).optional(),
    messages: z.array(z.lazy(() => CreateSupportCopilotConversationMessages$inboundSchema)),
});
/** @internal */
export const CreateSupportCopilotConversation$outboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    type: CreateSupportCopilotConversationType$outboundSchema,
    supportTicketConversationId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => CreateSupportCopilotConversationUserProperties$outboundSchema)).optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    visibility: z.nullable(CreateSupportCopilotConversationVisibility$outboundSchema).optional(),
    messages: z.array(z.lazy(() => CreateSupportCopilotConversationMessages$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateSupportCopilotConversation$;
(function (CreateSupportCopilotConversation$) {
    /** @deprecated use `CreateSupportCopilotConversation$inboundSchema` instead. */
    CreateSupportCopilotConversation$.inboundSchema = CreateSupportCopilotConversation$inboundSchema;
    /** @deprecated use `CreateSupportCopilotConversation$outboundSchema` instead. */
    CreateSupportCopilotConversation$.outboundSchema = CreateSupportCopilotConversation$outboundSchema;
})(CreateSupportCopilotConversation$ || (CreateSupportCopilotConversation$ = {}));
export function createSupportCopilotConversationToJSON(createSupportCopilotConversation) {
    return JSON.stringify(CreateSupportCopilotConversation$outboundSchema.parse(createSupportCopilotConversation));
}
export function createSupportCopilotConversationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateSupportCopilotConversation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateSupportCopilotConversation' from JSON`);
}
//# sourceMappingURL=createsupportcopilotconversation.js.map