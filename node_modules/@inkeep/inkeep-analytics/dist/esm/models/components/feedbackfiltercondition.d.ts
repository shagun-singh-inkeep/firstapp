import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { FeedbackField } from "./feedbackfield.js";
import { FilterOperator } from "./filteroperator.js";
export type FeedbackFilterConditionValueValue4 = string | number | boolean;
export type FeedbackFilterConditionValueValue = string | number | boolean | Array<string | number | boolean | null>;
export type FeedbackFilterConditionValue7 = {
    path: Array<string>;
    value: string | number | boolean | Array<string | number | boolean | null> | null;
};
export type FeedbackFilterConditionCondition = {
    /**
     * Available fields for Feedback
     */
    field: FeedbackField;
    /**
     * Available operators for filtering data
     */
    operator: FilterOperator;
    /**
     * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
     */
    value?: any | undefined;
};
export type FeedbackFilterCondition = {
    condition: FeedbackFilterConditionCondition;
};
/** @internal */
export declare const FeedbackFilterConditionValueValue4$inboundSchema: z.ZodType<FeedbackFilterConditionValueValue4, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackFilterConditionValueValue4$Outbound = string | number | boolean;
/** @internal */
export declare const FeedbackFilterConditionValueValue4$outboundSchema: z.ZodType<FeedbackFilterConditionValueValue4$Outbound, z.ZodTypeDef, FeedbackFilterConditionValueValue4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackFilterConditionValueValue4$ {
    /** @deprecated use `FeedbackFilterConditionValueValue4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackFilterConditionValueValue4, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackFilterConditionValueValue4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackFilterConditionValueValue4$Outbound, z.ZodTypeDef, FeedbackFilterConditionValueValue4>;
    /** @deprecated use `FeedbackFilterConditionValueValue4$Outbound` instead. */
    type Outbound = FeedbackFilterConditionValueValue4$Outbound;
}
export declare function feedbackFilterConditionValueValue4ToJSON(feedbackFilterConditionValueValue4: FeedbackFilterConditionValueValue4): string;
export declare function feedbackFilterConditionValueValue4FromJSON(jsonString: string): SafeParseResult<FeedbackFilterConditionValueValue4, SDKValidationError>;
/** @internal */
export declare const FeedbackFilterConditionValueValue$inboundSchema: z.ZodType<FeedbackFilterConditionValueValue, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackFilterConditionValueValue$Outbound = string | number | boolean | Array<string | number | boolean | null>;
/** @internal */
export declare const FeedbackFilterConditionValueValue$outboundSchema: z.ZodType<FeedbackFilterConditionValueValue$Outbound, z.ZodTypeDef, FeedbackFilterConditionValueValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackFilterConditionValueValue$ {
    /** @deprecated use `FeedbackFilterConditionValueValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackFilterConditionValueValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackFilterConditionValueValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackFilterConditionValueValue$Outbound, z.ZodTypeDef, FeedbackFilterConditionValueValue>;
    /** @deprecated use `FeedbackFilterConditionValueValue$Outbound` instead. */
    type Outbound = FeedbackFilterConditionValueValue$Outbound;
}
export declare function feedbackFilterConditionValueValueToJSON(feedbackFilterConditionValueValue: FeedbackFilterConditionValueValue): string;
export declare function feedbackFilterConditionValueValueFromJSON(jsonString: string): SafeParseResult<FeedbackFilterConditionValueValue, SDKValidationError>;
/** @internal */
export declare const FeedbackFilterConditionValue7$inboundSchema: z.ZodType<FeedbackFilterConditionValue7, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackFilterConditionValue7$Outbound = {
    path: Array<string>;
    value: string | number | boolean | Array<string | number | boolean | null> | null;
};
/** @internal */
export declare const FeedbackFilterConditionValue7$outboundSchema: z.ZodType<FeedbackFilterConditionValue7$Outbound, z.ZodTypeDef, FeedbackFilterConditionValue7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackFilterConditionValue7$ {
    /** @deprecated use `FeedbackFilterConditionValue7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackFilterConditionValue7, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackFilterConditionValue7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackFilterConditionValue7$Outbound, z.ZodTypeDef, FeedbackFilterConditionValue7>;
    /** @deprecated use `FeedbackFilterConditionValue7$Outbound` instead. */
    type Outbound = FeedbackFilterConditionValue7$Outbound;
}
export declare function feedbackFilterConditionValue7ToJSON(feedbackFilterConditionValue7: FeedbackFilterConditionValue7): string;
export declare function feedbackFilterConditionValue7FromJSON(jsonString: string): SafeParseResult<FeedbackFilterConditionValue7, SDKValidationError>;
/** @internal */
export declare const FeedbackFilterConditionCondition$inboundSchema: z.ZodType<FeedbackFilterConditionCondition, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackFilterConditionCondition$Outbound = {
    field: string;
    operator: string;
    value?: any | undefined;
};
/** @internal */
export declare const FeedbackFilterConditionCondition$outboundSchema: z.ZodType<FeedbackFilterConditionCondition$Outbound, z.ZodTypeDef, FeedbackFilterConditionCondition>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackFilterConditionCondition$ {
    /** @deprecated use `FeedbackFilterConditionCondition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackFilterConditionCondition, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackFilterConditionCondition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackFilterConditionCondition$Outbound, z.ZodTypeDef, FeedbackFilterConditionCondition>;
    /** @deprecated use `FeedbackFilterConditionCondition$Outbound` instead. */
    type Outbound = FeedbackFilterConditionCondition$Outbound;
}
export declare function feedbackFilterConditionConditionToJSON(feedbackFilterConditionCondition: FeedbackFilterConditionCondition): string;
export declare function feedbackFilterConditionConditionFromJSON(jsonString: string): SafeParseResult<FeedbackFilterConditionCondition, SDKValidationError>;
/** @internal */
export declare const FeedbackFilterCondition$inboundSchema: z.ZodType<FeedbackFilterCondition, z.ZodTypeDef, unknown>;
/** @internal */
export type FeedbackFilterCondition$Outbound = {
    condition: FeedbackFilterConditionCondition$Outbound;
};
/** @internal */
export declare const FeedbackFilterCondition$outboundSchema: z.ZodType<FeedbackFilterCondition$Outbound, z.ZodTypeDef, FeedbackFilterCondition>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace FeedbackFilterCondition$ {
    /** @deprecated use `FeedbackFilterCondition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackFilterCondition, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackFilterCondition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackFilterCondition$Outbound, z.ZodTypeDef, FeedbackFilterCondition>;
    /** @deprecated use `FeedbackFilterCondition$Outbound` instead. */
    type Outbound = FeedbackFilterCondition$Outbound;
}
export declare function feedbackFilterConditionToJSON(feedbackFilterCondition: FeedbackFilterCondition): string;
export declare function feedbackFilterConditionFromJSON(jsonString: string): SafeParseResult<FeedbackFilterCondition, SDKValidationError>;
//# sourceMappingURL=feedbackfiltercondition.d.ts.map