/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ConversationsFilter$inboundSchema, ConversationsFilter$outboundSchema, } from "./conversationsfilter.js";
import { ConversationsGroupBy$inboundSchema, ConversationsGroupBy$outboundSchema, } from "./conversationsgroupby.js";
import { ConversationsOrderBy$inboundSchema, ConversationsOrderBy$outboundSchema, } from "./conversationsorderby.js";
import { ConversationsSelection$inboundSchema, ConversationsSelection$outboundSchema, } from "./conversationsselection.js";
/** @internal */
export const QueryConversationsRequestBody$inboundSchema = z.object({
    select: z.array(ConversationsSelection$inboundSchema).optional(),
    groupBy: z.array(ConversationsGroupBy$inboundSchema).optional(),
    where: ConversationsFilter$inboundSchema.optional(),
    orderBy: z.array(ConversationsOrderBy$inboundSchema).optional(),
    notes: z.string().optional(),
});
/** @internal */
export const QueryConversationsRequestBody$outboundSchema = z.object({
    select: z.array(ConversationsSelection$outboundSchema).optional(),
    groupBy: z.array(ConversationsGroupBy$outboundSchema).optional(),
    where: ConversationsFilter$outboundSchema.optional(),
    orderBy: z.array(ConversationsOrderBy$outboundSchema).optional(),
    notes: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var QueryConversationsRequestBody$;
(function (QueryConversationsRequestBody$) {
    /** @deprecated use `QueryConversationsRequestBody$inboundSchema` instead. */
    QueryConversationsRequestBody$.inboundSchema = QueryConversationsRequestBody$inboundSchema;
    /** @deprecated use `QueryConversationsRequestBody$outboundSchema` instead. */
    QueryConversationsRequestBody$.outboundSchema = QueryConversationsRequestBody$outboundSchema;
})(QueryConversationsRequestBody$ || (QueryConversationsRequestBody$ = {}));
export function queryConversationsRequestBodyToJSON(queryConversationsRequestBody) {
    return JSON.stringify(QueryConversationsRequestBody$outboundSchema.parse(queryConversationsRequestBody));
}
export function queryConversationsRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => QueryConversationsRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'QueryConversationsRequestBody' from JSON`);
}
//# sourceMappingURL=queryconversationsrequestbody.js.map