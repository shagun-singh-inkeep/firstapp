import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const ConversationsOrderByField: {
    readonly Id: "id";
    readonly UserMessageCount: "userMessageCount";
    readonly OrganizationId: "organizationId";
    readonly ProjectId: "projectId";
    readonly IntegrationId: "integrationId";
    readonly FirstMessageTime: "firstMessageTime";
    readonly Type: "type";
    readonly Properties: "properties";
    readonly UserProperties: "userProperties";
    readonly IdHour: "id_hour";
    readonly IdDay: "id_day";
    readonly IdWeek: "id_week";
    readonly IdMonth: "id_month";
    readonly UserMessageCountHour: "userMessageCount_hour";
    readonly UserMessageCountDay: "userMessageCount_day";
    readonly UserMessageCountWeek: "userMessageCount_week";
    readonly UserMessageCountMonth: "userMessageCount_month";
    readonly OrganizationIdHour: "organizationId_hour";
    readonly OrganizationIdDay: "organizationId_day";
    readonly OrganizationIdWeek: "organizationId_week";
    readonly OrganizationIdMonth: "organizationId_month";
    readonly ProjectIdHour: "projectId_hour";
    readonly ProjectIdDay: "projectId_day";
    readonly ProjectIdWeek: "projectId_week";
    readonly ProjectIdMonth: "projectId_month";
    readonly IntegrationIdHour: "integrationId_hour";
    readonly IntegrationIdDay: "integrationId_day";
    readonly IntegrationIdWeek: "integrationId_week";
    readonly IntegrationIdMonth: "integrationId_month";
    readonly FirstMessageTimeHour: "firstMessageTime_hour";
    readonly FirstMessageTimeDay: "firstMessageTime_day";
    readonly FirstMessageTimeWeek: "firstMessageTime_week";
    readonly FirstMessageTimeMonth: "firstMessageTime_month";
    readonly TypeHour: "type_hour";
    readonly TypeDay: "type_day";
    readonly TypeWeek: "type_week";
    readonly TypeMonth: "type_month";
    readonly PropertiesHour: "properties_hour";
    readonly PropertiesDay: "properties_day";
    readonly PropertiesWeek: "properties_week";
    readonly PropertiesMonth: "properties_month";
    readonly UserPropertiesHour: "userProperties_hour";
    readonly UserPropertiesDay: "userProperties_day";
    readonly UserPropertiesWeek: "userProperties_week";
    readonly UserPropertiesMonth: "userProperties_month";
    readonly SumId: "sum_id";
    readonly SumUserMessageCount: "sum_userMessageCount";
    readonly SumOrganizationId: "sum_organizationId";
    readonly SumProjectId: "sum_projectId";
    readonly SumIntegrationId: "sum_integrationId";
    readonly SumFirstMessageTime: "sum_firstMessageTime";
    readonly SumType: "sum_type";
    readonly SumProperties: "sum_properties";
    readonly SumUserProperties: "sum_userProperties";
    readonly CountId: "count_id";
    readonly CountUserMessageCount: "count_userMessageCount";
    readonly CountOrganizationId: "count_organizationId";
    readonly CountProjectId: "count_projectId";
    readonly CountIntegrationId: "count_integrationId";
    readonly CountFirstMessageTime: "count_firstMessageTime";
    readonly CountType: "count_type";
    readonly CountProperties: "count_properties";
    readonly CountUserProperties: "count_userProperties";
    readonly AvgId: "avg_id";
    readonly AvgUserMessageCount: "avg_userMessageCount";
    readonly AvgOrganizationId: "avg_organizationId";
    readonly AvgProjectId: "avg_projectId";
    readonly AvgIntegrationId: "avg_integrationId";
    readonly AvgFirstMessageTime: "avg_firstMessageTime";
    readonly AvgType: "avg_type";
    readonly AvgProperties: "avg_properties";
    readonly AvgUserProperties: "avg_userProperties";
    readonly MinId: "min_id";
    readonly MinUserMessageCount: "min_userMessageCount";
    readonly MinOrganizationId: "min_organizationId";
    readonly MinProjectId: "min_projectId";
    readonly MinIntegrationId: "min_integrationId";
    readonly MinFirstMessageTime: "min_firstMessageTime";
    readonly MinType: "min_type";
    readonly MinProperties: "min_properties";
    readonly MinUserProperties: "min_userProperties";
    readonly MaxId: "max_id";
    readonly MaxUserMessageCount: "max_userMessageCount";
    readonly MaxOrganizationId: "max_organizationId";
    readonly MaxProjectId: "max_projectId";
    readonly MaxIntegrationId: "max_integrationId";
    readonly MaxFirstMessageTime: "max_firstMessageTime";
    readonly MaxType: "max_type";
    readonly MaxProperties: "max_properties";
    readonly MaxUserProperties: "max_userProperties";
};
export type ConversationsOrderByField = ClosedEnum<typeof ConversationsOrderByField>;
export declare const Direction: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type Direction = ClosedEnum<typeof Direction>;
/**
 * Specifies how to order Conversations query results by field and direction
 */
export type ConversationsOrderBy = {
    field: ConversationsOrderByField;
    direction: Direction;
};
/** @internal */
export declare const ConversationsOrderByField$inboundSchema: z.ZodNativeEnum<typeof ConversationsOrderByField>;
/** @internal */
export declare const ConversationsOrderByField$outboundSchema: z.ZodNativeEnum<typeof ConversationsOrderByField>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConversationsOrderByField$ {
    /** @deprecated use `ConversationsOrderByField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly UserMessageCount: "userMessageCount";
        readonly OrganizationId: "organizationId";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly FirstMessageTime: "firstMessageTime";
        readonly Type: "type";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly IdHour: "id_hour";
        readonly IdDay: "id_day";
        readonly IdWeek: "id_week";
        readonly IdMonth: "id_month";
        readonly UserMessageCountHour: "userMessageCount_hour";
        readonly UserMessageCountDay: "userMessageCount_day";
        readonly UserMessageCountWeek: "userMessageCount_week";
        readonly UserMessageCountMonth: "userMessageCount_month";
        readonly OrganizationIdHour: "organizationId_hour";
        readonly OrganizationIdDay: "organizationId_day";
        readonly OrganizationIdWeek: "organizationId_week";
        readonly OrganizationIdMonth: "organizationId_month";
        readonly ProjectIdHour: "projectId_hour";
        readonly ProjectIdDay: "projectId_day";
        readonly ProjectIdWeek: "projectId_week";
        readonly ProjectIdMonth: "projectId_month";
        readonly IntegrationIdHour: "integrationId_hour";
        readonly IntegrationIdDay: "integrationId_day";
        readonly IntegrationIdWeek: "integrationId_week";
        readonly IntegrationIdMonth: "integrationId_month";
        readonly FirstMessageTimeHour: "firstMessageTime_hour";
        readonly FirstMessageTimeDay: "firstMessageTime_day";
        readonly FirstMessageTimeWeek: "firstMessageTime_week";
        readonly FirstMessageTimeMonth: "firstMessageTime_month";
        readonly TypeHour: "type_hour";
        readonly TypeDay: "type_day";
        readonly TypeWeek: "type_week";
        readonly TypeMonth: "type_month";
        readonly PropertiesHour: "properties_hour";
        readonly PropertiesDay: "properties_day";
        readonly PropertiesWeek: "properties_week";
        readonly PropertiesMonth: "properties_month";
        readonly UserPropertiesHour: "userProperties_hour";
        readonly UserPropertiesDay: "userProperties_day";
        readonly UserPropertiesWeek: "userProperties_week";
        readonly UserPropertiesMonth: "userProperties_month";
        readonly SumId: "sum_id";
        readonly SumUserMessageCount: "sum_userMessageCount";
        readonly SumOrganizationId: "sum_organizationId";
        readonly SumProjectId: "sum_projectId";
        readonly SumIntegrationId: "sum_integrationId";
        readonly SumFirstMessageTime: "sum_firstMessageTime";
        readonly SumType: "sum_type";
        readonly SumProperties: "sum_properties";
        readonly SumUserProperties: "sum_userProperties";
        readonly CountId: "count_id";
        readonly CountUserMessageCount: "count_userMessageCount";
        readonly CountOrganizationId: "count_organizationId";
        readonly CountProjectId: "count_projectId";
        readonly CountIntegrationId: "count_integrationId";
        readonly CountFirstMessageTime: "count_firstMessageTime";
        readonly CountType: "count_type";
        readonly CountProperties: "count_properties";
        readonly CountUserProperties: "count_userProperties";
        readonly AvgId: "avg_id";
        readonly AvgUserMessageCount: "avg_userMessageCount";
        readonly AvgOrganizationId: "avg_organizationId";
        readonly AvgProjectId: "avg_projectId";
        readonly AvgIntegrationId: "avg_integrationId";
        readonly AvgFirstMessageTime: "avg_firstMessageTime";
        readonly AvgType: "avg_type";
        readonly AvgProperties: "avg_properties";
        readonly AvgUserProperties: "avg_userProperties";
        readonly MinId: "min_id";
        readonly MinUserMessageCount: "min_userMessageCount";
        readonly MinOrganizationId: "min_organizationId";
        readonly MinProjectId: "min_projectId";
        readonly MinIntegrationId: "min_integrationId";
        readonly MinFirstMessageTime: "min_firstMessageTime";
        readonly MinType: "min_type";
        readonly MinProperties: "min_properties";
        readonly MinUserProperties: "min_userProperties";
        readonly MaxId: "max_id";
        readonly MaxUserMessageCount: "max_userMessageCount";
        readonly MaxOrganizationId: "max_organizationId";
        readonly MaxProjectId: "max_projectId";
        readonly MaxIntegrationId: "max_integrationId";
        readonly MaxFirstMessageTime: "max_firstMessageTime";
        readonly MaxType: "max_type";
        readonly MaxProperties: "max_properties";
        readonly MaxUserProperties: "max_userProperties";
    }>;
    /** @deprecated use `ConversationsOrderByField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Id: "id";
        readonly UserMessageCount: "userMessageCount";
        readonly OrganizationId: "organizationId";
        readonly ProjectId: "projectId";
        readonly IntegrationId: "integrationId";
        readonly FirstMessageTime: "firstMessageTime";
        readonly Type: "type";
        readonly Properties: "properties";
        readonly UserProperties: "userProperties";
        readonly IdHour: "id_hour";
        readonly IdDay: "id_day";
        readonly IdWeek: "id_week";
        readonly IdMonth: "id_month";
        readonly UserMessageCountHour: "userMessageCount_hour";
        readonly UserMessageCountDay: "userMessageCount_day";
        readonly UserMessageCountWeek: "userMessageCount_week";
        readonly UserMessageCountMonth: "userMessageCount_month";
        readonly OrganizationIdHour: "organizationId_hour";
        readonly OrganizationIdDay: "organizationId_day";
        readonly OrganizationIdWeek: "organizationId_week";
        readonly OrganizationIdMonth: "organizationId_month";
        readonly ProjectIdHour: "projectId_hour";
        readonly ProjectIdDay: "projectId_day";
        readonly ProjectIdWeek: "projectId_week";
        readonly ProjectIdMonth: "projectId_month";
        readonly IntegrationIdHour: "integrationId_hour";
        readonly IntegrationIdDay: "integrationId_day";
        readonly IntegrationIdWeek: "integrationId_week";
        readonly IntegrationIdMonth: "integrationId_month";
        readonly FirstMessageTimeHour: "firstMessageTime_hour";
        readonly FirstMessageTimeDay: "firstMessageTime_day";
        readonly FirstMessageTimeWeek: "firstMessageTime_week";
        readonly FirstMessageTimeMonth: "firstMessageTime_month";
        readonly TypeHour: "type_hour";
        readonly TypeDay: "type_day";
        readonly TypeWeek: "type_week";
        readonly TypeMonth: "type_month";
        readonly PropertiesHour: "properties_hour";
        readonly PropertiesDay: "properties_day";
        readonly PropertiesWeek: "properties_week";
        readonly PropertiesMonth: "properties_month";
        readonly UserPropertiesHour: "userProperties_hour";
        readonly UserPropertiesDay: "userProperties_day";
        readonly UserPropertiesWeek: "userProperties_week";
        readonly UserPropertiesMonth: "userProperties_month";
        readonly SumId: "sum_id";
        readonly SumUserMessageCount: "sum_userMessageCount";
        readonly SumOrganizationId: "sum_organizationId";
        readonly SumProjectId: "sum_projectId";
        readonly SumIntegrationId: "sum_integrationId";
        readonly SumFirstMessageTime: "sum_firstMessageTime";
        readonly SumType: "sum_type";
        readonly SumProperties: "sum_properties";
        readonly SumUserProperties: "sum_userProperties";
        readonly CountId: "count_id";
        readonly CountUserMessageCount: "count_userMessageCount";
        readonly CountOrganizationId: "count_organizationId";
        readonly CountProjectId: "count_projectId";
        readonly CountIntegrationId: "count_integrationId";
        readonly CountFirstMessageTime: "count_firstMessageTime";
        readonly CountType: "count_type";
        readonly CountProperties: "count_properties";
        readonly CountUserProperties: "count_userProperties";
        readonly AvgId: "avg_id";
        readonly AvgUserMessageCount: "avg_userMessageCount";
        readonly AvgOrganizationId: "avg_organizationId";
        readonly AvgProjectId: "avg_projectId";
        readonly AvgIntegrationId: "avg_integrationId";
        readonly AvgFirstMessageTime: "avg_firstMessageTime";
        readonly AvgType: "avg_type";
        readonly AvgProperties: "avg_properties";
        readonly AvgUserProperties: "avg_userProperties";
        readonly MinId: "min_id";
        readonly MinUserMessageCount: "min_userMessageCount";
        readonly MinOrganizationId: "min_organizationId";
        readonly MinProjectId: "min_projectId";
        readonly MinIntegrationId: "min_integrationId";
        readonly MinFirstMessageTime: "min_firstMessageTime";
        readonly MinType: "min_type";
        readonly MinProperties: "min_properties";
        readonly MinUserProperties: "min_userProperties";
        readonly MaxId: "max_id";
        readonly MaxUserMessageCount: "max_userMessageCount";
        readonly MaxOrganizationId: "max_organizationId";
        readonly MaxProjectId: "max_projectId";
        readonly MaxIntegrationId: "max_integrationId";
        readonly MaxFirstMessageTime: "max_firstMessageTime";
        readonly MaxType: "max_type";
        readonly MaxProperties: "max_properties";
        readonly MaxUserProperties: "max_userProperties";
    }>;
}
/** @internal */
export declare const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction>;
/** @internal */
export declare const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Direction$ {
    /** @deprecated use `Direction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Asc: "asc";
        readonly Desc: "desc";
    }>;
    /** @deprecated use `Direction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Asc: "asc";
        readonly Desc: "desc";
    }>;
}
/** @internal */
export declare const ConversationsOrderBy$inboundSchema: z.ZodType<ConversationsOrderBy, z.ZodTypeDef, unknown>;
/** @internal */
export type ConversationsOrderBy$Outbound = {
    field: string;
    direction: string;
};
/** @internal */
export declare const ConversationsOrderBy$outboundSchema: z.ZodType<ConversationsOrderBy$Outbound, z.ZodTypeDef, ConversationsOrderBy>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ConversationsOrderBy$ {
    /** @deprecated use `ConversationsOrderBy$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConversationsOrderBy, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConversationsOrderBy$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConversationsOrderBy$Outbound, z.ZodTypeDef, ConversationsOrderBy>;
    /** @deprecated use `ConversationsOrderBy$Outbound` instead. */
    type Outbound = ConversationsOrderBy$Outbound;
}
export declare function conversationsOrderByToJSON(conversationsOrderBy: ConversationsOrderBy): string;
export declare function conversationsOrderByFromJSON(jsonString: string): SafeParseResult<ConversationsOrderBy, SDKValidationError>;
//# sourceMappingURL=conversationsorderby.d.ts.map