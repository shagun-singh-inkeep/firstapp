/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { InsertConversationEvent$inboundSchema, InsertConversationEvent$outboundSchema, } from "./insertconversationevent.js";
import { InsertMessageEvent$inboundSchema, InsertMessageEvent$outboundSchema, } from "./insertmessageevent.js";
import { InsertSearchEvent$inboundSchema, InsertSearchEvent$outboundSchema, } from "./insertsearchevent.js";
/** @internal */
export const InsertEvent$inboundSchema = z.union([
    InsertMessageEvent$inboundSchema.and(z.object({ entityType: z.literal("message") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    InsertConversationEvent$inboundSchema.and(z.object({ entityType: z.literal("conversation") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    InsertSearchEvent$inboundSchema.and(z.object({ entityType: z.literal("search") }).transform((v) => ({
        entityType: v.entityType,
    }))),
]);
/** @internal */
export const InsertEvent$outboundSchema = z.union([
    InsertMessageEvent$outboundSchema.and(z.object({ entityType: z.literal("message") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    InsertConversationEvent$outboundSchema.and(z.object({ entityType: z.literal("conversation") }).transform((v) => ({
        entityType: v.entityType,
    }))),
    InsertSearchEvent$outboundSchema.and(z.object({ entityType: z.literal("search") }).transform((v) => ({
        entityType: v.entityType,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var InsertEvent$;
(function (InsertEvent$) {
    /** @deprecated use `InsertEvent$inboundSchema` instead. */
    InsertEvent$.inboundSchema = InsertEvent$inboundSchema;
    /** @deprecated use `InsertEvent$outboundSchema` instead. */
    InsertEvent$.outboundSchema = InsertEvent$outboundSchema;
})(InsertEvent$ || (InsertEvent$ = {}));
export function insertEventToJSON(insertEvent) {
    return JSON.stringify(InsertEvent$outboundSchema.parse(insertEvent));
}
export function insertEventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => InsertEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'InsertEvent' from JSON`);
}
//# sourceMappingURL=insertevent.js.map