/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { OpenAIToolCallFunction$inboundSchema, OpenAIToolCallFunction$outboundSchema, } from "./openaitoolcallfunction.js";
export const OpenAIToolCallType = {
    Function: "function",
};
/** @internal */
export const OpenAIToolCallType$inboundSchema = z.nativeEnum(OpenAIToolCallType);
/** @internal */
export const OpenAIToolCallType$outboundSchema = OpenAIToolCallType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OpenAIToolCallType$;
(function (OpenAIToolCallType$) {
    /** @deprecated use `OpenAIToolCallType$inboundSchema` instead. */
    OpenAIToolCallType$.inboundSchema = OpenAIToolCallType$inboundSchema;
    /** @deprecated use `OpenAIToolCallType$outboundSchema` instead. */
    OpenAIToolCallType$.outboundSchema = OpenAIToolCallType$outboundSchema;
})(OpenAIToolCallType$ || (OpenAIToolCallType$ = {}));
/** @internal */
export const OpenAIToolCall$inboundSchema = z.object({
    id: z.string(),
    type: OpenAIToolCallType$inboundSchema,
    function: OpenAIToolCallFunction$inboundSchema,
});
/** @internal */
export const OpenAIToolCall$outboundSchema = z.object({
    id: z.string(),
    type: OpenAIToolCallType$outboundSchema,
    function: OpenAIToolCallFunction$outboundSchema,
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OpenAIToolCall$;
(function (OpenAIToolCall$) {
    /** @deprecated use `OpenAIToolCall$inboundSchema` instead. */
    OpenAIToolCall$.inboundSchema = OpenAIToolCall$inboundSchema;
    /** @deprecated use `OpenAIToolCall$outboundSchema` instead. */
    OpenAIToolCall$.outboundSchema = OpenAIToolCall$outboundSchema;
})(OpenAIToolCall$ || (OpenAIToolCall$ = {}));
export function openAIToolCallToJSON(openAIToolCall) {
    return JSON.stringify(OpenAIToolCall$outboundSchema.parse(openAIToolCall));
}
export function openAIToolCallFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OpenAIToolCall$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OpenAIToolCall' from JSON`);
}
//# sourceMappingURL=openaitoolcall.js.map