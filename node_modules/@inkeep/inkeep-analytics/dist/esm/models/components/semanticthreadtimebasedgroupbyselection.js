/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { TimeUnit$inboundSchema, TimeUnit$outboundSchema, } from "./timeunit.js";
export const SemanticThreadTimeBasedGroupBySelectionType = {
    Time: "time",
};
export const SemanticThreadTimeBasedGroupBySelectionField = {
    Id: "id",
    MessageIds: "messageIds",
    MessagesCount: "messagesCount",
    OrganizationId: "organizationId",
    Question: "question",
    QuestionLength: "questionLength",
    Answer: "answer",
    IsOnTopic: "isOnTopic",
    IsClear: "isClear",
    IsDocumented: "isDocumented",
    IsFeatureSupported: "isFeatureSupported",
    IsAnswerConfident: "isAnswerConfident",
    GapSummary: "gapSummary",
    Subject: "subject",
    Category: "category",
    Languages: "languages",
    FirstPartyEntities: "firstPartyEntities",
    ThirdPartyEntities: "thirdPartyEntities",
    Emotion: "emotion",
    Sentiment: "sentiment",
    QuestionType: "questionType",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    Properties: "properties",
    UserProperties: "userProperties",
    FirstMessageTime: "firstMessageTime",
    LastMessageTime: "lastMessageTime",
    LastUpdated: "lastUpdated",
    HasPositiveFeedback: "hasPositiveFeedback",
    HasNegativeFeedback: "hasNegativeFeedback",
    ConversationIds: "conversationIds",
    AreAIAnnotationsVerified: "areAIAnnotationsVerified",
    IsInitialQuestionAnswer: "isInitialQuestionAnswer",
};
/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionType$inboundSchema = z
    .nativeEnum(SemanticThreadTimeBasedGroupBySelectionType);
/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionType$outboundSchema = SemanticThreadTimeBasedGroupBySelectionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadTimeBasedGroupBySelectionType$;
(function (SemanticThreadTimeBasedGroupBySelectionType$) {
    /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionType$inboundSchema` instead. */
    SemanticThreadTimeBasedGroupBySelectionType$.inboundSchema = SemanticThreadTimeBasedGroupBySelectionType$inboundSchema;
    /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionType$outboundSchema` instead. */
    SemanticThreadTimeBasedGroupBySelectionType$.outboundSchema = SemanticThreadTimeBasedGroupBySelectionType$outboundSchema;
})(SemanticThreadTimeBasedGroupBySelectionType$ || (SemanticThreadTimeBasedGroupBySelectionType$ = {}));
/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionField$inboundSchema = z
    .nativeEnum(SemanticThreadTimeBasedGroupBySelectionField);
/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionField$outboundSchema = SemanticThreadTimeBasedGroupBySelectionField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadTimeBasedGroupBySelectionField$;
(function (SemanticThreadTimeBasedGroupBySelectionField$) {
    /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionField$inboundSchema` instead. */
    SemanticThreadTimeBasedGroupBySelectionField$.inboundSchema = SemanticThreadTimeBasedGroupBySelectionField$inboundSchema;
    /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionField$outboundSchema` instead. */
    SemanticThreadTimeBasedGroupBySelectionField$.outboundSchema = SemanticThreadTimeBasedGroupBySelectionField$outboundSchema;
})(SemanticThreadTimeBasedGroupBySelectionField$ || (SemanticThreadTimeBasedGroupBySelectionField$ = {}));
/** @internal */
export const SemanticThreadTimeBasedGroupBySelection$inboundSchema = z.object({
    type: SemanticThreadTimeBasedGroupBySelectionType$inboundSchema,
    timeUnit: TimeUnit$inboundSchema,
    field: SemanticThreadTimeBasedGroupBySelectionField$inboundSchema.optional(),
});
/** @internal */
export const SemanticThreadTimeBasedGroupBySelection$outboundSchema = z.object({
    type: SemanticThreadTimeBasedGroupBySelectionType$outboundSchema,
    timeUnit: TimeUnit$outboundSchema,
    field: SemanticThreadTimeBasedGroupBySelectionField$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadTimeBasedGroupBySelection$;
(function (SemanticThreadTimeBasedGroupBySelection$) {
    /** @deprecated use `SemanticThreadTimeBasedGroupBySelection$inboundSchema` instead. */
    SemanticThreadTimeBasedGroupBySelection$.inboundSchema = SemanticThreadTimeBasedGroupBySelection$inboundSchema;
    /** @deprecated use `SemanticThreadTimeBasedGroupBySelection$outboundSchema` instead. */
    SemanticThreadTimeBasedGroupBySelection$.outboundSchema = SemanticThreadTimeBasedGroupBySelection$outboundSchema;
})(SemanticThreadTimeBasedGroupBySelection$ || (SemanticThreadTimeBasedGroupBySelection$ = {}));
export function semanticThreadTimeBasedGroupBySelectionToJSON(semanticThreadTimeBasedGroupBySelection) {
    return JSON.stringify(SemanticThreadTimeBasedGroupBySelection$outboundSchema.parse(semanticThreadTimeBasedGroupBySelection));
}
export function semanticThreadTimeBasedGroupBySelectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SemanticThreadTimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadTimeBasedGroupBySelection' from JSON`);
}
//# sourceMappingURL=semanticthreadtimebasedgroupbyselection.js.map