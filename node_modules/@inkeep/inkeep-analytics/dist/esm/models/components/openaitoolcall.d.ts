import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { OpenAIToolCallFunction, OpenAIToolCallFunction$Outbound } from "./openaitoolcallfunction.js";
export declare const OpenAIToolCallType: {
    readonly Function: "function";
};
export type OpenAIToolCallType = ClosedEnum<typeof OpenAIToolCallType>;
export type OpenAIToolCall = {
    id: string;
    type: OpenAIToolCallType;
    function: OpenAIToolCallFunction;
};
/** @internal */
export declare const OpenAIToolCallType$inboundSchema: z.ZodNativeEnum<typeof OpenAIToolCallType>;
/** @internal */
export declare const OpenAIToolCallType$outboundSchema: z.ZodNativeEnum<typeof OpenAIToolCallType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OpenAIToolCallType$ {
    /** @deprecated use `OpenAIToolCallType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Function: "function";
    }>;
    /** @deprecated use `OpenAIToolCallType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Function: "function";
    }>;
}
/** @internal */
export declare const OpenAIToolCall$inboundSchema: z.ZodType<OpenAIToolCall, z.ZodTypeDef, unknown>;
/** @internal */
export type OpenAIToolCall$Outbound = {
    id: string;
    type: string;
    function: OpenAIToolCallFunction$Outbound;
};
/** @internal */
export declare const OpenAIToolCall$outboundSchema: z.ZodType<OpenAIToolCall$Outbound, z.ZodTypeDef, OpenAIToolCall>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OpenAIToolCall$ {
    /** @deprecated use `OpenAIToolCall$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OpenAIToolCall, z.ZodTypeDef, unknown>;
    /** @deprecated use `OpenAIToolCall$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OpenAIToolCall$Outbound, z.ZodTypeDef, OpenAIToolCall>;
    /** @deprecated use `OpenAIToolCall$Outbound` instead. */
    type Outbound = OpenAIToolCall$Outbound;
}
export declare function openAIToolCallToJSON(openAIToolCall: OpenAIToolCall): string;
export declare function openAIToolCallFromJSON(jsonString: string): SafeParseResult<OpenAIToolCall, SDKValidationError>;
//# sourceMappingURL=openaitoolcall.d.ts.map