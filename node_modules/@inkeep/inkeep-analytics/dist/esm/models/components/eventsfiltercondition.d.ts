import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { EventsField } from "./eventsfield.js";
import { FilterOperator } from "./filteroperator.js";
export type Value4 = string | number | boolean;
export type EventsFilterConditionValueValue = string | number | boolean | Array<string | number | boolean | null>;
export type EventsFilterConditionValue7 = {
    path: Array<string>;
    value: string | number | boolean | Array<string | number | boolean | null> | null;
};
export type EventsFilterConditionCondition = {
    /**
     * Available fields for Events
     */
    field: EventsField;
    /**
     * Available operators for filtering data
     */
    operator: FilterOperator;
    /**
     * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
     */
    value?: any | undefined;
};
export type EventsFilterCondition = {
    condition: EventsFilterConditionCondition;
};
/** @internal */
export declare const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown>;
/** @internal */
export type Value4$Outbound = string | number | boolean;
/** @internal */
export declare const Value4$outboundSchema: z.ZodType<Value4$Outbound, z.ZodTypeDef, Value4>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Value4$ {
    /** @deprecated use `Value4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown>;
    /** @deprecated use `Value4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Value4$Outbound, z.ZodTypeDef, Value4>;
    /** @deprecated use `Value4$Outbound` instead. */
    type Outbound = Value4$Outbound;
}
export declare function value4ToJSON(value4: Value4): string;
export declare function value4FromJSON(jsonString: string): SafeParseResult<Value4, SDKValidationError>;
/** @internal */
export declare const EventsFilterConditionValueValue$inboundSchema: z.ZodType<EventsFilterConditionValueValue, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsFilterConditionValueValue$Outbound = string | number | boolean | Array<string | number | boolean | null>;
/** @internal */
export declare const EventsFilterConditionValueValue$outboundSchema: z.ZodType<EventsFilterConditionValueValue$Outbound, z.ZodTypeDef, EventsFilterConditionValueValue>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsFilterConditionValueValue$ {
    /** @deprecated use `EventsFilterConditionValueValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsFilterConditionValueValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsFilterConditionValueValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsFilterConditionValueValue$Outbound, z.ZodTypeDef, EventsFilterConditionValueValue>;
    /** @deprecated use `EventsFilterConditionValueValue$Outbound` instead. */
    type Outbound = EventsFilterConditionValueValue$Outbound;
}
export declare function eventsFilterConditionValueValueToJSON(eventsFilterConditionValueValue: EventsFilterConditionValueValue): string;
export declare function eventsFilterConditionValueValueFromJSON(jsonString: string): SafeParseResult<EventsFilterConditionValueValue, SDKValidationError>;
/** @internal */
export declare const EventsFilterConditionValue7$inboundSchema: z.ZodType<EventsFilterConditionValue7, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsFilterConditionValue7$Outbound = {
    path: Array<string>;
    value: string | number | boolean | Array<string | number | boolean | null> | null;
};
/** @internal */
export declare const EventsFilterConditionValue7$outboundSchema: z.ZodType<EventsFilterConditionValue7$Outbound, z.ZodTypeDef, EventsFilterConditionValue7>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsFilterConditionValue7$ {
    /** @deprecated use `EventsFilterConditionValue7$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsFilterConditionValue7, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsFilterConditionValue7$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsFilterConditionValue7$Outbound, z.ZodTypeDef, EventsFilterConditionValue7>;
    /** @deprecated use `EventsFilterConditionValue7$Outbound` instead. */
    type Outbound = EventsFilterConditionValue7$Outbound;
}
export declare function eventsFilterConditionValue7ToJSON(eventsFilterConditionValue7: EventsFilterConditionValue7): string;
export declare function eventsFilterConditionValue7FromJSON(jsonString: string): SafeParseResult<EventsFilterConditionValue7, SDKValidationError>;
/** @internal */
export declare const EventsFilterConditionCondition$inboundSchema: z.ZodType<EventsFilterConditionCondition, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsFilterConditionCondition$Outbound = {
    field: string;
    operator: string;
    value?: any | undefined;
};
/** @internal */
export declare const EventsFilterConditionCondition$outboundSchema: z.ZodType<EventsFilterConditionCondition$Outbound, z.ZodTypeDef, EventsFilterConditionCondition>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsFilterConditionCondition$ {
    /** @deprecated use `EventsFilterConditionCondition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsFilterConditionCondition, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsFilterConditionCondition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsFilterConditionCondition$Outbound, z.ZodTypeDef, EventsFilterConditionCondition>;
    /** @deprecated use `EventsFilterConditionCondition$Outbound` instead. */
    type Outbound = EventsFilterConditionCondition$Outbound;
}
export declare function eventsFilterConditionConditionToJSON(eventsFilterConditionCondition: EventsFilterConditionCondition): string;
export declare function eventsFilterConditionConditionFromJSON(jsonString: string): SafeParseResult<EventsFilterConditionCondition, SDKValidationError>;
/** @internal */
export declare const EventsFilterCondition$inboundSchema: z.ZodType<EventsFilterCondition, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsFilterCondition$Outbound = {
    condition: EventsFilterConditionCondition$Outbound;
};
/** @internal */
export declare const EventsFilterCondition$outboundSchema: z.ZodType<EventsFilterCondition$Outbound, z.ZodTypeDef, EventsFilterCondition>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsFilterCondition$ {
    /** @deprecated use `EventsFilterCondition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsFilterCondition, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsFilterCondition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsFilterCondition$Outbound, z.ZodTypeDef, EventsFilterCondition>;
    /** @deprecated use `EventsFilterCondition$Outbound` instead. */
    type Outbound = EventsFilterCondition$Outbound;
}
export declare function eventsFilterConditionToJSON(eventsFilterCondition: EventsFilterCondition): string;
export declare function eventsFilterConditionFromJSON(jsonString: string): SafeParseResult<EventsFilterCondition, SDKValidationError>;
//# sourceMappingURL=eventsfiltercondition.d.ts.map