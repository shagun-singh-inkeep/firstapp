import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { EventsAggregationSelection, EventsAggregationSelection$Outbound } from "./eventsaggregationselection.js";
import { EventsSimpleFieldSelection, EventsSimpleFieldSelection$Outbound } from "./eventssimplefieldselection.js";
import { EventsTimeBasedGroupBySelection, EventsTimeBasedGroupBySelection$Outbound } from "./eventstimebasedgroupbyselection.js";
/**
 * Fields to select from events
 */
export type EventsSelection = (EventsTimeBasedGroupBySelection & {
    type: "time";
}) | (EventsSimpleFieldSelection & {
    type: "field";
}) | (EventsAggregationSelection & {
    type: "aggregation";
});
/** @internal */
export declare const EventsSelection$inboundSchema: z.ZodType<EventsSelection, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsSelection$Outbound = (EventsTimeBasedGroupBySelection$Outbound & {
    type: "time";
}) | (EventsSimpleFieldSelection$Outbound & {
    type: "field";
}) | (EventsAggregationSelection$Outbound & {
    type: "aggregation";
});
/** @internal */
export declare const EventsSelection$outboundSchema: z.ZodType<EventsSelection$Outbound, z.ZodTypeDef, EventsSelection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsSelection$ {
    /** @deprecated use `EventsSelection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsSelection, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsSelection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsSelection$Outbound, z.ZodTypeDef, EventsSelection>;
    /** @deprecated use `EventsSelection$Outbound` instead. */
    type Outbound = EventsSelection$Outbound;
}
export declare function eventsSelectionToJSON(eventsSelection: EventsSelection): string;
export declare function eventsSelectionFromJSON(jsonString: string): SafeParseResult<EventsSelection, SDKValidationError>;
//# sourceMappingURL=eventsselection.d.ts.map