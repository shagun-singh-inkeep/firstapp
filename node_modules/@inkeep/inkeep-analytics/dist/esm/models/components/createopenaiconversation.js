/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$, safeParse, } from "../../lib/schemas.js";
import { OpenAIContentItem$inboundSchema, OpenAIContentItem$outboundSchema, } from "./openaicontentitem.js";
import { OpenAIToolCall$inboundSchema, OpenAIToolCall$outboundSchema, } from "./openaitoolcall.js";
export const Type = {
    Openai: "openai",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const UserType = {
    User: "user",
    Member: "member",
};
export const Visibility = {
    Private: "private",
    Public: "public",
};
export const CreateOpenAIConversationRole = {
    System: "system",
    User: "user",
    Assistant: "assistant",
};
export const CreateOpenAIConversationType1 = {
    Documentation: "documentation",
    Site: "site",
    DiscoursePost: "discourse_post",
    GithubIssue: "github_issue",
    GithubDiscussion: "github_discussion",
    StackoverflowQuestion: "stackoverflow_question",
    DiscordForumPost: "discord_forum_post",
    DiscordMessage: "discord_message",
    CustomQuestionAnswer: "custom_question_answer",
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const CreateOpenAIConversationUserType = {
    User: "user",
    Member: "member",
};
/** @internal */
export const Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
export const Type$outboundSchema = Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const Id$inboundSchema = z.union([
    z.string(),
    z.number(),
]);
/** @internal */
export const Id$outboundSchema = z
    .union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Id$;
(function (Id$) {
    /** @deprecated use `Id$inboundSchema` instead. */
    Id$.inboundSchema = Id$inboundSchema;
    /** @deprecated use `Id$outboundSchema` instead. */
    Id$.outboundSchema = Id$outboundSchema;
})(Id$ || (Id$ = {}));
export function idToJSON(id) {
    return JSON.stringify(Id$outboundSchema.parse(id));
}
export function idFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Id$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Id' from JSON`);
}
/** @internal */
export const UserId$inboundSchema = z
    .union([z.string(), z.number()]);
/** @internal */
export const UserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserId$;
(function (UserId$) {
    /** @deprecated use `UserId$inboundSchema` instead. */
    UserId$.inboundSchema = UserId$inboundSchema;
    /** @deprecated use `UserId$outboundSchema` instead. */
    UserId$.outboundSchema = UserId$outboundSchema;
})(UserId$ || (UserId$ = {}));
export function userIdToJSON(userId) {
    return JSON.stringify(UserId$outboundSchema.parse(userId));
}
export function userIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserId' from JSON`);
}
/** @internal */
export const UserType$inboundSchema = z
    .nativeEnum(UserType);
/** @internal */
export const UserType$outboundSchema = UserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserType$;
(function (UserType$) {
    /** @deprecated use `UserType$inboundSchema` instead. */
    UserType$.inboundSchema = UserType$inboundSchema;
    /** @deprecated use `UserType$outboundSchema` instead. */
    UserType$.outboundSchema = UserType$outboundSchema;
})(UserType$ || (UserType$ = {}));
/** @internal */
export const UserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(UserType$inboundSchema).optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const UserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(UserType$outboundSchema).optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UserProperties$;
(function (UserProperties$) {
    /** @deprecated use `UserProperties$inboundSchema` instead. */
    UserProperties$.inboundSchema = UserProperties$inboundSchema;
    /** @deprecated use `UserProperties$outboundSchema` instead. */
    UserProperties$.outboundSchema = UserProperties$outboundSchema;
})(UserProperties$ || (UserProperties$ = {}));
export function userPropertiesToJSON(userProperties) {
    return JSON.stringify(UserProperties$outboundSchema.parse(userProperties));
}
export function userPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserProperties' from JSON`);
}
/** @internal */
export const Visibility$inboundSchema = z
    .nativeEnum(Visibility);
/** @internal */
export const Visibility$outboundSchema = Visibility$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Visibility$;
(function (Visibility$) {
    /** @deprecated use `Visibility$inboundSchema` instead. */
    Visibility$.inboundSchema = Visibility$inboundSchema;
    /** @deprecated use `Visibility$outboundSchema` instead. */
    Visibility$.outboundSchema = Visibility$outboundSchema;
})(Visibility$ || (Visibility$ = {}));
/** @internal */
export const CreateOpenAIConversationRole$inboundSchema = z.nativeEnum(CreateOpenAIConversationRole);
/** @internal */
export const CreateOpenAIConversationRole$outboundSchema = CreateOpenAIConversationRole$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationRole$;
(function (CreateOpenAIConversationRole$) {
    /** @deprecated use `CreateOpenAIConversationRole$inboundSchema` instead. */
    CreateOpenAIConversationRole$.inboundSchema = CreateOpenAIConversationRole$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationRole$outboundSchema` instead. */
    CreateOpenAIConversationRole$.outboundSchema = CreateOpenAIConversationRole$outboundSchema;
})(CreateOpenAIConversationRole$ || (CreateOpenAIConversationRole$ = {}));
/** @internal */
export const CreateOpenAIConversationContent$inboundSchema = z.union([z.string(), z.array(OpenAIContentItem$inboundSchema)]);
/** @internal */
export const CreateOpenAIConversationContent$outboundSchema = z.union([z.string(), z.array(OpenAIContentItem$outboundSchema)]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationContent$;
(function (CreateOpenAIConversationContent$) {
    /** @deprecated use `CreateOpenAIConversationContent$inboundSchema` instead. */
    CreateOpenAIConversationContent$.inboundSchema = CreateOpenAIConversationContent$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationContent$outboundSchema` instead. */
    CreateOpenAIConversationContent$.outboundSchema = CreateOpenAIConversationContent$outboundSchema;
})(CreateOpenAIConversationContent$ || (CreateOpenAIConversationContent$ = {}));
export function createOpenAIConversationContentToJSON(createOpenAIConversationContent) {
    return JSON.stringify(CreateOpenAIConversationContent$outboundSchema.parse(createOpenAIConversationContent));
}
export function createOpenAIConversationContentFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversationContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversationContent' from JSON`);
}
/** @internal */
export const CreateOpenAIConversationType1$inboundSchema = z.nativeEnum(CreateOpenAIConversationType1);
/** @internal */
export const CreateOpenAIConversationType1$outboundSchema = CreateOpenAIConversationType1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationType1$;
(function (CreateOpenAIConversationType1$) {
    /** @deprecated use `CreateOpenAIConversationType1$inboundSchema` instead. */
    CreateOpenAIConversationType1$.inboundSchema = CreateOpenAIConversationType1$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationType1$outboundSchema` instead. */
    CreateOpenAIConversationType1$.outboundSchema = CreateOpenAIConversationType1$outboundSchema;
})(CreateOpenAIConversationType1$ || (CreateOpenAIConversationType1$ = {}));
/** @internal */
export const CreateOpenAIConversationType$inboundSchema = z.union([CreateOpenAIConversationType1$inboundSchema, z.string()]);
/** @internal */
export const CreateOpenAIConversationType$outboundSchema = z.union([CreateOpenAIConversationType1$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationType$;
(function (CreateOpenAIConversationType$) {
    /** @deprecated use `CreateOpenAIConversationType$inboundSchema` instead. */
    CreateOpenAIConversationType$.inboundSchema = CreateOpenAIConversationType$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationType$outboundSchema` instead. */
    CreateOpenAIConversationType$.outboundSchema = CreateOpenAIConversationType$outboundSchema;
})(CreateOpenAIConversationType$ || (CreateOpenAIConversationType$ = {}));
export function createOpenAIConversationTypeToJSON(createOpenAIConversationType) {
    return JSON.stringify(CreateOpenAIConversationType$outboundSchema.parse(createOpenAIConversationType));
}
export function createOpenAIConversationTypeFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversationType$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversationType' from JSON`);
}
/** @internal */
export const CreateOpenAIConversationLinks$inboundSchema = z.object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(z.union([CreateOpenAIConversationType1$inboundSchema, z.string()])).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
});
/** @internal */
export const CreateOpenAIConversationLinks$outboundSchema = z.object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(z.union([CreateOpenAIConversationType1$outboundSchema, z.string()])).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationLinks$;
(function (CreateOpenAIConversationLinks$) {
    /** @deprecated use `CreateOpenAIConversationLinks$inboundSchema` instead. */
    CreateOpenAIConversationLinks$.inboundSchema = CreateOpenAIConversationLinks$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationLinks$outboundSchema` instead. */
    CreateOpenAIConversationLinks$.outboundSchema = CreateOpenAIConversationLinks$outboundSchema;
})(CreateOpenAIConversationLinks$ || (CreateOpenAIConversationLinks$ = {}));
export function createOpenAIConversationLinksToJSON(createOpenAIConversationLinks) {
    return JSON.stringify(CreateOpenAIConversationLinks$outboundSchema.parse(createOpenAIConversationLinks));
}
export function createOpenAIConversationLinksFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversationLinks$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversationLinks' from JSON`);
}
/** @internal */
export const CreateOpenAIConversationId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateOpenAIConversationId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationId$;
(function (CreateOpenAIConversationId$) {
    /** @deprecated use `CreateOpenAIConversationId$inboundSchema` instead. */
    CreateOpenAIConversationId$.inboundSchema = CreateOpenAIConversationId$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationId$outboundSchema` instead. */
    CreateOpenAIConversationId$.outboundSchema = CreateOpenAIConversationId$outboundSchema;
})(CreateOpenAIConversationId$ || (CreateOpenAIConversationId$ = {}));
export function createOpenAIConversationIdToJSON(createOpenAIConversationId) {
    return JSON.stringify(CreateOpenAIConversationId$outboundSchema.parse(createOpenAIConversationId));
}
export function createOpenAIConversationIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversationId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversationId' from JSON`);
}
/** @internal */
export const CreateOpenAIConversationUserId$inboundSchema = z.union([z.string(), z.number()]);
/** @internal */
export const CreateOpenAIConversationUserId$outboundSchema = z.union([z.string(), z.number()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationUserId$;
(function (CreateOpenAIConversationUserId$) {
    /** @deprecated use `CreateOpenAIConversationUserId$inboundSchema` instead. */
    CreateOpenAIConversationUserId$.inboundSchema = CreateOpenAIConversationUserId$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationUserId$outboundSchema` instead. */
    CreateOpenAIConversationUserId$.outboundSchema = CreateOpenAIConversationUserId$outboundSchema;
})(CreateOpenAIConversationUserId$ || (CreateOpenAIConversationUserId$ = {}));
export function createOpenAIConversationUserIdToJSON(createOpenAIConversationUserId) {
    return JSON.stringify(CreateOpenAIConversationUserId$outboundSchema.parse(createOpenAIConversationUserId));
}
export function createOpenAIConversationUserIdFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversationUserId$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversationUserId' from JSON`);
}
/** @internal */
export const CreateOpenAIConversationUserType$inboundSchema = z.nativeEnum(CreateOpenAIConversationUserType);
/** @internal */
export const CreateOpenAIConversationUserType$outboundSchema = CreateOpenAIConversationUserType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationUserType$;
(function (CreateOpenAIConversationUserType$) {
    /** @deprecated use `CreateOpenAIConversationUserType$inboundSchema` instead. */
    CreateOpenAIConversationUserType$.inboundSchema = CreateOpenAIConversationUserType$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationUserType$outboundSchema` instead. */
    CreateOpenAIConversationUserType$.outboundSchema = CreateOpenAIConversationUserType$outboundSchema;
})(CreateOpenAIConversationUserType$ || (CreateOpenAIConversationUserType$ = {}));
/** @internal */
export const CreateOpenAIConversationUserProperties$inboundSchema = collectExtraKeys$(z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(CreateOpenAIConversationUserType$inboundSchema)
        .optional(),
}).catchall(z.any()), "additionalProperties", true);
/** @internal */
export const CreateOpenAIConversationUserProperties$outboundSchema = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(CreateOpenAIConversationUserType$outboundSchema)
        .optional(),
    additionalProperties: z.record(z.any()),
}).transform((v) => {
    return {
        ...v.additionalProperties,
        ...remap$(v, {
            additionalProperties: null,
        }),
    };
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversationUserProperties$;
(function (CreateOpenAIConversationUserProperties$) {
    /** @deprecated use `CreateOpenAIConversationUserProperties$inboundSchema` instead. */
    CreateOpenAIConversationUserProperties$.inboundSchema = CreateOpenAIConversationUserProperties$inboundSchema;
    /** @deprecated use `CreateOpenAIConversationUserProperties$outboundSchema` instead. */
    CreateOpenAIConversationUserProperties$.outboundSchema = CreateOpenAIConversationUserProperties$outboundSchema;
})(CreateOpenAIConversationUserProperties$ || (CreateOpenAIConversationUserProperties$ = {}));
export function createOpenAIConversationUserPropertiesToJSON(createOpenAIConversationUserProperties) {
    return JSON.stringify(CreateOpenAIConversationUserProperties$outboundSchema.parse(createOpenAIConversationUserProperties));
}
export function createOpenAIConversationUserPropertiesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversationUserProperties$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversationUserProperties' from JSON`);
}
/** @internal */
export const Messages$inboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    role: CreateOpenAIConversationRole$inboundSchema,
    content: z.union([z.string(), z.array(OpenAIContentItem$inboundSchema)]),
    name: z.nullable(z.string()).optional(),
    links: z.nullable(z.array(z.lazy(() => CreateOpenAIConversationLinks$inboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => CreateOpenAIConversationUserProperties$inboundSchema)).optional(),
    tool_calls: z.nullable(z.array(OpenAIToolCall$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "tool_calls": "toolCalls",
    });
});
/** @internal */
export const Messages$outboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    role: CreateOpenAIConversationRole$outboundSchema,
    content: z.union([z.string(), z.array(OpenAIContentItem$outboundSchema)]),
    name: z.nullable(z.string()).optional(),
    links: z.nullable(z.array(z.lazy(() => CreateOpenAIConversationLinks$outboundSchema))).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => CreateOpenAIConversationUserProperties$outboundSchema)).optional(),
    toolCalls: z.nullable(z.array(OpenAIToolCall$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        toolCalls: "tool_calls",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Messages$;
(function (Messages$) {
    /** @deprecated use `Messages$inboundSchema` instead. */
    Messages$.inboundSchema = Messages$inboundSchema;
    /** @deprecated use `Messages$outboundSchema` instead. */
    Messages$.outboundSchema = Messages$outboundSchema;
})(Messages$ || (Messages$ = {}));
export function messagesToJSON(messages) {
    return JSON.stringify(Messages$outboundSchema.parse(messages));
}
export function messagesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Messages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Messages' from JSON`);
}
/** @internal */
export const CreateOpenAIConversation$inboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    type: Type$inboundSchema,
    supportTicketConversationId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    updatedAt: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => UserProperties$inboundSchema))
        .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    visibility: z.nullable(Visibility$inboundSchema).optional(),
    messages: z.array(z.lazy(() => Messages$inboundSchema)),
});
/** @internal */
export const CreateOpenAIConversation$outboundSchema = z.object({
    id: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    externalUrl: z.nullable(z.string()).optional(),
    type: Type$outboundSchema,
    supportTicketConversationId: z.nullable(z.string()).optional(),
    createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    projectId: z.nullable(z.string()).optional(),
    integrationId: z.nullable(z.string()).optional(),
    properties: z.nullable(z.record(z.any())).optional(),
    userProperties: z.nullable(z.lazy(() => UserProperties$outboundSchema))
        .optional(),
    tags: z.nullable(z.array(z.string())).optional(),
    visibility: z.nullable(Visibility$outboundSchema).optional(),
    messages: z.array(z.lazy(() => Messages$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateOpenAIConversation$;
(function (CreateOpenAIConversation$) {
    /** @deprecated use `CreateOpenAIConversation$inboundSchema` instead. */
    CreateOpenAIConversation$.inboundSchema = CreateOpenAIConversation$inboundSchema;
    /** @deprecated use `CreateOpenAIConversation$outboundSchema` instead. */
    CreateOpenAIConversation$.outboundSchema = CreateOpenAIConversation$outboundSchema;
})(CreateOpenAIConversation$ || (CreateOpenAIConversation$ = {}));
export function createOpenAIConversationToJSON(createOpenAIConversation) {
    return JSON.stringify(CreateOpenAIConversation$outboundSchema.parse(createOpenAIConversation));
}
export function createOpenAIConversationFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateOpenAIConversation$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateOpenAIConversation' from JSON`);
}
//# sourceMappingURL=createopenaiconversation.js.map