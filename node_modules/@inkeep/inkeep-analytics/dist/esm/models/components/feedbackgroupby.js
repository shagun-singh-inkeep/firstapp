/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { FeedbackField$inboundSchema, FeedbackField$outboundSchema, } from "./feedbackfield.js";
/** @internal */
export const FeedbackGroupBy$inboundSchema = z.object({
    field: FeedbackField$inboundSchema,
    path: z.array(z.string()).optional(),
    includeInSelect: z.boolean().default(true),
});
/** @internal */
export const FeedbackGroupBy$outboundSchema = z.object({
    field: FeedbackField$outboundSchema,
    path: z.array(z.string()).optional(),
    includeInSelect: z.boolean().default(true),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackGroupBy$;
(function (FeedbackGroupBy$) {
    /** @deprecated use `FeedbackGroupBy$inboundSchema` instead. */
    FeedbackGroupBy$.inboundSchema = FeedbackGroupBy$inboundSchema;
    /** @deprecated use `FeedbackGroupBy$outboundSchema` instead. */
    FeedbackGroupBy$.outboundSchema = FeedbackGroupBy$outboundSchema;
})(FeedbackGroupBy$ || (FeedbackGroupBy$ = {}));
export function feedbackGroupByToJSON(feedbackGroupBy) {
    return JSON.stringify(FeedbackGroupBy$outboundSchema.parse(feedbackGroupBy));
}
export function feedbackGroupByFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackGroupBy$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackGroupBy' from JSON`);
}
//# sourceMappingURL=feedbackgroupby.js.map