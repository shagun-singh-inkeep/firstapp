import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const CreateSupportCopilotConversationType: {
    readonly SupportCopilot: "support_copilot";
};
export type CreateSupportCopilotConversationType = ClosedEnum<typeof CreateSupportCopilotConversationType>;
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type CreateSupportCopilotConversationId = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationUserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const CreateSupportCopilotConversationUserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationUserType = ClosedEnum<typeof CreateSupportCopilotConversationUserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type CreateSupportCopilotConversationUserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: CreateSupportCopilotConversationUserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export declare const CreateSupportCopilotConversationVisibility: {
    readonly Private: "private";
    readonly Public: "public";
};
export type CreateSupportCopilotConversationVisibility = ClosedEnum<typeof CreateSupportCopilotConversationVisibility>;
export declare const CreateSupportCopilotConversationType1: {
    readonly Documentation: "documentation";
    readonly Site: "site";
    readonly DiscoursePost: "discourse_post";
    readonly GithubIssue: "github_issue";
    readonly GithubDiscussion: "github_discussion";
    readonly StackoverflowQuestion: "stackoverflow_question";
    readonly DiscordForumPost: "discord_forum_post";
    readonly DiscordMessage: "discord_message";
    readonly CustomQuestionAnswer: "custom_question_answer";
};
export type CreateSupportCopilotConversationType1 = ClosedEnum<typeof CreateSupportCopilotConversationType1>;
export type CreateSupportCopilotConversationMessagesType = CreateSupportCopilotConversationType1 | string;
export type CreateSupportCopilotConversationLinks = {
    label?: string | null | undefined;
    url: string;
    title?: string | null | undefined;
    description?: string | null | undefined;
    type?: CreateSupportCopilotConversationType1 | string | null | undefined;
    breadcrumbs?: Array<string> | null | undefined;
};
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type CreateSupportCopilotConversationMessagesId = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationMessagesUserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const CreateSupportCopilotConversationMessagesUserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationMessagesUserType = ClosedEnum<typeof CreateSupportCopilotConversationMessagesUserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type CreateSupportCopilotConversationMessagesUserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: CreateSupportCopilotConversationMessagesUserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export type CreateSupportCopilotConversationMessages = {
    id?: string | undefined;
    externalId?: string | null | undefined;
    externalUrl?: string | null | undefined;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    createdAt?: Date | null | undefined;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    updatedAt?: Date | null | undefined;
    role: string;
    content?: string | null | undefined;
    name?: string | null | undefined;
    links?: Array<CreateSupportCopilotConversationLinks> | null | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: CreateSupportCopilotConversationMessagesUserProperties | null | undefined;
};
export type CreateSupportCopilotConversation = {
    id?: string | undefined;
    externalId?: string | null | undefined;
    externalUrl?: string | null | undefined;
    type: CreateSupportCopilotConversationType;
    supportTicketConversationId?: string | null | undefined;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    createdAt?: Date | null | undefined;
    /**
     * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
     */
    updatedAt?: Date | null | undefined;
    projectId?: string | null | undefined;
    integrationId?: string | null | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: CreateSupportCopilotConversationUserProperties | null | undefined;
    tags?: Array<string> | null | undefined;
    visibility?: CreateSupportCopilotConversationVisibility | null | undefined;
    messages: Array<CreateSupportCopilotConversationMessages>;
};
/** @internal */
export declare const CreateSupportCopilotConversationType$inboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationType>;
/** @internal */
export declare const CreateSupportCopilotConversationType$outboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationType$ {
    /** @deprecated use `CreateSupportCopilotConversationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly SupportCopilot: "support_copilot";
    }>;
    /** @deprecated use `CreateSupportCopilotConversationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly SupportCopilot: "support_copilot";
    }>;
}
/** @internal */
export declare const CreateSupportCopilotConversationId$inboundSchema: z.ZodType<CreateSupportCopilotConversationId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationId$Outbound = string | number;
/** @internal */
export declare const CreateSupportCopilotConversationId$outboundSchema: z.ZodType<CreateSupportCopilotConversationId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationId$ {
    /** @deprecated use `CreateSupportCopilotConversationId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationId>;
    /** @deprecated use `CreateSupportCopilotConversationId$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationId$Outbound;
}
export declare function createSupportCopilotConversationIdToJSON(createSupportCopilotConversationId: CreateSupportCopilotConversationId): string;
export declare function createSupportCopilotConversationIdFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationId, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationUserId$inboundSchema: z.ZodType<CreateSupportCopilotConversationUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationUserId$Outbound = string | number;
/** @internal */
export declare const CreateSupportCopilotConversationUserId$outboundSchema: z.ZodType<CreateSupportCopilotConversationUserId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationUserId$ {
    /** @deprecated use `CreateSupportCopilotConversationUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationUserId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationUserId>;
    /** @deprecated use `CreateSupportCopilotConversationUserId$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationUserId$Outbound;
}
export declare function createSupportCopilotConversationUserIdToJSON(createSupportCopilotConversationUserId: CreateSupportCopilotConversationUserId): string;
export declare function createSupportCopilotConversationUserIdFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationUserId, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationUserType$inboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationUserType>;
/** @internal */
export declare const CreateSupportCopilotConversationUserType$outboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationUserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationUserType$ {
    /** @deprecated use `CreateSupportCopilotConversationUserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `CreateSupportCopilotConversationUserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const CreateSupportCopilotConversationUserProperties$inboundSchema: z.ZodType<CreateSupportCopilotConversationUserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationUserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const CreateSupportCopilotConversationUserProperties$outboundSchema: z.ZodType<CreateSupportCopilotConversationUserProperties$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationUserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationUserProperties$ {
    /** @deprecated use `CreateSupportCopilotConversationUserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationUserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationUserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationUserProperties$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationUserProperties>;
    /** @deprecated use `CreateSupportCopilotConversationUserProperties$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationUserProperties$Outbound;
}
export declare function createSupportCopilotConversationUserPropertiesToJSON(createSupportCopilotConversationUserProperties: CreateSupportCopilotConversationUserProperties): string;
export declare function createSupportCopilotConversationUserPropertiesFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationUserProperties, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationVisibility$inboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationVisibility>;
/** @internal */
export declare const CreateSupportCopilotConversationVisibility$outboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationVisibility>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationVisibility$ {
    /** @deprecated use `CreateSupportCopilotConversationVisibility$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Private: "private";
        readonly Public: "public";
    }>;
    /** @deprecated use `CreateSupportCopilotConversationVisibility$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Private: "private";
        readonly Public: "public";
    }>;
}
/** @internal */
export declare const CreateSupportCopilotConversationType1$inboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationType1>;
/** @internal */
export declare const CreateSupportCopilotConversationType1$outboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationType1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationType1$ {
    /** @deprecated use `CreateSupportCopilotConversationType1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Documentation: "documentation";
        readonly Site: "site";
        readonly DiscoursePost: "discourse_post";
        readonly GithubIssue: "github_issue";
        readonly GithubDiscussion: "github_discussion";
        readonly StackoverflowQuestion: "stackoverflow_question";
        readonly DiscordForumPost: "discord_forum_post";
        readonly DiscordMessage: "discord_message";
        readonly CustomQuestionAnswer: "custom_question_answer";
    }>;
    /** @deprecated use `CreateSupportCopilotConversationType1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Documentation: "documentation";
        readonly Site: "site";
        readonly DiscoursePost: "discourse_post";
        readonly GithubIssue: "github_issue";
        readonly GithubDiscussion: "github_discussion";
        readonly StackoverflowQuestion: "stackoverflow_question";
        readonly DiscordForumPost: "discord_forum_post";
        readonly DiscordMessage: "discord_message";
        readonly CustomQuestionAnswer: "custom_question_answer";
    }>;
}
/** @internal */
export declare const CreateSupportCopilotConversationMessagesType$inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesType, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationMessagesType$Outbound = string | string;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesType$outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesType$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationMessagesType$ {
    /** @deprecated use `CreateSupportCopilotConversationMessagesType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<string, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<string, z.ZodTypeDef, string>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesType$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationMessagesType$Outbound;
}
export declare function createSupportCopilotConversationMessagesTypeToJSON(createSupportCopilotConversationMessagesType: CreateSupportCopilotConversationMessagesType): string;
export declare function createSupportCopilotConversationMessagesTypeFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationMessagesType, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationLinks$inboundSchema: z.ZodType<CreateSupportCopilotConversationLinks, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationLinks$Outbound = {
    label?: string | null | undefined;
    url: string;
    title?: string | null | undefined;
    description?: string | null | undefined;
    type?: string | string | null | undefined;
    breadcrumbs?: Array<string> | null | undefined;
};
/** @internal */
export declare const CreateSupportCopilotConversationLinks$outboundSchema: z.ZodType<CreateSupportCopilotConversationLinks$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationLinks>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationLinks$ {
    /** @deprecated use `CreateSupportCopilotConversationLinks$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationLinks, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationLinks$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationLinks$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationLinks>;
    /** @deprecated use `CreateSupportCopilotConversationLinks$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationLinks$Outbound;
}
export declare function createSupportCopilotConversationLinksToJSON(createSupportCopilotConversationLinks: CreateSupportCopilotConversationLinks): string;
export declare function createSupportCopilotConversationLinksFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationLinks, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesId$inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationMessagesId$Outbound = string | number;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesId$outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationMessagesId$ {
    /** @deprecated use `CreateSupportCopilotConversationMessagesId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesId>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesId$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationMessagesId$Outbound;
}
export declare function createSupportCopilotConversationMessagesIdToJSON(createSupportCopilotConversationMessagesId: CreateSupportCopilotConversationMessagesId): string;
export declare function createSupportCopilotConversationMessagesIdFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationMessagesId, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesUserId$inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationMessagesUserId$Outbound = string | number;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesUserId$outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationMessagesUserId$ {
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserId$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesUserId>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationMessagesUserId$Outbound;
}
export declare function createSupportCopilotConversationMessagesUserIdToJSON(createSupportCopilotConversationMessagesUserId: CreateSupportCopilotConversationMessagesUserId): string;
export declare function createSupportCopilotConversationMessagesUserIdFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationMessagesUserId, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesUserType$inboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationMessagesUserType>;
/** @internal */
export declare const CreateSupportCopilotConversationMessagesUserType$outboundSchema: z.ZodNativeEnum<typeof CreateSupportCopilotConversationMessagesUserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationMessagesUserType$ {
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const CreateSupportCopilotConversationMessagesUserProperties$inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationMessagesUserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const CreateSupportCopilotConversationMessagesUserProperties$outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserProperties$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesUserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationMessagesUserProperties$ {
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationMessagesUserProperties$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessagesUserProperties>;
    /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationMessagesUserProperties$Outbound;
}
export declare function createSupportCopilotConversationMessagesUserPropertiesToJSON(createSupportCopilotConversationMessagesUserProperties: CreateSupportCopilotConversationMessagesUserProperties): string;
export declare function createSupportCopilotConversationMessagesUserPropertiesFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationMessagesUserProperties, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversationMessages$inboundSchema: z.ZodType<CreateSupportCopilotConversationMessages, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversationMessages$Outbound = {
    id?: string | undefined;
    externalId?: string | null | undefined;
    externalUrl?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    role: string;
    content?: string | null | undefined;
    name?: string | null | undefined;
    links?: Array<CreateSupportCopilotConversationLinks$Outbound> | null | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: CreateSupportCopilotConversationMessagesUserProperties$Outbound | null | undefined;
};
/** @internal */
export declare const CreateSupportCopilotConversationMessages$outboundSchema: z.ZodType<CreateSupportCopilotConversationMessages$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessages>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversationMessages$ {
    /** @deprecated use `CreateSupportCopilotConversationMessages$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversationMessages, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversationMessages$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversationMessages$Outbound, z.ZodTypeDef, CreateSupportCopilotConversationMessages>;
    /** @deprecated use `CreateSupportCopilotConversationMessages$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversationMessages$Outbound;
}
export declare function createSupportCopilotConversationMessagesToJSON(createSupportCopilotConversationMessages: CreateSupportCopilotConversationMessages): string;
export declare function createSupportCopilotConversationMessagesFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversationMessages, SDKValidationError>;
/** @internal */
export declare const CreateSupportCopilotConversation$inboundSchema: z.ZodType<CreateSupportCopilotConversation, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateSupportCopilotConversation$Outbound = {
    id?: string | undefined;
    externalId?: string | null | undefined;
    externalUrl?: string | null | undefined;
    type: string;
    supportTicketConversationId?: string | null | undefined;
    createdAt?: string | null | undefined;
    updatedAt?: string | null | undefined;
    projectId?: string | null | undefined;
    integrationId?: string | null | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: CreateSupportCopilotConversationUserProperties$Outbound | null | undefined;
    tags?: Array<string> | null | undefined;
    visibility?: string | null | undefined;
    messages: Array<CreateSupportCopilotConversationMessages$Outbound>;
};
/** @internal */
export declare const CreateSupportCopilotConversation$outboundSchema: z.ZodType<CreateSupportCopilotConversation$Outbound, z.ZodTypeDef, CreateSupportCopilotConversation>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateSupportCopilotConversation$ {
    /** @deprecated use `CreateSupportCopilotConversation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateSupportCopilotConversation, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateSupportCopilotConversation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateSupportCopilotConversation$Outbound, z.ZodTypeDef, CreateSupportCopilotConversation>;
    /** @deprecated use `CreateSupportCopilotConversation$Outbound` instead. */
    type Outbound = CreateSupportCopilotConversation$Outbound;
}
export declare function createSupportCopilotConversationToJSON(createSupportCopilotConversation: CreateSupportCopilotConversation): string;
export declare function createSupportCopilotConversationFromJSON(jsonString: string): SafeParseResult<CreateSupportCopilotConversation, SDKValidationError>;
//# sourceMappingURL=createsupportcopilotconversation.d.ts.map