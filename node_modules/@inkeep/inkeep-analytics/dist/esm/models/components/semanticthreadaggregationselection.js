/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
export const SemanticThreadAggregationSelectionType = {
    Aggregation: "aggregation",
};
export const SemanticThreadAggregationSelectionAggregation = {
    Sum: "sum",
    Count: "count",
    CountDistinct: "countDistinct",
    Avg: "avg",
    Min: "min",
    Max: "max",
};
export const SemanticThreadAggregationSelectionField = {
    Id: "id",
    MessageIds: "messageIds",
    MessagesCount: "messagesCount",
    OrganizationId: "organizationId",
    Question: "question",
    QuestionLength: "questionLength",
    Answer: "answer",
    IsOnTopic: "isOnTopic",
    IsClear: "isClear",
    IsDocumented: "isDocumented",
    IsFeatureSupported: "isFeatureSupported",
    IsAnswerConfident: "isAnswerConfident",
    GapSummary: "gapSummary",
    Subject: "subject",
    Category: "category",
    Languages: "languages",
    FirstPartyEntities: "firstPartyEntities",
    ThirdPartyEntities: "thirdPartyEntities",
    Emotion: "emotion",
    Sentiment: "sentiment",
    QuestionType: "questionType",
    ProjectId: "projectId",
    IntegrationId: "integrationId",
    Properties: "properties",
    UserProperties: "userProperties",
    FirstMessageTime: "firstMessageTime",
    LastMessageTime: "lastMessageTime",
    LastUpdated: "lastUpdated",
    HasPositiveFeedback: "hasPositiveFeedback",
    HasNegativeFeedback: "hasNegativeFeedback",
    ConversationIds: "conversationIds",
    AreAIAnnotationsVerified: "areAIAnnotationsVerified",
    IsInitialQuestionAnswer: "isInitialQuestionAnswer",
};
/** @internal */
export const SemanticThreadAggregationSelectionType$inboundSchema = z.nativeEnum(SemanticThreadAggregationSelectionType);
/** @internal */
export const SemanticThreadAggregationSelectionType$outboundSchema = SemanticThreadAggregationSelectionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadAggregationSelectionType$;
(function (SemanticThreadAggregationSelectionType$) {
    /** @deprecated use `SemanticThreadAggregationSelectionType$inboundSchema` instead. */
    SemanticThreadAggregationSelectionType$.inboundSchema = SemanticThreadAggregationSelectionType$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelectionType$outboundSchema` instead. */
    SemanticThreadAggregationSelectionType$.outboundSchema = SemanticThreadAggregationSelectionType$outboundSchema;
})(SemanticThreadAggregationSelectionType$ || (SemanticThreadAggregationSelectionType$ = {}));
/** @internal */
export const SemanticThreadAggregationSelectionAggregation$inboundSchema = z
    .nativeEnum(SemanticThreadAggregationSelectionAggregation);
/** @internal */
export const SemanticThreadAggregationSelectionAggregation$outboundSchema = SemanticThreadAggregationSelectionAggregation$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadAggregationSelectionAggregation$;
(function (SemanticThreadAggregationSelectionAggregation$) {
    /** @deprecated use `SemanticThreadAggregationSelectionAggregation$inboundSchema` instead. */
    SemanticThreadAggregationSelectionAggregation$.inboundSchema = SemanticThreadAggregationSelectionAggregation$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelectionAggregation$outboundSchema` instead. */
    SemanticThreadAggregationSelectionAggregation$.outboundSchema = SemanticThreadAggregationSelectionAggregation$outboundSchema;
})(SemanticThreadAggregationSelectionAggregation$ || (SemanticThreadAggregationSelectionAggregation$ = {}));
/** @internal */
export const SemanticThreadAggregationSelectionField$inboundSchema = z
    .nativeEnum(SemanticThreadAggregationSelectionField);
/** @internal */
export const SemanticThreadAggregationSelectionField$outboundSchema = SemanticThreadAggregationSelectionField$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadAggregationSelectionField$;
(function (SemanticThreadAggregationSelectionField$) {
    /** @deprecated use `SemanticThreadAggregationSelectionField$inboundSchema` instead. */
    SemanticThreadAggregationSelectionField$.inboundSchema = SemanticThreadAggregationSelectionField$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelectionField$outboundSchema` instead. */
    SemanticThreadAggregationSelectionField$.outboundSchema = SemanticThreadAggregationSelectionField$outboundSchema;
})(SemanticThreadAggregationSelectionField$ || (SemanticThreadAggregationSelectionField$ = {}));
/** @internal */
export const SemanticThreadAggregationSelection$inboundSchema = z.object({
    type: SemanticThreadAggregationSelectionType$inboundSchema,
    aggregation: SemanticThreadAggregationSelectionAggregation$inboundSchema,
    field: SemanticThreadAggregationSelectionField$inboundSchema.optional(),
    path: z.array(z.string()).optional(),
});
/** @internal */
export const SemanticThreadAggregationSelection$outboundSchema = z.object({
    type: SemanticThreadAggregationSelectionType$outboundSchema,
    aggregation: SemanticThreadAggregationSelectionAggregation$outboundSchema,
    field: SemanticThreadAggregationSelectionField$outboundSchema.optional(),
    path: z.array(z.string()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SemanticThreadAggregationSelection$;
(function (SemanticThreadAggregationSelection$) {
    /** @deprecated use `SemanticThreadAggregationSelection$inboundSchema` instead. */
    SemanticThreadAggregationSelection$.inboundSchema = SemanticThreadAggregationSelection$inboundSchema;
    /** @deprecated use `SemanticThreadAggregationSelection$outboundSchema` instead. */
    SemanticThreadAggregationSelection$.outboundSchema = SemanticThreadAggregationSelection$outboundSchema;
})(SemanticThreadAggregationSelection$ || (SemanticThreadAggregationSelection$ = {}));
export function semanticThreadAggregationSelectionToJSON(semanticThreadAggregationSelection) {
    return JSON.stringify(SemanticThreadAggregationSelection$outboundSchema.parse(semanticThreadAggregationSelection));
}
export function semanticThreadAggregationSelectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SemanticThreadAggregationSelection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SemanticThreadAggregationSelection' from JSON`);
}
//# sourceMappingURL=semanticthreadaggregationselection.js.map