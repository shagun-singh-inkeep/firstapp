/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const OpenAIToolCallFunction$inboundSchema = z.object({
    name: z.string(),
    arguments: z.string(),
});
/** @internal */
export const OpenAIToolCallFunction$outboundSchema = z.object({
    name: z.string(),
    arguments: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OpenAIToolCallFunction$;
(function (OpenAIToolCallFunction$) {
    /** @deprecated use `OpenAIToolCallFunction$inboundSchema` instead. */
    OpenAIToolCallFunction$.inboundSchema = OpenAIToolCallFunction$inboundSchema;
    /** @deprecated use `OpenAIToolCallFunction$outboundSchema` instead. */
    OpenAIToolCallFunction$.outboundSchema = OpenAIToolCallFunction$outboundSchema;
})(OpenAIToolCallFunction$ || (OpenAIToolCallFunction$ = {}));
export function openAIToolCallFunctionToJSON(openAIToolCallFunction) {
    return JSON.stringify(OpenAIToolCallFunction$outboundSchema.parse(openAIToolCallFunction));
}
export function openAIToolCallFunctionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OpenAIToolCallFunction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OpenAIToolCallFunction' from JSON`);
}
//# sourceMappingURL=openaitoolcallfunction.js.map