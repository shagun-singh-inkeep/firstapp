import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type QuerySemanticThreadsResponseDataId = string | number;
/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type QuerySemanticThreadsResponseDataUserId = string | number;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export declare const QuerySemanticThreadsResponseDataUserType: {
    readonly User: "user";
    readonly Member: "member";
};
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type QuerySemanticThreadsResponseDataUserType = ClosedEnum<typeof QuerySemanticThreadsResponseDataUserType>;
/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type QuerySemanticThreadsResponseDataUserProperties = {
    /**
     * The unique identifier for the user. This value is sent by the inkeep widget.
     */
    id?: string | number | null | undefined;
    /**
     * The type of identification for the user. This value is sent by the inkeep widget.
     */
    identificationType?: string | null | undefined;
    /**
     * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userId?: string | number | null | undefined;
    /**
     * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    supportAgentName?: string | null | undefined;
    /**
     * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
     */
    userType?: QuerySemanticThreadsResponseDataUserType | null | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};
export type SemanticThreadResultItem = {
    id?: string | undefined;
    messageIds?: any | undefined;
    messagesCount?: any | undefined;
    organizationId?: string | undefined;
    question?: string | undefined;
    questionLength?: any | undefined;
    answer?: string | undefined;
    isOnTopic?: any | undefined;
    isClear?: any | undefined;
    isDocumented?: any | undefined;
    isFeatureSupported?: any | undefined;
    isAnswerConfident?: any | undefined;
    gapSummary?: any | undefined;
    subject?: any | undefined;
    category?: any | undefined;
    languages?: any | undefined;
    firstPartyEntities?: any | undefined;
    thirdPartyEntities?: any | undefined;
    emotion?: any | undefined;
    sentiment?: any | undefined;
    questionType?: any | undefined;
    projectId?: string | undefined;
    integrationId?: string | undefined;
    /**
     * A customizable collection of custom properties or attributes.
     */
    properties?: {
        [k: string]: any;
    } | null | undefined;
    /**
     * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
     */
    userProperties?: QuerySemanticThreadsResponseDataUserProperties | null | undefined;
    firstMessageTime?: Date | undefined;
    lastMessageTime?: Date | undefined;
    lastUpdated?: Date | undefined;
    hasPositiveFeedback?: boolean | undefined;
    hasNegativeFeedback?: boolean | undefined;
    conversationIds?: Array<string> | undefined;
    areAIAnnotationsVerified?: any | undefined;
    isInitialQuestionAnswer?: boolean | undefined;
    sum?: number | undefined;
    count?: number | undefined;
    avg?: number | undefined;
    min?: number | undefined;
    max?: number | undefined;
    idHour?: string | undefined;
    idDay?: string | undefined;
    idWeek?: string | undefined;
    idMonth?: string | undefined;
    messageIdsHour?: string | undefined;
    messageIdsDay?: string | undefined;
    messageIdsWeek?: string | undefined;
    messageIdsMonth?: string | undefined;
    messagesCountHour?: string | undefined;
    messagesCountDay?: string | undefined;
    messagesCountWeek?: string | undefined;
    messagesCountMonth?: string | undefined;
    organizationIdHour?: string | undefined;
    organizationIdDay?: string | undefined;
    organizationIdWeek?: string | undefined;
    organizationIdMonth?: string | undefined;
    questionHour?: string | undefined;
    questionDay?: string | undefined;
    questionWeek?: string | undefined;
    questionMonth?: string | undefined;
    questionLengthHour?: string | undefined;
    questionLengthDay?: string | undefined;
    questionLengthWeek?: string | undefined;
    questionLengthMonth?: string | undefined;
    answerHour?: string | undefined;
    answerDay?: string | undefined;
    answerWeek?: string | undefined;
    answerMonth?: string | undefined;
    isOnTopicHour?: string | undefined;
    isOnTopicDay?: string | undefined;
    isOnTopicWeek?: string | undefined;
    isOnTopicMonth?: string | undefined;
    isClearHour?: string | undefined;
    isClearDay?: string | undefined;
    isClearWeek?: string | undefined;
    isClearMonth?: string | undefined;
    isDocumentedHour?: string | undefined;
    isDocumentedDay?: string | undefined;
    isDocumentedWeek?: string | undefined;
    isDocumentedMonth?: string | undefined;
    isFeatureSupportedHour?: string | undefined;
    isFeatureSupportedDay?: string | undefined;
    isFeatureSupportedWeek?: string | undefined;
    isFeatureSupportedMonth?: string | undefined;
    isAnswerConfidentHour?: string | undefined;
    isAnswerConfidentDay?: string | undefined;
    isAnswerConfidentWeek?: string | undefined;
    isAnswerConfidentMonth?: string | undefined;
    gapSummaryHour?: string | undefined;
    gapSummaryDay?: string | undefined;
    gapSummaryWeek?: string | undefined;
    gapSummaryMonth?: string | undefined;
    subjectHour?: string | undefined;
    subjectDay?: string | undefined;
    subjectWeek?: string | undefined;
    subjectMonth?: string | undefined;
    categoryHour?: string | undefined;
    categoryDay?: string | undefined;
    categoryWeek?: string | undefined;
    categoryMonth?: string | undefined;
    languagesHour?: string | undefined;
    languagesDay?: string | undefined;
    languagesWeek?: string | undefined;
    languagesMonth?: string | undefined;
    firstPartyEntitiesHour?: string | undefined;
    firstPartyEntitiesDay?: string | undefined;
    firstPartyEntitiesWeek?: string | undefined;
    firstPartyEntitiesMonth?: string | undefined;
    thirdPartyEntitiesHour?: string | undefined;
    thirdPartyEntitiesDay?: string | undefined;
    thirdPartyEntitiesWeek?: string | undefined;
    thirdPartyEntitiesMonth?: string | undefined;
    emotionHour?: string | undefined;
    emotionDay?: string | undefined;
    emotionWeek?: string | undefined;
    emotionMonth?: string | undefined;
    sentimentHour?: string | undefined;
    sentimentDay?: string | undefined;
    sentimentWeek?: string | undefined;
    sentimentMonth?: string | undefined;
    questionTypeHour?: string | undefined;
    questionTypeDay?: string | undefined;
    questionTypeWeek?: string | undefined;
    questionTypeMonth?: string | undefined;
    projectIdHour?: string | undefined;
    projectIdDay?: string | undefined;
    projectIdWeek?: string | undefined;
    projectIdMonth?: string | undefined;
    integrationIdHour?: string | undefined;
    integrationIdDay?: string | undefined;
    integrationIdWeek?: string | undefined;
    integrationIdMonth?: string | undefined;
    propertiesHour?: string | undefined;
    propertiesDay?: string | undefined;
    propertiesWeek?: string | undefined;
    propertiesMonth?: string | undefined;
    userPropertiesHour?: string | undefined;
    userPropertiesDay?: string | undefined;
    userPropertiesWeek?: string | undefined;
    userPropertiesMonth?: string | undefined;
    firstMessageTimeHour?: string | undefined;
    firstMessageTimeDay?: string | undefined;
    firstMessageTimeWeek?: string | undefined;
    firstMessageTimeMonth?: string | undefined;
    lastMessageTimeHour?: string | undefined;
    lastMessageTimeDay?: string | undefined;
    lastMessageTimeWeek?: string | undefined;
    lastMessageTimeMonth?: string | undefined;
    lastUpdatedHour?: string | undefined;
    lastUpdatedDay?: string | undefined;
    lastUpdatedWeek?: string | undefined;
    lastUpdatedMonth?: string | undefined;
    hasPositiveFeedbackHour?: string | undefined;
    hasPositiveFeedbackDay?: string | undefined;
    hasPositiveFeedbackWeek?: string | undefined;
    hasPositiveFeedbackMonth?: string | undefined;
    hasNegativeFeedbackHour?: string | undefined;
    hasNegativeFeedbackDay?: string | undefined;
    hasNegativeFeedbackWeek?: string | undefined;
    hasNegativeFeedbackMonth?: string | undefined;
    conversationIdsHour?: string | undefined;
    conversationIdsDay?: string | undefined;
    conversationIdsWeek?: string | undefined;
    conversationIdsMonth?: string | undefined;
    areAIAnnotationsVerifiedHour?: string | undefined;
    areAIAnnotationsVerifiedDay?: string | undefined;
    areAIAnnotationsVerifiedWeek?: string | undefined;
    areAIAnnotationsVerifiedMonth?: string | undefined;
    isInitialQuestionAnswerHour?: string | undefined;
    isInitialQuestionAnswerDay?: string | undefined;
    isInitialQuestionAnswerWeek?: string | undefined;
    isInitialQuestionAnswerMonth?: string | undefined;
    sumId?: number | undefined;
    sumMessageIds?: number | undefined;
    sumMessagesCount?: number | undefined;
    sumOrganizationId?: number | undefined;
    sumQuestion?: number | undefined;
    sumQuestionLength?: number | undefined;
    sumAnswer?: number | undefined;
    sumIsOnTopic?: number | undefined;
    sumIsClear?: number | undefined;
    sumIsDocumented?: number | undefined;
    sumIsFeatureSupported?: number | undefined;
    sumIsAnswerConfident?: number | undefined;
    sumGapSummary?: number | undefined;
    sumSubject?: number | undefined;
    sumCategory?: number | undefined;
    sumLanguages?: number | undefined;
    sumFirstPartyEntities?: number | undefined;
    sumThirdPartyEntities?: number | undefined;
    sumEmotion?: number | undefined;
    sumSentiment?: number | undefined;
    sumQuestionType?: number | undefined;
    sumProjectId?: number | undefined;
    sumIntegrationId?: number | undefined;
    sumProperties?: number | undefined;
    sumUserProperties?: number | undefined;
    sumFirstMessageTime?: number | undefined;
    sumLastMessageTime?: number | undefined;
    sumLastUpdated?: number | undefined;
    sumHasPositiveFeedback?: number | undefined;
    sumHasNegativeFeedback?: number | undefined;
    sumConversationIds?: number | undefined;
    sumAreAIAnnotationsVerified?: number | undefined;
    sumIsInitialQuestionAnswer?: number | undefined;
    countId?: number | undefined;
    countMessageIds?: number | undefined;
    countMessagesCount?: number | undefined;
    countOrganizationId?: number | undefined;
    countQuestion?: number | undefined;
    countQuestionLength?: number | undefined;
    countAnswer?: number | undefined;
    countIsOnTopic?: number | undefined;
    countIsClear?: number | undefined;
    countIsDocumented?: number | undefined;
    countIsFeatureSupported?: number | undefined;
    countIsAnswerConfident?: number | undefined;
    countGapSummary?: number | undefined;
    countSubject?: number | undefined;
    countCategory?: number | undefined;
    countLanguages?: number | undefined;
    countFirstPartyEntities?: number | undefined;
    countThirdPartyEntities?: number | undefined;
    countEmotion?: number | undefined;
    countSentiment?: number | undefined;
    countQuestionType?: number | undefined;
    countProjectId?: number | undefined;
    countIntegrationId?: number | undefined;
    countProperties?: number | undefined;
    countUserProperties?: number | undefined;
    countFirstMessageTime?: number | undefined;
    countLastMessageTime?: number | undefined;
    countLastUpdated?: number | undefined;
    countHasPositiveFeedback?: number | undefined;
    countHasNegativeFeedback?: number | undefined;
    countConversationIds?: number | undefined;
    countAreAIAnnotationsVerified?: number | undefined;
    countIsInitialQuestionAnswer?: number | undefined;
    avgId?: number | undefined;
    avgMessageIds?: number | undefined;
    avgMessagesCount?: number | undefined;
    avgOrganizationId?: number | undefined;
    avgQuestion?: number | undefined;
    avgQuestionLength?: number | undefined;
    avgAnswer?: number | undefined;
    avgIsOnTopic?: number | undefined;
    avgIsClear?: number | undefined;
    avgIsDocumented?: number | undefined;
    avgIsFeatureSupported?: number | undefined;
    avgIsAnswerConfident?: number | undefined;
    avgGapSummary?: number | undefined;
    avgSubject?: number | undefined;
    avgCategory?: number | undefined;
    avgLanguages?: number | undefined;
    avgFirstPartyEntities?: number | undefined;
    avgThirdPartyEntities?: number | undefined;
    avgEmotion?: number | undefined;
    avgSentiment?: number | undefined;
    avgQuestionType?: number | undefined;
    avgProjectId?: number | undefined;
    avgIntegrationId?: number | undefined;
    avgProperties?: number | undefined;
    avgUserProperties?: number | undefined;
    avgFirstMessageTime?: number | undefined;
    avgLastMessageTime?: number | undefined;
    avgLastUpdated?: number | undefined;
    avgHasPositiveFeedback?: number | undefined;
    avgHasNegativeFeedback?: number | undefined;
    avgConversationIds?: number | undefined;
    avgAreAIAnnotationsVerified?: number | undefined;
    avgIsInitialQuestionAnswer?: number | undefined;
    minId?: number | undefined;
    minMessageIds?: number | undefined;
    minMessagesCount?: number | undefined;
    minOrganizationId?: number | undefined;
    minQuestion?: number | undefined;
    minQuestionLength?: number | undefined;
    minAnswer?: number | undefined;
    minIsOnTopic?: number | undefined;
    minIsClear?: number | undefined;
    minIsDocumented?: number | undefined;
    minIsFeatureSupported?: number | undefined;
    minIsAnswerConfident?: number | undefined;
    minGapSummary?: number | undefined;
    minSubject?: number | undefined;
    minCategory?: number | undefined;
    minLanguages?: number | undefined;
    minFirstPartyEntities?: number | undefined;
    minThirdPartyEntities?: number | undefined;
    minEmotion?: number | undefined;
    minSentiment?: number | undefined;
    minQuestionType?: number | undefined;
    minProjectId?: number | undefined;
    minIntegrationId?: number | undefined;
    minProperties?: number | undefined;
    minUserProperties?: number | undefined;
    minFirstMessageTime?: number | undefined;
    minLastMessageTime?: number | undefined;
    minLastUpdated?: number | undefined;
    minHasPositiveFeedback?: number | undefined;
    minHasNegativeFeedback?: number | undefined;
    minConversationIds?: number | undefined;
    minAreAIAnnotationsVerified?: number | undefined;
    minIsInitialQuestionAnswer?: number | undefined;
    maxId?: number | undefined;
    maxMessageIds?: number | undefined;
    maxMessagesCount?: number | undefined;
    maxOrganizationId?: number | undefined;
    maxQuestion?: number | undefined;
    maxQuestionLength?: number | undefined;
    maxAnswer?: number | undefined;
    maxIsOnTopic?: number | undefined;
    maxIsClear?: number | undefined;
    maxIsDocumented?: number | undefined;
    maxIsFeatureSupported?: number | undefined;
    maxIsAnswerConfident?: number | undefined;
    maxGapSummary?: number | undefined;
    maxSubject?: number | undefined;
    maxCategory?: number | undefined;
    maxLanguages?: number | undefined;
    maxFirstPartyEntities?: number | undefined;
    maxThirdPartyEntities?: number | undefined;
    maxEmotion?: number | undefined;
    maxSentiment?: number | undefined;
    maxQuestionType?: number | undefined;
    maxProjectId?: number | undefined;
    maxIntegrationId?: number | undefined;
    maxProperties?: number | undefined;
    maxUserProperties?: number | undefined;
    maxFirstMessageTime?: number | undefined;
    maxLastMessageTime?: number | undefined;
    maxLastUpdated?: number | undefined;
    maxHasPositiveFeedback?: number | undefined;
    maxHasNegativeFeedback?: number | undefined;
    maxConversationIds?: number | undefined;
    maxAreAIAnnotationsVerified?: number | undefined;
    maxIsInitialQuestionAnswer?: number | undefined;
};
/**
 * Data object containing QuerySemanticThreads query results and pagination information
 */
export type QuerySemanticThreadsResponseData = {
    result: Array<SemanticThreadResultItem>;
    /**
     * Total number of results matching the query
     */
    total: number;
    /**
     * Number of results per page
     */
    pageSize: number;
    /**
     * Number of results in the current response
     */
    count: number;
};
/** @internal */
export declare const QuerySemanticThreadsResponseDataId$inboundSchema: z.ZodType<QuerySemanticThreadsResponseDataId, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsResponseDataId$Outbound = string | number;
/** @internal */
export declare const QuerySemanticThreadsResponseDataId$outboundSchema: z.ZodType<QuerySemanticThreadsResponseDataId$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseDataId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseDataId$ {
    /** @deprecated use `QuerySemanticThreadsResponseDataId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsResponseDataId, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsResponseDataId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsResponseDataId$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseDataId>;
    /** @deprecated use `QuerySemanticThreadsResponseDataId$Outbound` instead. */
    type Outbound = QuerySemanticThreadsResponseDataId$Outbound;
}
export declare function querySemanticThreadsResponseDataIdToJSON(querySemanticThreadsResponseDataId: QuerySemanticThreadsResponseDataId): string;
export declare function querySemanticThreadsResponseDataIdFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsResponseDataId, SDKValidationError>;
/** @internal */
export declare const QuerySemanticThreadsResponseDataUserId$inboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserId, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsResponseDataUserId$Outbound = string | number;
/** @internal */
export declare const QuerySemanticThreadsResponseDataUserId$outboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserId$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseDataUserId>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseDataUserId$ {
    /** @deprecated use `QuerySemanticThreadsResponseDataUserId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserId, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserId$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseDataUserId>;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserId$Outbound` instead. */
    type Outbound = QuerySemanticThreadsResponseDataUserId$Outbound;
}
export declare function querySemanticThreadsResponseDataUserIdToJSON(querySemanticThreadsResponseDataUserId: QuerySemanticThreadsResponseDataUserId): string;
export declare function querySemanticThreadsResponseDataUserIdFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsResponseDataUserId, SDKValidationError>;
/** @internal */
export declare const QuerySemanticThreadsResponseDataUserType$inboundSchema: z.ZodNativeEnum<typeof QuerySemanticThreadsResponseDataUserType>;
/** @internal */
export declare const QuerySemanticThreadsResponseDataUserType$outboundSchema: z.ZodNativeEnum<typeof QuerySemanticThreadsResponseDataUserType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseDataUserType$ {
    /** @deprecated use `QuerySemanticThreadsResponseDataUserType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
        readonly Member: "member";
    }>;
}
/** @internal */
export declare const QuerySemanticThreadsResponseDataUserProperties$inboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserProperties, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsResponseDataUserProperties$Outbound = {
    id?: string | number | null | undefined;
    identificationType?: string | null | undefined;
    userId?: string | number | null | undefined;
    supportAgentName?: string | null | undefined;
    userType?: string | null | undefined;
    [additionalProperties: string]: unknown;
};
/** @internal */
export declare const QuerySemanticThreadsResponseDataUserProperties$outboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserProperties$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseDataUserProperties>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseDataUserProperties$ {
    /** @deprecated use `QuerySemanticThreadsResponseDataUserProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsResponseDataUserProperties$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseDataUserProperties>;
    /** @deprecated use `QuerySemanticThreadsResponseDataUserProperties$Outbound` instead. */
    type Outbound = QuerySemanticThreadsResponseDataUserProperties$Outbound;
}
export declare function querySemanticThreadsResponseDataUserPropertiesToJSON(querySemanticThreadsResponseDataUserProperties: QuerySemanticThreadsResponseDataUserProperties): string;
export declare function querySemanticThreadsResponseDataUserPropertiesFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsResponseDataUserProperties, SDKValidationError>;
/** @internal */
export declare const SemanticThreadResultItem$inboundSchema: z.ZodType<SemanticThreadResultItem, z.ZodTypeDef, unknown>;
/** @internal */
export type SemanticThreadResultItem$Outbound = {
    id?: string | undefined;
    messageIds?: any | undefined;
    messagesCount?: any | undefined;
    organizationId?: string | undefined;
    question?: string | undefined;
    questionLength?: any | undefined;
    answer?: string | undefined;
    isOnTopic?: any | undefined;
    isClear?: any | undefined;
    isDocumented?: any | undefined;
    isFeatureSupported?: any | undefined;
    isAnswerConfident?: any | undefined;
    gapSummary?: any | undefined;
    subject?: any | undefined;
    category?: any | undefined;
    languages?: any | undefined;
    firstPartyEntities?: any | undefined;
    thirdPartyEntities?: any | undefined;
    emotion?: any | undefined;
    sentiment?: any | undefined;
    questionType?: any | undefined;
    projectId?: string | undefined;
    integrationId?: string | undefined;
    properties?: {
        [k: string]: any;
    } | null | undefined;
    userProperties?: QuerySemanticThreadsResponseDataUserProperties$Outbound | null | undefined;
    firstMessageTime?: string | undefined;
    lastMessageTime?: string | undefined;
    lastUpdated?: string | undefined;
    hasPositiveFeedback?: boolean | undefined;
    hasNegativeFeedback?: boolean | undefined;
    conversationIds?: Array<string> | undefined;
    areAIAnnotationsVerified?: any | undefined;
    isInitialQuestionAnswer?: boolean | undefined;
    sum?: number | undefined;
    count?: number | undefined;
    avg?: number | undefined;
    min?: number | undefined;
    max?: number | undefined;
    id_hour?: string | undefined;
    id_day?: string | undefined;
    id_week?: string | undefined;
    id_month?: string | undefined;
    messageIds_hour?: string | undefined;
    messageIds_day?: string | undefined;
    messageIds_week?: string | undefined;
    messageIds_month?: string | undefined;
    messagesCount_hour?: string | undefined;
    messagesCount_day?: string | undefined;
    messagesCount_week?: string | undefined;
    messagesCount_month?: string | undefined;
    organizationId_hour?: string | undefined;
    organizationId_day?: string | undefined;
    organizationId_week?: string | undefined;
    organizationId_month?: string | undefined;
    question_hour?: string | undefined;
    question_day?: string | undefined;
    question_week?: string | undefined;
    question_month?: string | undefined;
    questionLength_hour?: string | undefined;
    questionLength_day?: string | undefined;
    questionLength_week?: string | undefined;
    questionLength_month?: string | undefined;
    answer_hour?: string | undefined;
    answer_day?: string | undefined;
    answer_week?: string | undefined;
    answer_month?: string | undefined;
    isOnTopic_hour?: string | undefined;
    isOnTopic_day?: string | undefined;
    isOnTopic_week?: string | undefined;
    isOnTopic_month?: string | undefined;
    isClear_hour?: string | undefined;
    isClear_day?: string | undefined;
    isClear_week?: string | undefined;
    isClear_month?: string | undefined;
    isDocumented_hour?: string | undefined;
    isDocumented_day?: string | undefined;
    isDocumented_week?: string | undefined;
    isDocumented_month?: string | undefined;
    isFeatureSupported_hour?: string | undefined;
    isFeatureSupported_day?: string | undefined;
    isFeatureSupported_week?: string | undefined;
    isFeatureSupported_month?: string | undefined;
    isAnswerConfident_hour?: string | undefined;
    isAnswerConfident_day?: string | undefined;
    isAnswerConfident_week?: string | undefined;
    isAnswerConfident_month?: string | undefined;
    gapSummary_hour?: string | undefined;
    gapSummary_day?: string | undefined;
    gapSummary_week?: string | undefined;
    gapSummary_month?: string | undefined;
    subject_hour?: string | undefined;
    subject_day?: string | undefined;
    subject_week?: string | undefined;
    subject_month?: string | undefined;
    category_hour?: string | undefined;
    category_day?: string | undefined;
    category_week?: string | undefined;
    category_month?: string | undefined;
    languages_hour?: string | undefined;
    languages_day?: string | undefined;
    languages_week?: string | undefined;
    languages_month?: string | undefined;
    firstPartyEntities_hour?: string | undefined;
    firstPartyEntities_day?: string | undefined;
    firstPartyEntities_week?: string | undefined;
    firstPartyEntities_month?: string | undefined;
    thirdPartyEntities_hour?: string | undefined;
    thirdPartyEntities_day?: string | undefined;
    thirdPartyEntities_week?: string | undefined;
    thirdPartyEntities_month?: string | undefined;
    emotion_hour?: string | undefined;
    emotion_day?: string | undefined;
    emotion_week?: string | undefined;
    emotion_month?: string | undefined;
    sentiment_hour?: string | undefined;
    sentiment_day?: string | undefined;
    sentiment_week?: string | undefined;
    sentiment_month?: string | undefined;
    questionType_hour?: string | undefined;
    questionType_day?: string | undefined;
    questionType_week?: string | undefined;
    questionType_month?: string | undefined;
    projectId_hour?: string | undefined;
    projectId_day?: string | undefined;
    projectId_week?: string | undefined;
    projectId_month?: string | undefined;
    integrationId_hour?: string | undefined;
    integrationId_day?: string | undefined;
    integrationId_week?: string | undefined;
    integrationId_month?: string | undefined;
    properties_hour?: string | undefined;
    properties_day?: string | undefined;
    properties_week?: string | undefined;
    properties_month?: string | undefined;
    userProperties_hour?: string | undefined;
    userProperties_day?: string | undefined;
    userProperties_week?: string | undefined;
    userProperties_month?: string | undefined;
    firstMessageTime_hour?: string | undefined;
    firstMessageTime_day?: string | undefined;
    firstMessageTime_week?: string | undefined;
    firstMessageTime_month?: string | undefined;
    lastMessageTime_hour?: string | undefined;
    lastMessageTime_day?: string | undefined;
    lastMessageTime_week?: string | undefined;
    lastMessageTime_month?: string | undefined;
    lastUpdated_hour?: string | undefined;
    lastUpdated_day?: string | undefined;
    lastUpdated_week?: string | undefined;
    lastUpdated_month?: string | undefined;
    hasPositiveFeedback_hour?: string | undefined;
    hasPositiveFeedback_day?: string | undefined;
    hasPositiveFeedback_week?: string | undefined;
    hasPositiveFeedback_month?: string | undefined;
    hasNegativeFeedback_hour?: string | undefined;
    hasNegativeFeedback_day?: string | undefined;
    hasNegativeFeedback_week?: string | undefined;
    hasNegativeFeedback_month?: string | undefined;
    conversationIds_hour?: string | undefined;
    conversationIds_day?: string | undefined;
    conversationIds_week?: string | undefined;
    conversationIds_month?: string | undefined;
    areAIAnnotationsVerified_hour?: string | undefined;
    areAIAnnotationsVerified_day?: string | undefined;
    areAIAnnotationsVerified_week?: string | undefined;
    areAIAnnotationsVerified_month?: string | undefined;
    isInitialQuestionAnswer_hour?: string | undefined;
    isInitialQuestionAnswer_day?: string | undefined;
    isInitialQuestionAnswer_week?: string | undefined;
    isInitialQuestionAnswer_month?: string | undefined;
    sum_id?: number | undefined;
    sum_messageIds?: number | undefined;
    sum_messagesCount?: number | undefined;
    sum_organizationId?: number | undefined;
    sum_question?: number | undefined;
    sum_questionLength?: number | undefined;
    sum_answer?: number | undefined;
    sum_isOnTopic?: number | undefined;
    sum_isClear?: number | undefined;
    sum_isDocumented?: number | undefined;
    sum_isFeatureSupported?: number | undefined;
    sum_isAnswerConfident?: number | undefined;
    sum_gapSummary?: number | undefined;
    sum_subject?: number | undefined;
    sum_category?: number | undefined;
    sum_languages?: number | undefined;
    sum_firstPartyEntities?: number | undefined;
    sum_thirdPartyEntities?: number | undefined;
    sum_emotion?: number | undefined;
    sum_sentiment?: number | undefined;
    sum_questionType?: number | undefined;
    sum_projectId?: number | undefined;
    sum_integrationId?: number | undefined;
    sum_properties?: number | undefined;
    sum_userProperties?: number | undefined;
    sum_firstMessageTime?: number | undefined;
    sum_lastMessageTime?: number | undefined;
    sum_lastUpdated?: number | undefined;
    sum_hasPositiveFeedback?: number | undefined;
    sum_hasNegativeFeedback?: number | undefined;
    sum_conversationIds?: number | undefined;
    sum_areAIAnnotationsVerified?: number | undefined;
    sum_isInitialQuestionAnswer?: number | undefined;
    count_id?: number | undefined;
    count_messageIds?: number | undefined;
    count_messagesCount?: number | undefined;
    count_organizationId?: number | undefined;
    count_question?: number | undefined;
    count_questionLength?: number | undefined;
    count_answer?: number | undefined;
    count_isOnTopic?: number | undefined;
    count_isClear?: number | undefined;
    count_isDocumented?: number | undefined;
    count_isFeatureSupported?: number | undefined;
    count_isAnswerConfident?: number | undefined;
    count_gapSummary?: number | undefined;
    count_subject?: number | undefined;
    count_category?: number | undefined;
    count_languages?: number | undefined;
    count_firstPartyEntities?: number | undefined;
    count_thirdPartyEntities?: number | undefined;
    count_emotion?: number | undefined;
    count_sentiment?: number | undefined;
    count_questionType?: number | undefined;
    count_projectId?: number | undefined;
    count_integrationId?: number | undefined;
    count_properties?: number | undefined;
    count_userProperties?: number | undefined;
    count_firstMessageTime?: number | undefined;
    count_lastMessageTime?: number | undefined;
    count_lastUpdated?: number | undefined;
    count_hasPositiveFeedback?: number | undefined;
    count_hasNegativeFeedback?: number | undefined;
    count_conversationIds?: number | undefined;
    count_areAIAnnotationsVerified?: number | undefined;
    count_isInitialQuestionAnswer?: number | undefined;
    avg_id?: number | undefined;
    avg_messageIds?: number | undefined;
    avg_messagesCount?: number | undefined;
    avg_organizationId?: number | undefined;
    avg_question?: number | undefined;
    avg_questionLength?: number | undefined;
    avg_answer?: number | undefined;
    avg_isOnTopic?: number | undefined;
    avg_isClear?: number | undefined;
    avg_isDocumented?: number | undefined;
    avg_isFeatureSupported?: number | undefined;
    avg_isAnswerConfident?: number | undefined;
    avg_gapSummary?: number | undefined;
    avg_subject?: number | undefined;
    avg_category?: number | undefined;
    avg_languages?: number | undefined;
    avg_firstPartyEntities?: number | undefined;
    avg_thirdPartyEntities?: number | undefined;
    avg_emotion?: number | undefined;
    avg_sentiment?: number | undefined;
    avg_questionType?: number | undefined;
    avg_projectId?: number | undefined;
    avg_integrationId?: number | undefined;
    avg_properties?: number | undefined;
    avg_userProperties?: number | undefined;
    avg_firstMessageTime?: number | undefined;
    avg_lastMessageTime?: number | undefined;
    avg_lastUpdated?: number | undefined;
    avg_hasPositiveFeedback?: number | undefined;
    avg_hasNegativeFeedback?: number | undefined;
    avg_conversationIds?: number | undefined;
    avg_areAIAnnotationsVerified?: number | undefined;
    avg_isInitialQuestionAnswer?: number | undefined;
    min_id?: number | undefined;
    min_messageIds?: number | undefined;
    min_messagesCount?: number | undefined;
    min_organizationId?: number | undefined;
    min_question?: number | undefined;
    min_questionLength?: number | undefined;
    min_answer?: number | undefined;
    min_isOnTopic?: number | undefined;
    min_isClear?: number | undefined;
    min_isDocumented?: number | undefined;
    min_isFeatureSupported?: number | undefined;
    min_isAnswerConfident?: number | undefined;
    min_gapSummary?: number | undefined;
    min_subject?: number | undefined;
    min_category?: number | undefined;
    min_languages?: number | undefined;
    min_firstPartyEntities?: number | undefined;
    min_thirdPartyEntities?: number | undefined;
    min_emotion?: number | undefined;
    min_sentiment?: number | undefined;
    min_questionType?: number | undefined;
    min_projectId?: number | undefined;
    min_integrationId?: number | undefined;
    min_properties?: number | undefined;
    min_userProperties?: number | undefined;
    min_firstMessageTime?: number | undefined;
    min_lastMessageTime?: number | undefined;
    min_lastUpdated?: number | undefined;
    min_hasPositiveFeedback?: number | undefined;
    min_hasNegativeFeedback?: number | undefined;
    min_conversationIds?: number | undefined;
    min_areAIAnnotationsVerified?: number | undefined;
    min_isInitialQuestionAnswer?: number | undefined;
    max_id?: number | undefined;
    max_messageIds?: number | undefined;
    max_messagesCount?: number | undefined;
    max_organizationId?: number | undefined;
    max_question?: number | undefined;
    max_questionLength?: number | undefined;
    max_answer?: number | undefined;
    max_isOnTopic?: number | undefined;
    max_isClear?: number | undefined;
    max_isDocumented?: number | undefined;
    max_isFeatureSupported?: number | undefined;
    max_isAnswerConfident?: number | undefined;
    max_gapSummary?: number | undefined;
    max_subject?: number | undefined;
    max_category?: number | undefined;
    max_languages?: number | undefined;
    max_firstPartyEntities?: number | undefined;
    max_thirdPartyEntities?: number | undefined;
    max_emotion?: number | undefined;
    max_sentiment?: number | undefined;
    max_questionType?: number | undefined;
    max_projectId?: number | undefined;
    max_integrationId?: number | undefined;
    max_properties?: number | undefined;
    max_userProperties?: number | undefined;
    max_firstMessageTime?: number | undefined;
    max_lastMessageTime?: number | undefined;
    max_lastUpdated?: number | undefined;
    max_hasPositiveFeedback?: number | undefined;
    max_hasNegativeFeedback?: number | undefined;
    max_conversationIds?: number | undefined;
    max_areAIAnnotationsVerified?: number | undefined;
    max_isInitialQuestionAnswer?: number | undefined;
};
/** @internal */
export declare const SemanticThreadResultItem$outboundSchema: z.ZodType<SemanticThreadResultItem$Outbound, z.ZodTypeDef, SemanticThreadResultItem>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SemanticThreadResultItem$ {
    /** @deprecated use `SemanticThreadResultItem$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SemanticThreadResultItem, z.ZodTypeDef, unknown>;
    /** @deprecated use `SemanticThreadResultItem$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SemanticThreadResultItem$Outbound, z.ZodTypeDef, SemanticThreadResultItem>;
    /** @deprecated use `SemanticThreadResultItem$Outbound` instead. */
    type Outbound = SemanticThreadResultItem$Outbound;
}
export declare function semanticThreadResultItemToJSON(semanticThreadResultItem: SemanticThreadResultItem): string;
export declare function semanticThreadResultItemFromJSON(jsonString: string): SafeParseResult<SemanticThreadResultItem, SDKValidationError>;
/** @internal */
export declare const QuerySemanticThreadsResponseData$inboundSchema: z.ZodType<QuerySemanticThreadsResponseData, z.ZodTypeDef, unknown>;
/** @internal */
export type QuerySemanticThreadsResponseData$Outbound = {
    result: Array<SemanticThreadResultItem$Outbound>;
    total: number;
    pageSize: number;
    count: number;
};
/** @internal */
export declare const QuerySemanticThreadsResponseData$outboundSchema: z.ZodType<QuerySemanticThreadsResponseData$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace QuerySemanticThreadsResponseData$ {
    /** @deprecated use `QuerySemanticThreadsResponseData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySemanticThreadsResponseData, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySemanticThreadsResponseData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySemanticThreadsResponseData$Outbound, z.ZodTypeDef, QuerySemanticThreadsResponseData>;
    /** @deprecated use `QuerySemanticThreadsResponseData$Outbound` instead. */
    type Outbound = QuerySemanticThreadsResponseData$Outbound;
}
export declare function querySemanticThreadsResponseDataToJSON(querySemanticThreadsResponseData: QuerySemanticThreadsResponseData): string;
export declare function querySemanticThreadsResponseDataFromJSON(jsonString: string): SafeParseResult<QuerySemanticThreadsResponseData, SDKValidationError>;
//# sourceMappingURL=querysemanticthreadsresponsedata.d.ts.map