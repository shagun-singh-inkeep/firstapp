import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { EventsFilterAND, EventsFilterAND$Outbound } from "./eventsfilterand.js";
import { EventsFilterCondition, EventsFilterCondition$Outbound } from "./eventsfiltercondition.js";
import { EventsFilterOR, EventsFilterOR$Outbound } from "./eventsfilteror.js";
export type EventsFilter = EventsFilterCondition | EventsFilterAND | EventsFilterOR;
/** @internal */
export declare const EventsFilter$inboundSchema: z.ZodType<EventsFilter, z.ZodTypeDef, unknown>;
/** @internal */
export type EventsFilter$Outbound = EventsFilterCondition$Outbound | EventsFilterAND$Outbound | EventsFilterOR$Outbound;
/** @internal */
export declare const EventsFilter$outboundSchema: z.ZodType<EventsFilter$Outbound, z.ZodTypeDef, EventsFilter>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace EventsFilter$ {
    /** @deprecated use `EventsFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventsFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventsFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventsFilter$Outbound, z.ZodTypeDef, EventsFilter>;
    /** @deprecated use `EventsFilter$Outbound` instead. */
    type Outbound = EventsFilter$Outbound;
}
export declare function eventsFilterToJSON(eventsFilter: EventsFilter): string;
export declare function eventsFilterFromJSON(jsonString: string): SafeParseResult<EventsFilter, SDKValidationError>;
//# sourceMappingURL=eventsfilter.d.ts.map