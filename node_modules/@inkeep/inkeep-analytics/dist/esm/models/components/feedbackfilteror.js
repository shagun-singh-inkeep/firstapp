/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { FeedbackFilter$inboundSchema, FeedbackFilter$outboundSchema, } from "./feedbackfilter.js";
/** @internal */
export const FeedbackFilterOROR$inboundSchema = z.lazy(() => FeedbackFilter$inboundSchema);
/** @internal */
export const FeedbackFilterOROR$outboundSchema = z.lazy(() => FeedbackFilter$outboundSchema);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterOROR$;
(function (FeedbackFilterOROR$) {
    /** @deprecated use `FeedbackFilterOROR$inboundSchema` instead. */
    FeedbackFilterOROR$.inboundSchema = FeedbackFilterOROR$inboundSchema;
    /** @deprecated use `FeedbackFilterOROR$outboundSchema` instead. */
    FeedbackFilterOROR$.outboundSchema = FeedbackFilterOROR$outboundSchema;
})(FeedbackFilterOROR$ || (FeedbackFilterOROR$ = {}));
export function feedbackFilterORORToJSON(feedbackFilterOROR) {
    return JSON.stringify(FeedbackFilterOROR$outboundSchema.parse(feedbackFilterOROR));
}
export function feedbackFilterORORFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterOROR$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterOROR' from JSON`);
}
/** @internal */
export const FeedbackFilterOR$inboundSchema = z.object({
    or: z.array(z.lazy(() => FeedbackFilter$inboundSchema)),
});
/** @internal */
export const FeedbackFilterOR$outboundSchema = z.object({
    or: z.array(z.lazy(() => FeedbackFilter$outboundSchema)),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var FeedbackFilterOR$;
(function (FeedbackFilterOR$) {
    /** @deprecated use `FeedbackFilterOR$inboundSchema` instead. */
    FeedbackFilterOR$.inboundSchema = FeedbackFilterOR$inboundSchema;
    /** @deprecated use `FeedbackFilterOR$outboundSchema` instead. */
    FeedbackFilterOR$.outboundSchema = FeedbackFilterOR$outboundSchema;
})(FeedbackFilterOR$ || (FeedbackFilterOR$ = {}));
export function feedbackFilterORToJSON(feedbackFilterOR) {
    return JSON.stringify(FeedbackFilterOR$outboundSchema.parse(feedbackFilterOR));
}
export function feedbackFilterORFromJSON(jsonString) {
    return safeParse(jsonString, (x) => FeedbackFilterOR$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FeedbackFilterOR' from JSON`);
}
//# sourceMappingURL=feedbackfilteror.js.map