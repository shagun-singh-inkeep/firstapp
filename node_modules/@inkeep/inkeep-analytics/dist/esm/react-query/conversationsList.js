/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { useQuery, useSuspenseQuery, } from "@tanstack/react-query";
import { conversationsList } from "../funcs/conversationsList.js";
import { combineSignals } from "../lib/primitives.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
/**
 * Get All Conversations
 */
export function useConversationsList(request, options) {
    const client = useInkeepAnalyticsContext();
    return useQuery({
        ...buildConversationsListQuery(client, request, options),
        ...options,
    });
}
/**
 * Get All Conversations
 */
export function useConversationsListSuspense(request, options) {
    const client = useInkeepAnalyticsContext();
    return useSuspenseQuery({
        ...buildConversationsListQuery(client, request, options),
        ...options,
    });
}
export function prefetchConversationsList(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildConversationsListQuery(client$, request),
    });
}
export function setConversationsListData(client, queryKeyBase, data) {
    const key = queryKeyConversationsList(...queryKeyBase);
    return client.setQueryData(key, data);
}
export function invalidateConversationsList(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversations",
            "list",
            ...queryKeyBase,
        ],
    });
}
export function invalidateAllConversationsList(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "conversations", "list"],
    });
}
export function buildConversationsListQuery(client$, request, options) {
    return {
        queryKey: queryKeyConversationsList({
            limit: request.limit,
            offset: request.offset,
        }),
        queryFn: async function conversationsListQueryFn(ctx) {
            const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return unwrapAsync(conversationsList(client$, request, mergedOptions));
        },
    };
}
export function queryKeyConversationsList(parameters) {
    return ["@inkeep/inkeep-analytics", "conversations", "list", parameters];
}
//# sourceMappingURL=conversationsList.js.map