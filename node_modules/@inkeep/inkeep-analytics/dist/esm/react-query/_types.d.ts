import { RequestOptions } from "../lib/sdks.js";
import { PageIterator } from "../types/operations.js";
import type { DefaultError, InfiniteData, InfiniteQueryPageParamsOptions, OmitKeyof, QueryKey, QueryObserverOptions, SkipToken, UseMutationOptions, UseQueryOptions, UseSuspenseQueryOptions } from "@tanstack/react-query";
interface UseInfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> extends OmitKeyof<InfiniteQueryObserverOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>, "suspense"> {
    /**
     * Set this to `false` to unsubscribe this observer from updates to the query cache.
     * Defaults to `true`.
     */
    subscribed?: boolean;
}
interface InfiniteQueryObserverOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> extends QueryObserverOptions<TQueryFnData, TError, TData, InfiniteData<TQueryFnData, TPageParam>, TQueryKey, TPageParam>, InfiniteQueryPageParamsOptions<TQueryFnData, TPageParam> {
}
interface UseSuspenseInfiniteQueryOptions<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey, TPageParam = unknown> extends OmitKeyof<UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>, "queryFn" | "enabled" | "throwOnError" | "placeholderData"> {
    queryFn?: Exclude<UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey, TPageParam>["queryFn"], SkipToken>;
}
export type TupleToPrefixes<T extends any[]> = T extends [...infer Prefix, any] ? TupleToPrefixes<Prefix> | T : never;
export type QueryHookOptions<Data> = Omit<UseQueryOptions<Data, Error>, "queryKey" | "queryFn" | "select" | keyof RequestOptions> & RequestOptions;
export type SuspenseQueryHookOptions<Data> = Omit<UseSuspenseQueryOptions<Data, Error>, "queryKey" | "queryFn" | "select" | keyof RequestOptions> & RequestOptions;
export type InfiniteQueryHookOptions<Data extends PageIterator<unknown, unknown>> = Omit<UseInfiniteQueryOptions<Data, Error, InfiniteData<Data, Data["~next"]>, QueryKey, Data["~next"]>, "queryKey" | "queryFn" | "select" | "getNextPageParam" | "getPreviousPageParam" | "initialPageParam" | keyof RequestOptions> & RequestOptions & {
    initialPageParam?: Data["~next"];
};
export type SuspenseInfiniteQueryHookOptions<Data extends PageIterator<unknown, unknown>> = Omit<UseSuspenseInfiniteQueryOptions<Data, Error, InfiniteData<Data, Data["~next"]>, QueryKey, Data["~next"]>, "queryKey" | "queryFn" | "select" | "getNextPageParam" | "getPreviousPageParam" | "initialPageParam" | keyof RequestOptions> & RequestOptions & {
    initialPageParam?: Data["~next"];
};
export type MutationHookOptions<Data = unknown, Err = Error, Variables = unknown> = Omit<UseMutationOptions<Data, Err, Variables>, "mutationKey" | "mutationFn" | keyof RequestOptions> & RequestOptions;
export {};
//# sourceMappingURL=_types.d.ts.map