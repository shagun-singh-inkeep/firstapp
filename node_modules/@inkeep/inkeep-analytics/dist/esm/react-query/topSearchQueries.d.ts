import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type TopSearchQueriesQueryData = operations.TopSearchQueriesResponseBody;
/**
 * Top Search Queries
 */
export declare function useTopSearchQueries(request: operations.TopSearchQueriesRequest, options?: QueryHookOptions<TopSearchQueriesQueryData>): UseQueryResult<TopSearchQueriesQueryData, Error>;
/**
 * Top Search Queries
 */
export declare function useTopSearchQueriesSuspense(request: operations.TopSearchQueriesRequest, options?: SuspenseQueryHookOptions<TopSearchQueriesQueryData>): UseSuspenseQueryResult<TopSearchQueriesQueryData, Error>;
export declare function prefetchTopSearchQueries(queryClient: QueryClient, client$: InkeepAnalyticsCore, request: operations.TopSearchQueriesRequest): Promise<void>;
export declare function setTopSearchQueriesData(client: QueryClient, queryKeyBase: [
    parameters: {
        after?: string | undefined;
        projectId?: string | undefined;
    }
], data: TopSearchQueriesQueryData): TopSearchQueriesQueryData | undefined;
export declare function invalidateTopSearchQueries(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        after?: string | undefined;
        projectId?: string | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllTopSearchQueries(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildTopSearchQueriesQuery(client$: InkeepAnalyticsCore, request: operations.TopSearchQueriesRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<TopSearchQueriesQueryData>;
};
export declare function queryKeyTopSearchQueries(parameters: {
    after?: string | undefined;
    projectId?: string | undefined;
}): QueryKey;
//# sourceMappingURL=topSearchQueries.d.ts.map