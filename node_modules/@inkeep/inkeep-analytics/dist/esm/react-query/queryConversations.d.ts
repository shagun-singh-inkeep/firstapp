import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryConversationsMutationVariables = {
    security: operations.QueryConversationsSecurity;
    request: components.QueryConversationsRequestBody;
    options?: RequestOptions;
};
export type QueryConversationsMutationData = components.QueryConversationsResponseBody;
/**
 * Query Conversations
 */
export declare function useQueryConversationsMutation(options?: MutationHookOptions<QueryConversationsMutationData, Error, QueryConversationsMutationVariables>): UseMutationResult<QueryConversationsMutationData, Error, QueryConversationsMutationVariables>;
export declare function mutationKeyQueryConversations(): MutationKey;
export declare function buildQueryConversationsMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryConversationsMutationVariables) => Promise<QueryConversationsMutationData>;
};
//# sourceMappingURL=queryConversations.d.ts.map