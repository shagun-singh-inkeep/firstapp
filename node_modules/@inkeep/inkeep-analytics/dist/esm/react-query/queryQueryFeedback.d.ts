import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryQueryFeedbackMutationVariables = {
    security: operations.QueryFeedbackSecurity;
    request: components.QueryFeedbackRequestBody;
    options?: RequestOptions;
};
export type QueryQueryFeedbackMutationData = components.QueryFeedbackResponseBody;
/**
 * Query Feedback
 */
export declare function useQueryQueryFeedbackMutation(options?: MutationHookOptions<QueryQueryFeedbackMutationData, Error, QueryQueryFeedbackMutationVariables>): UseMutationResult<QueryQueryFeedbackMutationData, Error, QueryQueryFeedbackMutationVariables>;
export declare function mutationKeyQueryQueryFeedback(): MutationKey;
export declare function buildQueryQueryFeedbackMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryQueryFeedbackMutationVariables) => Promise<QueryQueryFeedbackMutationData>;
};
//# sourceMappingURL=queryQueryFeedback.d.ts.map