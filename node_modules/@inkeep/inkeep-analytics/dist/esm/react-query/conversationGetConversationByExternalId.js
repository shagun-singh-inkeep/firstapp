/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { useQuery, useSuspenseQuery, } from "@tanstack/react-query";
import { conversationGetConversationByExternalId } from "../funcs/conversationGetConversationByExternalId.js";
import { combineSignals } from "../lib/primitives.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
/**
 * Get Conversation by External ID
 */
export function useConversationGetConversationByExternalId(request, options) {
    const client = useInkeepAnalyticsContext();
    return useQuery({
        ...buildConversationGetConversationByExternalIdQuery(client, request, options),
        ...options,
    });
}
/**
 * Get Conversation by External ID
 */
export function useConversationGetConversationByExternalIdSuspense(request, options) {
    const client = useInkeepAnalyticsContext();
    return useSuspenseQuery({
        ...buildConversationGetConversationByExternalIdQuery(client, request, options),
        ...options,
    });
}
export function prefetchConversationGetConversationByExternalId(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildConversationGetConversationByExternalIdQuery(client$, request),
    });
}
export function setConversationGetConversationByExternalIdData(client, queryKeyBase, data) {
    const key = queryKeyConversationGetConversationByExternalId(...queryKeyBase);
    return client.setQueryData(key, data);
}
export function invalidateConversationGetConversationByExternalId(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversation",
            "getConversationByExternalId",
            ...queryKeyBase,
        ],
    });
}
export function invalidateAllConversationGetConversationByExternalId(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "conversation",
            "getConversationByExternalId",
        ],
    });
}
export function buildConversationGetConversationByExternalIdQuery(client$, request, options) {
    return {
        queryKey: queryKeyConversationGetConversationByExternalId(request.externalId),
        queryFn: async function conversationGetConversationByExternalIdQueryFn(ctx) {
            const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return unwrapAsync(conversationGetConversationByExternalId(client$, request, mergedOptions));
        },
    };
}
export function queryKeyConversationGetConversationByExternalId(externalId) {
    return [
        "@inkeep/inkeep-analytics",
        "conversation",
        "getConversationByExternalId",
        externalId,
    ];
}
//# sourceMappingURL=conversationGetConversationByExternalId.js.map