/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { useQuery, useSuspenseQuery, } from "@tanstack/react-query";
import { feedbackGetFeedbackById } from "../funcs/feedbackGetFeedbackById.js";
import { combineSignals } from "../lib/primitives.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
/**
 * Get Feedback by ID
 */
export function useFeedbackGetFeedbackById(request, options) {
    const client = useInkeepAnalyticsContext();
    return useQuery({
        ...buildFeedbackGetFeedbackByIdQuery(client, request, options),
        ...options,
    });
}
/**
 * Get Feedback by ID
 */
export function useFeedbackGetFeedbackByIdSuspense(request, options) {
    const client = useInkeepAnalyticsContext();
    return useSuspenseQuery({
        ...buildFeedbackGetFeedbackByIdQuery(client, request, options),
        ...options,
    });
}
export function prefetchFeedbackGetFeedbackById(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildFeedbackGetFeedbackByIdQuery(client$, request),
    });
}
export function setFeedbackGetFeedbackByIdData(client, queryKeyBase, data) {
    const key = queryKeyFeedbackGetFeedbackById(...queryKeyBase);
    return client.setQueryData(key, data);
}
export function invalidateFeedbackGetFeedbackById(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "feedback",
            "getFeedbackById",
            ...queryKeyBase,
        ],
    });
}
export function invalidateAllFeedbackGetFeedbackById(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "feedback", "getFeedbackById"],
    });
}
export function buildFeedbackGetFeedbackByIdQuery(client$, request, options) {
    return {
        queryKey: queryKeyFeedbackGetFeedbackById(request.id),
        queryFn: async function feedbackGetFeedbackByIdQueryFn(ctx) {
            const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return unwrapAsync(feedbackGetFeedbackById(client$, request, mergedOptions));
        },
    };
}
export function queryKeyFeedbackGetFeedbackById(id) {
    return ["@inkeep/inkeep-analytics", "feedback", "getFeedbackById", id];
}
//# sourceMappingURL=feedbackGetFeedbackById.js.map