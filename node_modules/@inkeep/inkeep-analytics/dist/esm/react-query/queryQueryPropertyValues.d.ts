import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryQueryPropertyValuesMutationVariables = {
    request?: components.PropertyValuesRequestBody | undefined;
    options?: RequestOptions;
};
export type QueryQueryPropertyValuesMutationData = components.PropertyValuesResponseBody;
/**
 * Query Property Values
 */
export declare function useQueryQueryPropertyValuesMutation(options?: MutationHookOptions<QueryQueryPropertyValuesMutationData, Error, QueryQueryPropertyValuesMutationVariables>): UseMutationResult<QueryQueryPropertyValuesMutationData, Error, QueryQueryPropertyValuesMutationVariables>;
export declare function mutationKeyQueryQueryPropertyValues(): MutationKey;
export declare function buildQueryQueryPropertyValuesMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryQueryPropertyValuesMutationVariables) => Promise<QueryQueryPropertyValuesMutationData>;
};
//# sourceMappingURL=queryQueryPropertyValues.d.ts.map