import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryQuerySemanticThreadsMutationVariables = {
    security: operations.QuerySemanticThreadsSecurity;
    request: components.QuerySemanticThreadsRequestBody;
    options?: RequestOptions;
};
export type QueryQuerySemanticThreadsMutationData = components.QuerySemanticThreadsResponseBody;
/**
 * Query Semantic Threads
 */
export declare function useQueryQuerySemanticThreadsMutation(options?: MutationHookOptions<QueryQuerySemanticThreadsMutationData, Error, QueryQuerySemanticThreadsMutationVariables>): UseMutationResult<QueryQuerySemanticThreadsMutationData, Error, QueryQuerySemanticThreadsMutationVariables>;
export declare function mutationKeyQueryQuerySemanticThreads(): MutationKey;
export declare function buildQueryQuerySemanticThreadsMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryQuerySemanticThreadsMutationVariables) => Promise<QueryQuerySemanticThreadsMutationData>;
};
//# sourceMappingURL=queryQuerySemanticThreads.d.ts.map