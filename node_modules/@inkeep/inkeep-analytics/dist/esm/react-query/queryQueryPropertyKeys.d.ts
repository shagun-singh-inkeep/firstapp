import { MutationKey, UseMutationResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { MutationHookOptions } from "./_types.js";
export type QueryQueryPropertyKeysMutationVariables = {
    request?: components.PropertyKeysRequestBody | undefined;
    options?: RequestOptions;
};
export type QueryQueryPropertyKeysMutationData = components.PropertyKeysResponseBody;
/**
 * Query Property Keys
 */
export declare function useQueryQueryPropertyKeysMutation(options?: MutationHookOptions<QueryQueryPropertyKeysMutationData, Error, QueryQueryPropertyKeysMutationVariables>): UseMutationResult<QueryQueryPropertyKeysMutationData, Error, QueryQueryPropertyKeysMutationVariables>;
export declare function mutationKeyQueryQueryPropertyKeys(): MutationKey;
export declare function buildQueryQueryPropertyKeysMutation(client$: InkeepAnalyticsCore, hookOptions?: RequestOptions): {
    mutationKey: MutationKey;
    mutationFn: (variables: QueryQueryPropertyKeysMutationVariables) => Promise<QueryQueryPropertyKeysMutationData>;
};
//# sourceMappingURL=queryQueryPropertyKeys.d.ts.map