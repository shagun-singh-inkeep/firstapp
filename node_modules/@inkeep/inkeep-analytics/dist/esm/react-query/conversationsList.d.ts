import { InvalidateQueryFilters, QueryClient, QueryFunctionContext, QueryKey, UseQueryResult, UseSuspenseQueryResult } from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { QueryHookOptions, SuspenseQueryHookOptions, TupleToPrefixes } from "./_types.js";
export type ConversationsListQueryData = operations.GetAllConversationResponseBody;
/**
 * Get All Conversations
 */
export declare function useConversationsList(request: operations.GetAllConversationRequest, options?: QueryHookOptions<ConversationsListQueryData>): UseQueryResult<ConversationsListQueryData, Error>;
/**
 * Get All Conversations
 */
export declare function useConversationsListSuspense(request: operations.GetAllConversationRequest, options?: SuspenseQueryHookOptions<ConversationsListQueryData>): UseSuspenseQueryResult<ConversationsListQueryData, Error>;
export declare function prefetchConversationsList(queryClient: QueryClient, client$: InkeepAnalyticsCore, request: operations.GetAllConversationRequest): Promise<void>;
export declare function setConversationsListData(client: QueryClient, queryKeyBase: [
    parameters: {
        limit?: number | null | undefined;
        offset?: number | null | undefined;
    }
], data: ConversationsListQueryData): ConversationsListQueryData | undefined;
export declare function invalidateConversationsList(client: QueryClient, queryKeyBase: TupleToPrefixes<[
    parameters: {
        limit?: number | null | undefined;
        offset?: number | null | undefined;
    }
]>, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function invalidateAllConversationsList(client: QueryClient, filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">): Promise<void>;
export declare function buildConversationsListQuery(client$: InkeepAnalyticsCore, request: operations.GetAllConversationRequest, options?: RequestOptions): {
    queryKey: QueryKey;
    queryFn: (context: QueryFunctionContext) => Promise<ConversationsListQueryData>;
};
export declare function queryKeyConversationsList(parameters: {
    limit?: number | null | undefined;
    offset?: number | null | undefined;
}): QueryKey;
//# sourceMappingURL=conversationsList.d.ts.map