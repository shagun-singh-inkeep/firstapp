/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { useQuery, useSuspenseQuery, } from "@tanstack/react-query";
import { weeklySearchUsers } from "../funcs/weeklySearchUsers.js";
import { combineSignals } from "../lib/primitives.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
/**
 * Weekly Search Users
 */
export function useWeeklySearchUsers(request, options) {
    const client = useInkeepAnalyticsContext();
    return useQuery({
        ...buildWeeklySearchUsersQuery(client, request, options),
        ...options,
    });
}
/**
 * Weekly Search Users
 */
export function useWeeklySearchUsersSuspense(request, options) {
    const client = useInkeepAnalyticsContext();
    return useSuspenseQuery({
        ...buildWeeklySearchUsersQuery(client, request, options),
        ...options,
    });
}
export function prefetchWeeklySearchUsers(queryClient, client$, request) {
    return queryClient.prefetchQuery({
        ...buildWeeklySearchUsersQuery(client$, request),
    });
}
export function setWeeklySearchUsersData(client, queryKeyBase, data) {
    const key = queryKeyWeeklySearchUsers(...queryKeyBase);
    return client.setQueryData(key, data);
}
export function invalidateWeeklySearchUsers(client, queryKeyBase, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: [
            "@inkeep/inkeep-analytics",
            "weeklySearchUsers",
            ...queryKeyBase,
        ],
    });
}
export function invalidateAllWeeklySearchUsers(client, filters) {
    return client.invalidateQueries({
        ...filters,
        queryKey: ["@inkeep/inkeep-analytics", "weeklySearchUsers"],
    });
}
export function buildWeeklySearchUsersQuery(client$, request, options) {
    return {
        queryKey: queryKeyWeeklySearchUsers({
            after: request.after,
            projectId: request.projectId,
        }),
        queryFn: async function weeklySearchUsersQueryFn(ctx) {
            const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
            const mergedOptions = {
                ...options,
                fetchOptions: { ...options?.fetchOptions, signal: sig },
            };
            return unwrapAsync(weeklySearchUsers(client$, request, mergedOptions));
        },
    };
}
export function queryKeyWeeklySearchUsers(parameters) {
    return ["@inkeep/inkeep-analytics", "weeklySearchUsers", parameters];
}
//# sourceMappingURL=weeklySearchUsers.js.map