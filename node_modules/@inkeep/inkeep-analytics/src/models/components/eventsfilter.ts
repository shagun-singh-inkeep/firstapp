/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsFilterAND,
  EventsFilterAND$inboundSchema,
  EventsFilterAND$Outbound,
  EventsFilterAND$outboundSchema,
} from "./eventsfilterand.js";
import {
  EventsFilterCondition,
  EventsFilterCondition$inboundSchema,
  EventsFilterCondition$Outbound,
  EventsFilterCondition$outboundSchema,
} from "./eventsfiltercondition.js";
import {
  EventsFilterOR,
  EventsFilterOR$inboundSchema,
  EventsFilterOR$Outbound,
  EventsFilterOR$outboundSchema,
} from "./eventsfilteror.js";

export type EventsFilter =
  | EventsFilterCondition
  | EventsFilterAND
  | EventsFilterOR;

/** @internal */
export const EventsFilter$inboundSchema: z.ZodType<
  EventsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  EventsFilterCondition$inboundSchema,
  z.lazy(() => EventsFilterAND$inboundSchema),
  z.lazy(() => EventsFilterOR$inboundSchema),
]);

/** @internal */
export type EventsFilter$Outbound =
  | EventsFilterCondition$Outbound
  | EventsFilterAND$Outbound
  | EventsFilterOR$Outbound;

/** @internal */
export const EventsFilter$outboundSchema: z.ZodType<
  EventsFilter$Outbound,
  z.ZodTypeDef,
  EventsFilter
> = z.union([
  EventsFilterCondition$outboundSchema,
  z.lazy(() => EventsFilterAND$outboundSchema),
  z.lazy(() => EventsFilterOR$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilter$ {
  /** @deprecated use `EventsFilter$inboundSchema` instead. */
  export const inboundSchema = EventsFilter$inboundSchema;
  /** @deprecated use `EventsFilter$outboundSchema` instead. */
  export const outboundSchema = EventsFilter$outboundSchema;
  /** @deprecated use `EventsFilter$Outbound` instead. */
  export type Outbound = EventsFilter$Outbound;
}

export function eventsFilterToJSON(eventsFilter: EventsFilter): string {
  return JSON.stringify(EventsFilter$outboundSchema.parse(eventsFilter));
}

export function eventsFilterFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilter' from JSON`,
  );
}
