/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Detail = {
  Auto: "auto",
  Low: "low",
  High: "high",
} as const;
export type Detail = ClosedEnum<typeof Detail>;

export type OpenAIImageUrlObject = {
  url: string;
  detail?: Detail | undefined;
};

/** @internal */
export const Detail$inboundSchema: z.ZodNativeEnum<typeof Detail> = z
  .nativeEnum(Detail);

/** @internal */
export const Detail$outboundSchema: z.ZodNativeEnum<typeof Detail> =
  Detail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detail$ {
  /** @deprecated use `Detail$inboundSchema` instead. */
  export const inboundSchema = Detail$inboundSchema;
  /** @deprecated use `Detail$outboundSchema` instead. */
  export const outboundSchema = Detail$outboundSchema;
}

/** @internal */
export const OpenAIImageUrlObject$inboundSchema: z.ZodType<
  OpenAIImageUrlObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  detail: Detail$inboundSchema.default("auto"),
});

/** @internal */
export type OpenAIImageUrlObject$Outbound = {
  url: string;
  detail: string;
};

/** @internal */
export const OpenAIImageUrlObject$outboundSchema: z.ZodType<
  OpenAIImageUrlObject$Outbound,
  z.ZodTypeDef,
  OpenAIImageUrlObject
> = z.object({
  url: z.string(),
  detail: Detail$outboundSchema.default("auto"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIImageUrlObject$ {
  /** @deprecated use `OpenAIImageUrlObject$inboundSchema` instead. */
  export const inboundSchema = OpenAIImageUrlObject$inboundSchema;
  /** @deprecated use `OpenAIImageUrlObject$outboundSchema` instead. */
  export const outboundSchema = OpenAIImageUrlObject$outboundSchema;
  /** @deprecated use `OpenAIImageUrlObject$Outbound` instead. */
  export type Outbound = OpenAIImageUrlObject$Outbound;
}

export function openAIImageUrlObjectToJSON(
  openAIImageUrlObject: OpenAIImageUrlObject,
): string {
  return JSON.stringify(
    OpenAIImageUrlObject$outboundSchema.parse(openAIImageUrlObject),
  );
}

export function openAIImageUrlObjectFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIImageUrlObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIImageUrlObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIImageUrlObject' from JSON`,
  );
}
