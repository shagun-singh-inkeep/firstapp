/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsFilter,
  ConversationsFilter$inboundSchema,
  ConversationsFilter$Outbound,
  ConversationsFilter$outboundSchema,
} from "./conversationsfilter.js";

export type Or = ConversationsFilter;

/**
 * ConversationsFilter OR operator
 */
export type ConversationsFilterOR = {
  /**
   * ConversationsFilter OR condition
   */
  or: Array<ConversationsFilter>;
};

/** @internal */
export const Or$inboundSchema: z.ZodType<Or, z.ZodTypeDef, unknown> = z.lazy(
  () => ConversationsFilter$inboundSchema
);

/** @internal */
export type Or$Outbound = ConversationsFilter$Outbound;

/** @internal */
export const Or$outboundSchema: z.ZodType<Or$Outbound, z.ZodTypeDef, Or> = z
  .lazy(() => ConversationsFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Or$ {
  /** @deprecated use `Or$inboundSchema` instead. */
  export const inboundSchema = Or$inboundSchema;
  /** @deprecated use `Or$outboundSchema` instead. */
  export const outboundSchema = Or$outboundSchema;
  /** @deprecated use `Or$Outbound` instead. */
  export type Outbound = Or$Outbound;
}

export function orToJSON(or: Or): string {
  return JSON.stringify(Or$outboundSchema.parse(or));
}

export function orFromJSON(
  jsonString: string,
): SafeParseResult<Or, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Or$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Or' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterOR$inboundSchema: z.ZodType<
  ConversationsFilterOR,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(z.lazy(() => ConversationsFilter$inboundSchema)),
});

/** @internal */
export type ConversationsFilterOR$Outbound = {
  or: Array<ConversationsFilter$Outbound>;
};

/** @internal */
export const ConversationsFilterOR$outboundSchema: z.ZodType<
  ConversationsFilterOR$Outbound,
  z.ZodTypeDef,
  ConversationsFilterOR
> = z.object({
  or: z.array(z.lazy(() => ConversationsFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterOR$ {
  /** @deprecated use `ConversationsFilterOR$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterOR$inboundSchema;
  /** @deprecated use `ConversationsFilterOR$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterOR$outboundSchema;
  /** @deprecated use `ConversationsFilterOR$Outbound` instead. */
  export type Outbound = ConversationsFilterOR$Outbound;
}

export function conversationsFilterORToJSON(
  conversationsFilterOR: ConversationsFilterOR,
): string {
  return JSON.stringify(
    ConversationsFilterOR$outboundSchema.parse(conversationsFilterOR),
  );
}

export function conversationsFilterORFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterOR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterOR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterOR' from JSON`,
  );
}
