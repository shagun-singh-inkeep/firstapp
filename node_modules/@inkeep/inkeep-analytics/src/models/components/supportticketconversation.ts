/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SupportTicketMessage,
  SupportTicketMessage$inboundSchema,
  SupportTicketMessage$Outbound,
  SupportTicketMessage$outboundSchema,
} from "./supportticketmessage.js";

export const SupportTicketConversationType = {
  SupportTicket: "support_ticket",
} as const;
export type SupportTicketConversationType = ClosedEnum<
  typeof SupportTicketConversationType
>;

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type SupportTicketConversationId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SupportTicketConversationUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SupportTicketConversationUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SupportTicketConversationUserType = ClosedEnum<
  typeof SupportTicketConversationUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type SupportTicketConversationUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: SupportTicketConversationUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const SupportTicketConversationVisibility = {
  Private: "private",
  Public: "public",
} as const;
export type SupportTicketConversationVisibility = ClosedEnum<
  typeof SupportTicketConversationVisibility
>;

export type SupportTicketConversation = {
  id: string;
  externalId: string | null;
  externalUrl: string | null;
  type: SupportTicketConversationType;
  supportTicketConversationId: string | null;
  createdAt: string;
  updatedAt: string;
  projectId: string | null;
  integrationId: string | null;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: SupportTicketConversationUserProperties | null | undefined;
  tags?: Array<string> | null | undefined;
  visibility: SupportTicketConversationVisibility | null;
  /**
   * The messages in the conversation. Must be at least one message.
   */
  messages: Array<SupportTicketMessage>;
};

/** @internal */
export const SupportTicketConversationType$inboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationType
> = z.nativeEnum(SupportTicketConversationType);

/** @internal */
export const SupportTicketConversationType$outboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationType
> = SupportTicketConversationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationType$ {
  /** @deprecated use `SupportTicketConversationType$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversationType$inboundSchema;
  /** @deprecated use `SupportTicketConversationType$outboundSchema` instead. */
  export const outboundSchema = SupportTicketConversationType$outboundSchema;
}

/** @internal */
export const SupportTicketConversationId$inboundSchema: z.ZodType<
  SupportTicketConversationId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SupportTicketConversationId$Outbound = string | number;

/** @internal */
export const SupportTicketConversationId$outboundSchema: z.ZodType<
  SupportTicketConversationId$Outbound,
  z.ZodTypeDef,
  SupportTicketConversationId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationId$ {
  /** @deprecated use `SupportTicketConversationId$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversationId$inboundSchema;
  /** @deprecated use `SupportTicketConversationId$outboundSchema` instead. */
  export const outboundSchema = SupportTicketConversationId$outboundSchema;
  /** @deprecated use `SupportTicketConversationId$Outbound` instead. */
  export type Outbound = SupportTicketConversationId$Outbound;
}

export function supportTicketConversationIdToJSON(
  supportTicketConversationId: SupportTicketConversationId,
): string {
  return JSON.stringify(
    SupportTicketConversationId$outboundSchema.parse(
      supportTicketConversationId,
    ),
  );
}

export function supportTicketConversationIdFromJSON(
  jsonString: string,
): SafeParseResult<SupportTicketConversationId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportTicketConversationId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportTicketConversationId' from JSON`,
  );
}

/** @internal */
export const SupportTicketConversationUserId$inboundSchema: z.ZodType<
  SupportTicketConversationUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SupportTicketConversationUserId$Outbound = string | number;

/** @internal */
export const SupportTicketConversationUserId$outboundSchema: z.ZodType<
  SupportTicketConversationUserId$Outbound,
  z.ZodTypeDef,
  SupportTicketConversationUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationUserId$ {
  /** @deprecated use `SupportTicketConversationUserId$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversationUserId$inboundSchema;
  /** @deprecated use `SupportTicketConversationUserId$outboundSchema` instead. */
  export const outboundSchema = SupportTicketConversationUserId$outboundSchema;
  /** @deprecated use `SupportTicketConversationUserId$Outbound` instead. */
  export type Outbound = SupportTicketConversationUserId$Outbound;
}

export function supportTicketConversationUserIdToJSON(
  supportTicketConversationUserId: SupportTicketConversationUserId,
): string {
  return JSON.stringify(
    SupportTicketConversationUserId$outboundSchema.parse(
      supportTicketConversationUserId,
    ),
  );
}

export function supportTicketConversationUserIdFromJSON(
  jsonString: string,
): SafeParseResult<SupportTicketConversationUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportTicketConversationUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportTicketConversationUserId' from JSON`,
  );
}

/** @internal */
export const SupportTicketConversationUserType$inboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationUserType
> = z.nativeEnum(SupportTicketConversationUserType);

/** @internal */
export const SupportTicketConversationUserType$outboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationUserType
> = SupportTicketConversationUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationUserType$ {
  /** @deprecated use `SupportTicketConversationUserType$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversationUserType$inboundSchema;
  /** @deprecated use `SupportTicketConversationUserType$outboundSchema` instead. */
  export const outboundSchema =
    SupportTicketConversationUserType$outboundSchema;
}

/** @internal */
export const SupportTicketConversationUserProperties$inboundSchema: z.ZodType<
  SupportTicketConversationUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SupportTicketConversationUserType$inboundSchema)
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type SupportTicketConversationUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SupportTicketConversationUserProperties$outboundSchema: z.ZodType<
  SupportTicketConversationUserProperties$Outbound,
  z.ZodTypeDef,
  SupportTicketConversationUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(SupportTicketConversationUserType$outboundSchema)
    .optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationUserProperties$ {
  /** @deprecated use `SupportTicketConversationUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SupportTicketConversationUserProperties$inboundSchema;
  /** @deprecated use `SupportTicketConversationUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SupportTicketConversationUserProperties$outboundSchema;
  /** @deprecated use `SupportTicketConversationUserProperties$Outbound` instead. */
  export type Outbound = SupportTicketConversationUserProperties$Outbound;
}

export function supportTicketConversationUserPropertiesToJSON(
  supportTicketConversationUserProperties:
    SupportTicketConversationUserProperties,
): string {
  return JSON.stringify(
    SupportTicketConversationUserProperties$outboundSchema.parse(
      supportTicketConversationUserProperties,
    ),
  );
}

export function supportTicketConversationUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  SupportTicketConversationUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SupportTicketConversationUserProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SupportTicketConversationUserProperties' from JSON`,
  );
}

/** @internal */
export const SupportTicketConversationVisibility$inboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationVisibility
> = z.nativeEnum(SupportTicketConversationVisibility);

/** @internal */
export const SupportTicketConversationVisibility$outboundSchema:
  z.ZodNativeEnum<typeof SupportTicketConversationVisibility> =
    SupportTicketConversationVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationVisibility$ {
  /** @deprecated use `SupportTicketConversationVisibility$inboundSchema` instead. */
  export const inboundSchema =
    SupportTicketConversationVisibility$inboundSchema;
  /** @deprecated use `SupportTicketConversationVisibility$outboundSchema` instead. */
  export const outboundSchema =
    SupportTicketConversationVisibility$outboundSchema;
}

/** @internal */
export const SupportTicketConversation$inboundSchema: z.ZodType<
  SupportTicketConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  type: SupportTicketConversationType$inboundSchema,
  supportTicketConversationId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportTicketConversationUserProperties$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(SupportTicketConversationVisibility$inboundSchema),
  messages: z.array(SupportTicketMessage$inboundSchema),
});

/** @internal */
export type SupportTicketConversation$Outbound = {
  id: string;
  externalId: string | null;
  externalUrl: string | null;
  type: string;
  supportTicketConversationId: string | null;
  createdAt: string;
  updatedAt: string;
  projectId: string | null;
  integrationId: string | null;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | SupportTicketConversationUserProperties$Outbound
    | null
    | undefined;
  tags?: Array<string> | null | undefined;
  visibility: string | null;
  messages: Array<SupportTicketMessage$Outbound>;
};

/** @internal */
export const SupportTicketConversation$outboundSchema: z.ZodType<
  SupportTicketConversation$Outbound,
  z.ZodTypeDef,
  SupportTicketConversation
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  type: SupportTicketConversationType$outboundSchema,
  supportTicketConversationId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportTicketConversationUserProperties$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(SupportTicketConversationVisibility$outboundSchema),
  messages: z.array(SupportTicketMessage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversation$ {
  /** @deprecated use `SupportTicketConversation$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversation$inboundSchema;
  /** @deprecated use `SupportTicketConversation$outboundSchema` instead. */
  export const outboundSchema = SupportTicketConversation$outboundSchema;
  /** @deprecated use `SupportTicketConversation$Outbound` instead. */
  export type Outbound = SupportTicketConversation$Outbound;
}

export function supportTicketConversationToJSON(
  supportTicketConversation: SupportTicketConversation,
): string {
  return JSON.stringify(
    SupportTicketConversation$outboundSchema.parse(supportTicketConversation),
  );
}

export function supportTicketConversationFromJSON(
  jsonString: string,
): SafeParseResult<SupportTicketConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportTicketConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportTicketConversation' from JSON`,
  );
}
