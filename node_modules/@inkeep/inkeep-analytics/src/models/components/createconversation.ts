/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateOpenAIConversation,
  CreateOpenAIConversation$inboundSchema,
  CreateOpenAIConversation$Outbound,
  CreateOpenAIConversation$outboundSchema,
} from "./createopenaiconversation.js";
import {
  CreateSupportCopilotConversation,
  CreateSupportCopilotConversation$inboundSchema,
  CreateSupportCopilotConversation$Outbound,
  CreateSupportCopilotConversation$outboundSchema,
} from "./createsupportcopilotconversation.js";
import {
  CreateSupportTicketConversation,
  CreateSupportTicketConversation$inboundSchema,
  CreateSupportTicketConversation$Outbound,
  CreateSupportTicketConversation$outboundSchema,
} from "./createsupportticketconversation.js";

export type CreateConversation =
  | (CreateOpenAIConversation & { type: "openai" })
  | (CreateSupportTicketConversation & { type: "support_ticket" })
  | (CreateSupportCopilotConversation & { type: "support_copilot" });

/** @internal */
export const CreateConversation$inboundSchema: z.ZodType<
  CreateConversation,
  z.ZodTypeDef,
  unknown
> = z.union([
  CreateOpenAIConversation$inboundSchema.and(
    z.object({ type: z.literal("openai") }).transform((v) => ({
      type: v.type,
    })),
  ),
  CreateSupportTicketConversation$inboundSchema.and(
    z.object({ type: z.literal("support_ticket") }).transform((v) => ({
      type: v.type,
    })),
  ),
  CreateSupportCopilotConversation$inboundSchema.and(
    z.object({ type: z.literal("support_copilot") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type CreateConversation$Outbound =
  | (CreateOpenAIConversation$Outbound & { type: "openai" })
  | (CreateSupportTicketConversation$Outbound & { type: "support_ticket" })
  | (CreateSupportCopilotConversation$Outbound & { type: "support_copilot" });

/** @internal */
export const CreateConversation$outboundSchema: z.ZodType<
  CreateConversation$Outbound,
  z.ZodTypeDef,
  CreateConversation
> = z.union([
  CreateOpenAIConversation$outboundSchema.and(
    z.object({ type: z.literal("openai") }).transform((v) => ({
      type: v.type,
    })),
  ),
  CreateSupportTicketConversation$outboundSchema.and(
    z.object({ type: z.literal("support_ticket") }).transform((v) => ({
      type: v.type,
    })),
  ),
  CreateSupportCopilotConversation$outboundSchema.and(
    z.object({ type: z.literal("support_copilot") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConversation$ {
  /** @deprecated use `CreateConversation$inboundSchema` instead. */
  export const inboundSchema = CreateConversation$inboundSchema;
  /** @deprecated use `CreateConversation$outboundSchema` instead. */
  export const outboundSchema = CreateConversation$outboundSchema;
  /** @deprecated use `CreateConversation$Outbound` instead. */
  export type Outbound = CreateConversation$Outbound;
}

export function createConversationToJSON(
  createConversation: CreateConversation,
): string {
  return JSON.stringify(
    CreateConversation$outboundSchema.parse(createConversation),
  );
}

export function createConversationFromJSON(
  jsonString: string,
): SafeParseResult<CreateConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConversation' from JSON`,
  );
}
