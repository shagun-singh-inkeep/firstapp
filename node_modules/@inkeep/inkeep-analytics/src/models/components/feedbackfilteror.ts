/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackFilter,
  FeedbackFilter$inboundSchema,
  FeedbackFilter$Outbound,
  FeedbackFilter$outboundSchema,
} from "./feedbackfilter.js";

export type FeedbackFilterOROR = FeedbackFilter;

/**
 * FeedbackFilter OR operator
 */
export type FeedbackFilterOR = {
  /**
   * FeedbackFilter OR condition
   */
  or: Array<FeedbackFilter>;
};

/** @internal */
export const FeedbackFilterOROR$inboundSchema: z.ZodType<
  FeedbackFilterOROR,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => FeedbackFilter$inboundSchema);

/** @internal */
export type FeedbackFilterOROR$Outbound = FeedbackFilter$Outbound;

/** @internal */
export const FeedbackFilterOROR$outboundSchema: z.ZodType<
  FeedbackFilterOROR$Outbound,
  z.ZodTypeDef,
  FeedbackFilterOROR
> = z.lazy(() => FeedbackFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterOROR$ {
  /** @deprecated use `FeedbackFilterOROR$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterOROR$inboundSchema;
  /** @deprecated use `FeedbackFilterOROR$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterOROR$outboundSchema;
  /** @deprecated use `FeedbackFilterOROR$Outbound` instead. */
  export type Outbound = FeedbackFilterOROR$Outbound;
}

export function feedbackFilterORORToJSON(
  feedbackFilterOROR: FeedbackFilterOROR,
): string {
  return JSON.stringify(
    FeedbackFilterOROR$outboundSchema.parse(feedbackFilterOROR),
  );
}

export function feedbackFilterORORFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterOROR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterOROR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterOROR' from JSON`,
  );
}

/** @internal */
export const FeedbackFilterOR$inboundSchema: z.ZodType<
  FeedbackFilterOR,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(z.lazy(() => FeedbackFilter$inboundSchema)),
});

/** @internal */
export type FeedbackFilterOR$Outbound = {
  or: Array<FeedbackFilter$Outbound>;
};

/** @internal */
export const FeedbackFilterOR$outboundSchema: z.ZodType<
  FeedbackFilterOR$Outbound,
  z.ZodTypeDef,
  FeedbackFilterOR
> = z.object({
  or: z.array(z.lazy(() => FeedbackFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterOR$ {
  /** @deprecated use `FeedbackFilterOR$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterOR$inboundSchema;
  /** @deprecated use `FeedbackFilterOR$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterOR$outboundSchema;
  /** @deprecated use `FeedbackFilterOR$Outbound` instead. */
  export type Outbound = FeedbackFilterOR$Outbound;
}

export function feedbackFilterORToJSON(
  feedbackFilterOR: FeedbackFilterOR,
): string {
  return JSON.stringify(
    FeedbackFilterOR$outboundSchema.parse(feedbackFilterOR),
  );
}

export function feedbackFilterORFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterOR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterOR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterOR' from JSON`,
  );
}
