/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TimeUnit,
  TimeUnit$inboundSchema,
  TimeUnit$outboundSchema,
} from "./timeunit.js";

export const EventsTimeBasedGroupBySelectionType = {
  Time: "time",
} as const;
export type EventsTimeBasedGroupBySelectionType = ClosedEnum<
  typeof EventsTimeBasedGroupBySelectionType
>;

export const EventsTimeBasedGroupBySelectionField = {
  Id: "id",
  OrganizationId: "organizationId",
  MessageId: "messageId",
  ConversationId: "conversationId",
  CreatedAt: "createdAt",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  EventType: "eventType",
  Type: "type",
  SearchQuery: "searchQuery",
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
export type EventsTimeBasedGroupBySelectionField = ClosedEnum<
  typeof EventsTimeBasedGroupBySelectionField
>;

export type EventsTimeBasedGroupBySelection = {
  type: EventsTimeBasedGroupBySelectionType;
  /**
   * Valid time units for time-based operations
   */
  timeUnit: TimeUnit;
  field?: EventsTimeBasedGroupBySelectionField | undefined;
};

/** @internal */
export const EventsTimeBasedGroupBySelectionType$inboundSchema: z.ZodNativeEnum<
  typeof EventsTimeBasedGroupBySelectionType
> = z.nativeEnum(EventsTimeBasedGroupBySelectionType);

/** @internal */
export const EventsTimeBasedGroupBySelectionType$outboundSchema:
  z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionType> =
    EventsTimeBasedGroupBySelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsTimeBasedGroupBySelectionType$ {
  /** @deprecated use `EventsTimeBasedGroupBySelectionType$inboundSchema` instead. */
  export const inboundSchema =
    EventsTimeBasedGroupBySelectionType$inboundSchema;
  /** @deprecated use `EventsTimeBasedGroupBySelectionType$outboundSchema` instead. */
  export const outboundSchema =
    EventsTimeBasedGroupBySelectionType$outboundSchema;
}

/** @internal */
export const EventsTimeBasedGroupBySelectionField$inboundSchema:
  z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionField> = z.nativeEnum(
    EventsTimeBasedGroupBySelectionField,
  );

/** @internal */
export const EventsTimeBasedGroupBySelectionField$outboundSchema:
  z.ZodNativeEnum<typeof EventsTimeBasedGroupBySelectionField> =
    EventsTimeBasedGroupBySelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsTimeBasedGroupBySelectionField$ {
  /** @deprecated use `EventsTimeBasedGroupBySelectionField$inboundSchema` instead. */
  export const inboundSchema =
    EventsTimeBasedGroupBySelectionField$inboundSchema;
  /** @deprecated use `EventsTimeBasedGroupBySelectionField$outboundSchema` instead. */
  export const outboundSchema =
    EventsTimeBasedGroupBySelectionField$outboundSchema;
}

/** @internal */
export const EventsTimeBasedGroupBySelection$inboundSchema: z.ZodType<
  EventsTimeBasedGroupBySelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: EventsTimeBasedGroupBySelectionType$inboundSchema,
  timeUnit: TimeUnit$inboundSchema,
  field: EventsTimeBasedGroupBySelectionField$inboundSchema.optional(),
});

/** @internal */
export type EventsTimeBasedGroupBySelection$Outbound = {
  type: string;
  timeUnit: string;
  field?: string | undefined;
};

/** @internal */
export const EventsTimeBasedGroupBySelection$outboundSchema: z.ZodType<
  EventsTimeBasedGroupBySelection$Outbound,
  z.ZodTypeDef,
  EventsTimeBasedGroupBySelection
> = z.object({
  type: EventsTimeBasedGroupBySelectionType$outboundSchema,
  timeUnit: TimeUnit$outboundSchema,
  field: EventsTimeBasedGroupBySelectionField$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsTimeBasedGroupBySelection$ {
  /** @deprecated use `EventsTimeBasedGroupBySelection$inboundSchema` instead. */
  export const inboundSchema = EventsTimeBasedGroupBySelection$inboundSchema;
  /** @deprecated use `EventsTimeBasedGroupBySelection$outboundSchema` instead. */
  export const outboundSchema = EventsTimeBasedGroupBySelection$outboundSchema;
  /** @deprecated use `EventsTimeBasedGroupBySelection$Outbound` instead. */
  export type Outbound = EventsTimeBasedGroupBySelection$Outbound;
}

export function eventsTimeBasedGroupBySelectionToJSON(
  eventsTimeBasedGroupBySelection: EventsTimeBasedGroupBySelection,
): string {
  return JSON.stringify(
    EventsTimeBasedGroupBySelection$outboundSchema.parse(
      eventsTimeBasedGroupBySelection,
    ),
  );
}

export function eventsTimeBasedGroupBySelectionFromJSON(
  jsonString: string,
): SafeParseResult<EventsTimeBasedGroupBySelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsTimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsTimeBasedGroupBySelection' from JSON`,
  );
}
