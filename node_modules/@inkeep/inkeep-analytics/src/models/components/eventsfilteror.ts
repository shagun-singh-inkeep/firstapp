/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsFilter,
  EventsFilter$inboundSchema,
  EventsFilter$Outbound,
  EventsFilter$outboundSchema,
} from "./eventsfilter.js";

export type EventsFilterOROR = EventsFilter;

/**
 * EventsFilter OR operator
 */
export type EventsFilterOR = {
  /**
   * EventsFilter OR condition
   */
  or: Array<EventsFilter>;
};

/** @internal */
export const EventsFilterOROR$inboundSchema: z.ZodType<
  EventsFilterOROR,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => EventsFilter$inboundSchema);

/** @internal */
export type EventsFilterOROR$Outbound = EventsFilter$Outbound;

/** @internal */
export const EventsFilterOROR$outboundSchema: z.ZodType<
  EventsFilterOROR$Outbound,
  z.ZodTypeDef,
  EventsFilterOROR
> = z.lazy(() => EventsFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterOROR$ {
  /** @deprecated use `EventsFilterOROR$inboundSchema` instead. */
  export const inboundSchema = EventsFilterOROR$inboundSchema;
  /** @deprecated use `EventsFilterOROR$outboundSchema` instead. */
  export const outboundSchema = EventsFilterOROR$outboundSchema;
  /** @deprecated use `EventsFilterOROR$Outbound` instead. */
  export type Outbound = EventsFilterOROR$Outbound;
}

export function eventsFilterORORToJSON(
  eventsFilterOROR: EventsFilterOROR,
): string {
  return JSON.stringify(
    EventsFilterOROR$outboundSchema.parse(eventsFilterOROR),
  );
}

export function eventsFilterORORFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterOROR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterOROR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterOROR' from JSON`,
  );
}

/** @internal */
export const EventsFilterOR$inboundSchema: z.ZodType<
  EventsFilterOR,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(z.lazy(() => EventsFilter$inboundSchema)),
});

/** @internal */
export type EventsFilterOR$Outbound = {
  or: Array<EventsFilter$Outbound>;
};

/** @internal */
export const EventsFilterOR$outboundSchema: z.ZodType<
  EventsFilterOR$Outbound,
  z.ZodTypeDef,
  EventsFilterOR
> = z.object({
  or: z.array(z.lazy(() => EventsFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterOR$ {
  /** @deprecated use `EventsFilterOR$inboundSchema` instead. */
  export const inboundSchema = EventsFilterOR$inboundSchema;
  /** @deprecated use `EventsFilterOR$outboundSchema` instead. */
  export const outboundSchema = EventsFilterOR$outboundSchema;
  /** @deprecated use `EventsFilterOR$Outbound` instead. */
  export type Outbound = EventsFilterOR$Outbound;
}

export function eventsFilterORToJSON(eventsFilterOR: EventsFilterOR): string {
  return JSON.stringify(EventsFilterOR$outboundSchema.parse(eventsFilterOR));
}

export function eventsFilterORFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterOR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterOR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterOR' from JSON`,
  );
}
