/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SemanticThreadAggregationSelection,
  SemanticThreadAggregationSelection$inboundSchema,
  SemanticThreadAggregationSelection$Outbound,
  SemanticThreadAggregationSelection$outboundSchema,
} from "./semanticthreadaggregationselection.js";
import {
  SemanticThreadSimpleFieldSelection,
  SemanticThreadSimpleFieldSelection$inboundSchema,
  SemanticThreadSimpleFieldSelection$Outbound,
  SemanticThreadSimpleFieldSelection$outboundSchema,
} from "./semanticthreadsimplefieldselection.js";
import {
  SemanticThreadTimeBasedGroupBySelection,
  SemanticThreadTimeBasedGroupBySelection$inboundSchema,
  SemanticThreadTimeBasedGroupBySelection$Outbound,
  SemanticThreadTimeBasedGroupBySelection$outboundSchema,
} from "./semanticthreadtimebasedgroupbyselection.js";

/**
 * Fields to select from semantic threads
 */
export type SemanticThreadSelection =
  | (SemanticThreadTimeBasedGroupBySelection & { type: "time" })
  | (SemanticThreadSimpleFieldSelection & { type: "field" })
  | (SemanticThreadAggregationSelection & { type: "aggregation" });

/** @internal */
export const SemanticThreadSelection$inboundSchema: z.ZodType<
  SemanticThreadSelection,
  z.ZodTypeDef,
  unknown
> = z.union([
  SemanticThreadTimeBasedGroupBySelection$inboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  SemanticThreadSimpleFieldSelection$inboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
  SemanticThreadAggregationSelection$inboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type SemanticThreadSelection$Outbound =
  | (SemanticThreadTimeBasedGroupBySelection$Outbound & { type: "time" })
  | (SemanticThreadSimpleFieldSelection$Outbound & { type: "field" })
  | (SemanticThreadAggregationSelection$Outbound & { type: "aggregation" });

/** @internal */
export const SemanticThreadSelection$outboundSchema: z.ZodType<
  SemanticThreadSelection$Outbound,
  z.ZodTypeDef,
  SemanticThreadSelection
> = z.union([
  SemanticThreadTimeBasedGroupBySelection$outboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  SemanticThreadSimpleFieldSelection$outboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
  SemanticThreadAggregationSelection$outboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadSelection$ {
  /** @deprecated use `SemanticThreadSelection$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadSelection$inboundSchema;
  /** @deprecated use `SemanticThreadSelection$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadSelection$outboundSchema;
  /** @deprecated use `SemanticThreadSelection$Outbound` instead. */
  export type Outbound = SemanticThreadSelection$Outbound;
}

export function semanticThreadSelectionToJSON(
  semanticThreadSelection: SemanticThreadSelection,
): string {
  return JSON.stringify(
    SemanticThreadSelection$outboundSchema.parse(semanticThreadSelection),
  );
}

export function semanticThreadSelectionFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadSelection' from JSON`,
  );
}
