/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type SelectMessageEventId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SelectMessageEventUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SelectMessageEventUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SelectMessageEventUserType = ClosedEnum<
  typeof SelectMessageEventUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type SelectMessageEventUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: SelectMessageEventUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const SelectMessageEventEntityType = {
  Message: "message",
} as const;
export type SelectMessageEventEntityType = ClosedEnum<
  typeof SelectMessageEventEntityType
>;

export type SelectMessageEvent = {
  id: string;
  type: string;
  messageId: string;
  createdAt: string;
  projectId: string | null;
  integrationId: string | null;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: SelectMessageEventUserProperties | null | undefined;
  entityType: SelectMessageEventEntityType;
};

/** @internal */
export const SelectMessageEventId$inboundSchema: z.ZodType<
  SelectMessageEventId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SelectMessageEventId$Outbound = string | number;

/** @internal */
export const SelectMessageEventId$outboundSchema: z.ZodType<
  SelectMessageEventId$Outbound,
  z.ZodTypeDef,
  SelectMessageEventId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventId$ {
  /** @deprecated use `SelectMessageEventId$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventId$inboundSchema;
  /** @deprecated use `SelectMessageEventId$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventId$outboundSchema;
  /** @deprecated use `SelectMessageEventId$Outbound` instead. */
  export type Outbound = SelectMessageEventId$Outbound;
}

export function selectMessageEventIdToJSON(
  selectMessageEventId: SelectMessageEventId,
): string {
  return JSON.stringify(
    SelectMessageEventId$outboundSchema.parse(selectMessageEventId),
  );
}

export function selectMessageEventIdFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEventId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEventId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEventId' from JSON`,
  );
}

/** @internal */
export const SelectMessageEventUserId$inboundSchema: z.ZodType<
  SelectMessageEventUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SelectMessageEventUserId$Outbound = string | number;

/** @internal */
export const SelectMessageEventUserId$outboundSchema: z.ZodType<
  SelectMessageEventUserId$Outbound,
  z.ZodTypeDef,
  SelectMessageEventUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventUserId$ {
  /** @deprecated use `SelectMessageEventUserId$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventUserId$inboundSchema;
  /** @deprecated use `SelectMessageEventUserId$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventUserId$outboundSchema;
  /** @deprecated use `SelectMessageEventUserId$Outbound` instead. */
  export type Outbound = SelectMessageEventUserId$Outbound;
}

export function selectMessageEventUserIdToJSON(
  selectMessageEventUserId: SelectMessageEventUserId,
): string {
  return JSON.stringify(
    SelectMessageEventUserId$outboundSchema.parse(selectMessageEventUserId),
  );
}

export function selectMessageEventUserIdFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEventUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEventUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEventUserId' from JSON`,
  );
}

/** @internal */
export const SelectMessageEventUserType$inboundSchema: z.ZodNativeEnum<
  typeof SelectMessageEventUserType
> = z.nativeEnum(SelectMessageEventUserType);

/** @internal */
export const SelectMessageEventUserType$outboundSchema: z.ZodNativeEnum<
  typeof SelectMessageEventUserType
> = SelectMessageEventUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventUserType$ {
  /** @deprecated use `SelectMessageEventUserType$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventUserType$inboundSchema;
  /** @deprecated use `SelectMessageEventUserType$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventUserType$outboundSchema;
}

/** @internal */
export const SelectMessageEventUserProperties$inboundSchema: z.ZodType<
  SelectMessageEventUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SelectMessageEventUserType$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type SelectMessageEventUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SelectMessageEventUserProperties$outboundSchema: z.ZodType<
  SelectMessageEventUserProperties$Outbound,
  z.ZodTypeDef,
  SelectMessageEventUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(SelectMessageEventUserType$outboundSchema).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventUserProperties$ {
  /** @deprecated use `SelectMessageEventUserProperties$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventUserProperties$inboundSchema;
  /** @deprecated use `SelectMessageEventUserProperties$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventUserProperties$outboundSchema;
  /** @deprecated use `SelectMessageEventUserProperties$Outbound` instead. */
  export type Outbound = SelectMessageEventUserProperties$Outbound;
}

export function selectMessageEventUserPropertiesToJSON(
  selectMessageEventUserProperties: SelectMessageEventUserProperties,
): string {
  return JSON.stringify(
    SelectMessageEventUserProperties$outboundSchema.parse(
      selectMessageEventUserProperties,
    ),
  );
}

export function selectMessageEventUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEventUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEventUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEventUserProperties' from JSON`,
  );
}

/** @internal */
export const SelectMessageEventEntityType$inboundSchema: z.ZodNativeEnum<
  typeof SelectMessageEventEntityType
> = z.nativeEnum(SelectMessageEventEntityType);

/** @internal */
export const SelectMessageEventEntityType$outboundSchema: z.ZodNativeEnum<
  typeof SelectMessageEventEntityType
> = SelectMessageEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventEntityType$ {
  /** @deprecated use `SelectMessageEventEntityType$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventEntityType$inboundSchema;
  /** @deprecated use `SelectMessageEventEntityType$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventEntityType$outboundSchema;
}

/** @internal */
export const SelectMessageEvent$inboundSchema: z.ZodType<
  SelectMessageEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  messageId: z.string(),
  createdAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectMessageEventUserProperties$inboundSchema),
  ).optional(),
  entityType: SelectMessageEventEntityType$inboundSchema,
});

/** @internal */
export type SelectMessageEvent$Outbound = {
  id: string;
  type: string;
  messageId: string;
  createdAt: string;
  projectId: string | null;
  integrationId: string | null;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?: SelectMessageEventUserProperties$Outbound | null | undefined;
  entityType: string;
};

/** @internal */
export const SelectMessageEvent$outboundSchema: z.ZodType<
  SelectMessageEvent$Outbound,
  z.ZodTypeDef,
  SelectMessageEvent
> = z.object({
  id: z.string(),
  type: z.string(),
  messageId: z.string(),
  createdAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectMessageEventUserProperties$outboundSchema),
  ).optional(),
  entityType: SelectMessageEventEntityType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEvent$ {
  /** @deprecated use `SelectMessageEvent$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEvent$inboundSchema;
  /** @deprecated use `SelectMessageEvent$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEvent$outboundSchema;
  /** @deprecated use `SelectMessageEvent$Outbound` instead. */
  export type Outbound = SelectMessageEvent$Outbound;
}

export function selectMessageEventToJSON(
  selectMessageEvent: SelectMessageEvent,
): string {
  return JSON.stringify(
    SelectMessageEvent$outboundSchema.parse(selectMessageEvent),
  );
}

export function selectMessageEventFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEvent' from JSON`,
  );
}
