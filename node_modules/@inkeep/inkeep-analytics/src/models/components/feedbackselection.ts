/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackAggregationSelection,
  FeedbackAggregationSelection$inboundSchema,
  FeedbackAggregationSelection$Outbound,
  FeedbackAggregationSelection$outboundSchema,
} from "./feedbackaggregationselection.js";
import {
  FeedbackSimpleFieldSelection,
  FeedbackSimpleFieldSelection$inboundSchema,
  FeedbackSimpleFieldSelection$Outbound,
  FeedbackSimpleFieldSelection$outboundSchema,
} from "./feedbacksimplefieldselection.js";
import {
  FeedbackTimeBasedGroupBySelection,
  FeedbackTimeBasedGroupBySelection$inboundSchema,
  FeedbackTimeBasedGroupBySelection$Outbound,
  FeedbackTimeBasedGroupBySelection$outboundSchema,
} from "./feedbacktimebasedgroupbyselection.js";

/**
 * Fields to select from feedback
 */
export type FeedbackSelection =
  | (FeedbackTimeBasedGroupBySelection & { type: "time" })
  | (FeedbackSimpleFieldSelection & { type: "field" })
  | (FeedbackAggregationSelection & { type: "aggregation" });

/** @internal */
export const FeedbackSelection$inboundSchema: z.ZodType<
  FeedbackSelection,
  z.ZodTypeDef,
  unknown
> = z.union([
  FeedbackTimeBasedGroupBySelection$inboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  FeedbackSimpleFieldSelection$inboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
  FeedbackAggregationSelection$inboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type FeedbackSelection$Outbound =
  | (FeedbackTimeBasedGroupBySelection$Outbound & { type: "time" })
  | (FeedbackSimpleFieldSelection$Outbound & { type: "field" })
  | (FeedbackAggregationSelection$Outbound & { type: "aggregation" });

/** @internal */
export const FeedbackSelection$outboundSchema: z.ZodType<
  FeedbackSelection$Outbound,
  z.ZodTypeDef,
  FeedbackSelection
> = z.union([
  FeedbackTimeBasedGroupBySelection$outboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  FeedbackSimpleFieldSelection$outboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
  FeedbackAggregationSelection$outboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackSelection$ {
  /** @deprecated use `FeedbackSelection$inboundSchema` instead. */
  export const inboundSchema = FeedbackSelection$inboundSchema;
  /** @deprecated use `FeedbackSelection$outboundSchema` instead. */
  export const outboundSchema = FeedbackSelection$outboundSchema;
  /** @deprecated use `FeedbackSelection$Outbound` instead. */
  export type Outbound = FeedbackSelection$Outbound;
}

export function feedbackSelectionToJSON(
  feedbackSelection: FeedbackSelection,
): string {
  return JSON.stringify(
    FeedbackSelection$outboundSchema.parse(feedbackSelection),
  );
}

export function feedbackSelectionFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackSelection' from JSON`,
  );
}
