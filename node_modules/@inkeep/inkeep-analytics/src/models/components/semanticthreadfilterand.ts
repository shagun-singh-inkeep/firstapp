/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SemanticThreadFilter,
  SemanticThreadFilter$inboundSchema,
  SemanticThreadFilter$Outbound,
  SemanticThreadFilter$outboundSchema,
} from "./semanticthreadfilter.js";

export type SemanticThreadFilterANDAND = SemanticThreadFilter;

/**
 * SemanticThreadFilter AND operator
 */
export type SemanticThreadFilterAND = {
  /**
   * SemanticThreadFilter AND condition
   */
  and: Array<SemanticThreadFilter>;
};

/** @internal */
export const SemanticThreadFilterANDAND$inboundSchema: z.ZodType<
  SemanticThreadFilterANDAND,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => SemanticThreadFilter$inboundSchema);

/** @internal */
export type SemanticThreadFilterANDAND$Outbound = SemanticThreadFilter$Outbound;

/** @internal */
export const SemanticThreadFilterANDAND$outboundSchema: z.ZodType<
  SemanticThreadFilterANDAND$Outbound,
  z.ZodTypeDef,
  SemanticThreadFilterANDAND
> = z.lazy(() => SemanticThreadFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadFilterANDAND$ {
  /** @deprecated use `SemanticThreadFilterANDAND$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadFilterANDAND$inboundSchema;
  /** @deprecated use `SemanticThreadFilterANDAND$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadFilterANDAND$outboundSchema;
  /** @deprecated use `SemanticThreadFilterANDAND$Outbound` instead. */
  export type Outbound = SemanticThreadFilterANDAND$Outbound;
}

export function semanticThreadFilterANDANDToJSON(
  semanticThreadFilterANDAND: SemanticThreadFilterANDAND,
): string {
  return JSON.stringify(
    SemanticThreadFilterANDAND$outboundSchema.parse(semanticThreadFilterANDAND),
  );
}

export function semanticThreadFilterANDANDFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadFilterANDAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadFilterANDAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadFilterANDAND' from JSON`,
  );
}

/** @internal */
export const SemanticThreadFilterAND$inboundSchema: z.ZodType<
  SemanticThreadFilterAND,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(z.lazy(() => SemanticThreadFilter$inboundSchema)),
});

/** @internal */
export type SemanticThreadFilterAND$Outbound = {
  and: Array<SemanticThreadFilter$Outbound>;
};

/** @internal */
export const SemanticThreadFilterAND$outboundSchema: z.ZodType<
  SemanticThreadFilterAND$Outbound,
  z.ZodTypeDef,
  SemanticThreadFilterAND
> = z.object({
  and: z.array(z.lazy(() => SemanticThreadFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadFilterAND$ {
  /** @deprecated use `SemanticThreadFilterAND$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadFilterAND$inboundSchema;
  /** @deprecated use `SemanticThreadFilterAND$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadFilterAND$outboundSchema;
  /** @deprecated use `SemanticThreadFilterAND$Outbound` instead. */
  export type Outbound = SemanticThreadFilterAND$Outbound;
}

export function semanticThreadFilterANDToJSON(
  semanticThreadFilterAND: SemanticThreadFilterAND,
): string {
  return JSON.stringify(
    SemanticThreadFilterAND$outboundSchema.parse(semanticThreadFilterAND),
  );
}

export function semanticThreadFilterANDFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadFilterAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadFilterAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadFilterAND' from JSON`,
  );
}
