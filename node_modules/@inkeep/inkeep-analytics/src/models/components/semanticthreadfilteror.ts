/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SemanticThreadFilter,
  SemanticThreadFilter$inboundSchema,
  SemanticThreadFilter$Outbound,
  SemanticThreadFilter$outboundSchema,
} from "./semanticthreadfilter.js";

export type SemanticThreadFilterOROR = SemanticThreadFilter;

/**
 * SemanticThreadFilter OR operator
 */
export type SemanticThreadFilterOR = {
  /**
   * SemanticThreadFilter OR condition
   */
  or: Array<SemanticThreadFilter>;
};

/** @internal */
export const SemanticThreadFilterOROR$inboundSchema: z.ZodType<
  SemanticThreadFilterOROR,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => SemanticThreadFilter$inboundSchema);

/** @internal */
export type SemanticThreadFilterOROR$Outbound = SemanticThreadFilter$Outbound;

/** @internal */
export const SemanticThreadFilterOROR$outboundSchema: z.ZodType<
  SemanticThreadFilterOROR$Outbound,
  z.ZodTypeDef,
  SemanticThreadFilterOROR
> = z.lazy(() => SemanticThreadFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadFilterOROR$ {
  /** @deprecated use `SemanticThreadFilterOROR$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadFilterOROR$inboundSchema;
  /** @deprecated use `SemanticThreadFilterOROR$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadFilterOROR$outboundSchema;
  /** @deprecated use `SemanticThreadFilterOROR$Outbound` instead. */
  export type Outbound = SemanticThreadFilterOROR$Outbound;
}

export function semanticThreadFilterORORToJSON(
  semanticThreadFilterOROR: SemanticThreadFilterOROR,
): string {
  return JSON.stringify(
    SemanticThreadFilterOROR$outboundSchema.parse(semanticThreadFilterOROR),
  );
}

export function semanticThreadFilterORORFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadFilterOROR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadFilterOROR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadFilterOROR' from JSON`,
  );
}

/** @internal */
export const SemanticThreadFilterOR$inboundSchema: z.ZodType<
  SemanticThreadFilterOR,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(z.lazy(() => SemanticThreadFilter$inboundSchema)),
});

/** @internal */
export type SemanticThreadFilterOR$Outbound = {
  or: Array<SemanticThreadFilter$Outbound>;
};

/** @internal */
export const SemanticThreadFilterOR$outboundSchema: z.ZodType<
  SemanticThreadFilterOR$Outbound,
  z.ZodTypeDef,
  SemanticThreadFilterOR
> = z.object({
  or: z.array(z.lazy(() => SemanticThreadFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadFilterOR$ {
  /** @deprecated use `SemanticThreadFilterOR$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadFilterOR$inboundSchema;
  /** @deprecated use `SemanticThreadFilterOR$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadFilterOR$outboundSchema;
  /** @deprecated use `SemanticThreadFilterOR$Outbound` instead. */
  export type Outbound = SemanticThreadFilterOR$Outbound;
}

export function semanticThreadFilterORToJSON(
  semanticThreadFilterOR: SemanticThreadFilterOR,
): string {
  return JSON.stringify(
    SemanticThreadFilterOR$outboundSchema.parse(semanticThreadFilterOR),
  );
}

export function semanticThreadFilterORFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadFilterOR, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadFilterOR$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadFilterOR' from JSON`,
  );
}
