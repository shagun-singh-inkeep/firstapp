/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsAggregationSelection,
  EventsAggregationSelection$inboundSchema,
  EventsAggregationSelection$Outbound,
  EventsAggregationSelection$outboundSchema,
} from "./eventsaggregationselection.js";
import {
  EventsSimpleFieldSelection,
  EventsSimpleFieldSelection$inboundSchema,
  EventsSimpleFieldSelection$Outbound,
  EventsSimpleFieldSelection$outboundSchema,
} from "./eventssimplefieldselection.js";
import {
  EventsTimeBasedGroupBySelection,
  EventsTimeBasedGroupBySelection$inboundSchema,
  EventsTimeBasedGroupBySelection$Outbound,
  EventsTimeBasedGroupBySelection$outboundSchema,
} from "./eventstimebasedgroupbyselection.js";

/**
 * Fields to select from events
 */
export type EventsSelection =
  | (EventsTimeBasedGroupBySelection & { type: "time" })
  | (EventsSimpleFieldSelection & { type: "field" })
  | (EventsAggregationSelection & { type: "aggregation" });

/** @internal */
export const EventsSelection$inboundSchema: z.ZodType<
  EventsSelection,
  z.ZodTypeDef,
  unknown
> = z.union([
  EventsTimeBasedGroupBySelection$inboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  EventsSimpleFieldSelection$inboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
  EventsAggregationSelection$inboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type EventsSelection$Outbound =
  | (EventsTimeBasedGroupBySelection$Outbound & { type: "time" })
  | (EventsSimpleFieldSelection$Outbound & { type: "field" })
  | (EventsAggregationSelection$Outbound & { type: "aggregation" });

/** @internal */
export const EventsSelection$outboundSchema: z.ZodType<
  EventsSelection$Outbound,
  z.ZodTypeDef,
  EventsSelection
> = z.union([
  EventsTimeBasedGroupBySelection$outboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  EventsSimpleFieldSelection$outboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
  EventsAggregationSelection$outboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsSelection$ {
  /** @deprecated use `EventsSelection$inboundSchema` instead. */
  export const inboundSchema = EventsSelection$inboundSchema;
  /** @deprecated use `EventsSelection$outboundSchema` instead. */
  export const outboundSchema = EventsSelection$outboundSchema;
  /** @deprecated use `EventsSelection$Outbound` instead. */
  export type Outbound = EventsSelection$Outbound;
}

export function eventsSelectionToJSON(
  eventsSelection: EventsSelection,
): string {
  return JSON.stringify(EventsSelection$outboundSchema.parse(eventsSelection));
}

export function eventsSelectionFromJSON(
  jsonString: string,
): SafeParseResult<EventsSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsSelection' from JSON`,
  );
}
