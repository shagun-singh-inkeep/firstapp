/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type SelectConversationEventId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SelectConversationEventUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SelectConversationEventUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SelectConversationEventUserType = ClosedEnum<
  typeof SelectConversationEventUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type SelectConversationEventUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: SelectConversationEventUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const SelectConversationEventEntityType = {
  Conversation: "conversation",
} as const;
export type SelectConversationEventEntityType = ClosedEnum<
  typeof SelectConversationEventEntityType
>;

export type SelectConversationEvent = {
  id: string;
  type: string;
  conversationId: string;
  createdAt: string;
  projectId: string | null;
  integrationId: string | null;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: SelectConversationEventUserProperties | null | undefined;
  entityType: SelectConversationEventEntityType;
};

/** @internal */
export const SelectConversationEventId$inboundSchema: z.ZodType<
  SelectConversationEventId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SelectConversationEventId$Outbound = string | number;

/** @internal */
export const SelectConversationEventId$outboundSchema: z.ZodType<
  SelectConversationEventId$Outbound,
  z.ZodTypeDef,
  SelectConversationEventId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventId$ {
  /** @deprecated use `SelectConversationEventId$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEventId$inboundSchema;
  /** @deprecated use `SelectConversationEventId$outboundSchema` instead. */
  export const outboundSchema = SelectConversationEventId$outboundSchema;
  /** @deprecated use `SelectConversationEventId$Outbound` instead. */
  export type Outbound = SelectConversationEventId$Outbound;
}

export function selectConversationEventIdToJSON(
  selectConversationEventId: SelectConversationEventId,
): string {
  return JSON.stringify(
    SelectConversationEventId$outboundSchema.parse(selectConversationEventId),
  );
}

export function selectConversationEventIdFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEventId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectConversationEventId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEventId' from JSON`,
  );
}

/** @internal */
export const SelectConversationEventUserId$inboundSchema: z.ZodType<
  SelectConversationEventUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SelectConversationEventUserId$Outbound = string | number;

/** @internal */
export const SelectConversationEventUserId$outboundSchema: z.ZodType<
  SelectConversationEventUserId$Outbound,
  z.ZodTypeDef,
  SelectConversationEventUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventUserId$ {
  /** @deprecated use `SelectConversationEventUserId$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEventUserId$inboundSchema;
  /** @deprecated use `SelectConversationEventUserId$outboundSchema` instead. */
  export const outboundSchema = SelectConversationEventUserId$outboundSchema;
  /** @deprecated use `SelectConversationEventUserId$Outbound` instead. */
  export type Outbound = SelectConversationEventUserId$Outbound;
}

export function selectConversationEventUserIdToJSON(
  selectConversationEventUserId: SelectConversationEventUserId,
): string {
  return JSON.stringify(
    SelectConversationEventUserId$outboundSchema.parse(
      selectConversationEventUserId,
    ),
  );
}

export function selectConversationEventUserIdFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEventUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectConversationEventUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEventUserId' from JSON`,
  );
}

/** @internal */
export const SelectConversationEventUserType$inboundSchema: z.ZodNativeEnum<
  typeof SelectConversationEventUserType
> = z.nativeEnum(SelectConversationEventUserType);

/** @internal */
export const SelectConversationEventUserType$outboundSchema: z.ZodNativeEnum<
  typeof SelectConversationEventUserType
> = SelectConversationEventUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventUserType$ {
  /** @deprecated use `SelectConversationEventUserType$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEventUserType$inboundSchema;
  /** @deprecated use `SelectConversationEventUserType$outboundSchema` instead. */
  export const outboundSchema = SelectConversationEventUserType$outboundSchema;
}

/** @internal */
export const SelectConversationEventUserProperties$inboundSchema: z.ZodType<
  SelectConversationEventUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SelectConversationEventUserType$inboundSchema)
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type SelectConversationEventUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SelectConversationEventUserProperties$outboundSchema: z.ZodType<
  SelectConversationEventUserProperties$Outbound,
  z.ZodTypeDef,
  SelectConversationEventUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(SelectConversationEventUserType$outboundSchema)
    .optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventUserProperties$ {
  /** @deprecated use `SelectConversationEventUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SelectConversationEventUserProperties$inboundSchema;
  /** @deprecated use `SelectConversationEventUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SelectConversationEventUserProperties$outboundSchema;
  /** @deprecated use `SelectConversationEventUserProperties$Outbound` instead. */
  export type Outbound = SelectConversationEventUserProperties$Outbound;
}

export function selectConversationEventUserPropertiesToJSON(
  selectConversationEventUserProperties: SelectConversationEventUserProperties,
): string {
  return JSON.stringify(
    SelectConversationEventUserProperties$outboundSchema.parse(
      selectConversationEventUserProperties,
    ),
  );
}

export function selectConversationEventUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEventUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SelectConversationEventUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEventUserProperties' from JSON`,
  );
}

/** @internal */
export const SelectConversationEventEntityType$inboundSchema: z.ZodNativeEnum<
  typeof SelectConversationEventEntityType
> = z.nativeEnum(SelectConversationEventEntityType);

/** @internal */
export const SelectConversationEventEntityType$outboundSchema: z.ZodNativeEnum<
  typeof SelectConversationEventEntityType
> = SelectConversationEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventEntityType$ {
  /** @deprecated use `SelectConversationEventEntityType$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEventEntityType$inboundSchema;
  /** @deprecated use `SelectConversationEventEntityType$outboundSchema` instead. */
  export const outboundSchema =
    SelectConversationEventEntityType$outboundSchema;
}

/** @internal */
export const SelectConversationEvent$inboundSchema: z.ZodType<
  SelectConversationEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  conversationId: z.string(),
  createdAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectConversationEventUserProperties$inboundSchema),
  ).optional(),
  entityType: SelectConversationEventEntityType$inboundSchema,
});

/** @internal */
export type SelectConversationEvent$Outbound = {
  id: string;
  type: string;
  conversationId: string;
  createdAt: string;
  projectId: string | null;
  integrationId: string | null;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | SelectConversationEventUserProperties$Outbound
    | null
    | undefined;
  entityType: string;
};

/** @internal */
export const SelectConversationEvent$outboundSchema: z.ZodType<
  SelectConversationEvent$Outbound,
  z.ZodTypeDef,
  SelectConversationEvent
> = z.object({
  id: z.string(),
  type: z.string(),
  conversationId: z.string(),
  createdAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectConversationEventUserProperties$outboundSchema),
  ).optional(),
  entityType: SelectConversationEventEntityType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEvent$ {
  /** @deprecated use `SelectConversationEvent$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEvent$inboundSchema;
  /** @deprecated use `SelectConversationEvent$outboundSchema` instead. */
  export const outboundSchema = SelectConversationEvent$outboundSchema;
  /** @deprecated use `SelectConversationEvent$Outbound` instead. */
  export type Outbound = SelectConversationEvent$Outbound;
}

export function selectConversationEventToJSON(
  selectConversationEvent: SelectConversationEvent,
): string {
  return JSON.stringify(
    SelectConversationEvent$outboundSchema.parse(selectConversationEvent),
  );
}

export function selectConversationEventFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectConversationEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEvent' from JSON`,
  );
}
