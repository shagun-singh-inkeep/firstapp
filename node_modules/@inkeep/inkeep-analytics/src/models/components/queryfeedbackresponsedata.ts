/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const QueryFeedbackResponseDataType = {
  Positive: "positive",
  Negative: "negative",
} as const;
export type QueryFeedbackResponseDataType = ClosedEnum<
  typeof QueryFeedbackResponseDataType
>;

export type QueryFeedbackResponseDataReasons = {
  label: string;
  details: string;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type QueryFeedbackResponseDataId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type QueryFeedbackResponseDataUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const QueryFeedbackResponseDataUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type QueryFeedbackResponseDataUserType = ClosedEnum<
  typeof QueryFeedbackResponseDataUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type QueryFeedbackResponseDataUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: QueryFeedbackResponseDataUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const QueryFeedbackResponseDataStatus = {
  Unreviewed: "unreviewed",
  Flagged: "flagged",
  Deferred: "deferred",
  Resolved: "resolved",
} as const;
export type QueryFeedbackResponseDataStatus = ClosedEnum<
  typeof QueryFeedbackResponseDataStatus
>;

export type FeedbackResultItem = {
  id?: string | undefined;
  type?: QueryFeedbackResponseDataType | undefined;
  messageId?: string | undefined;
  createdAt?: Date | undefined;
  organizationId?: string | undefined;
  reasons?: Array<QueryFeedbackResponseDataReasons> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: QueryFeedbackResponseDataUserProperties | null | undefined;
  conversationId?: string | undefined;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  updatedAt?: Date | null | undefined;
  status?: QueryFeedbackResponseDataStatus | undefined;
  sum?: number | undefined;
  count?: number | undefined;
  avg?: number | undefined;
  min?: number | undefined;
  max?: number | undefined;
  idHour?: string | undefined;
  idDay?: string | undefined;
  idWeek?: string | undefined;
  idMonth?: string | undefined;
  typeHour?: string | undefined;
  typeDay?: string | undefined;
  typeWeek?: string | undefined;
  typeMonth?: string | undefined;
  messageIdHour?: string | undefined;
  messageIdDay?: string | undefined;
  messageIdWeek?: string | undefined;
  messageIdMonth?: string | undefined;
  createdAtHour?: string | undefined;
  createdAtDay?: string | undefined;
  createdAtWeek?: string | undefined;
  createdAtMonth?: string | undefined;
  organizationIdHour?: string | undefined;
  organizationIdDay?: string | undefined;
  organizationIdWeek?: string | undefined;
  organizationIdMonth?: string | undefined;
  reasonsHour?: string | undefined;
  reasonsDay?: string | undefined;
  reasonsWeek?: string | undefined;
  reasonsMonth?: string | undefined;
  propertiesHour?: string | undefined;
  propertiesDay?: string | undefined;
  propertiesWeek?: string | undefined;
  propertiesMonth?: string | undefined;
  userPropertiesHour?: string | undefined;
  userPropertiesDay?: string | undefined;
  userPropertiesWeek?: string | undefined;
  userPropertiesMonth?: string | undefined;
  conversationIdHour?: string | undefined;
  conversationIdDay?: string | undefined;
  conversationIdWeek?: string | undefined;
  conversationIdMonth?: string | undefined;
  projectIdHour?: string | undefined;
  projectIdDay?: string | undefined;
  projectIdWeek?: string | undefined;
  projectIdMonth?: string | undefined;
  integrationIdHour?: string | undefined;
  integrationIdDay?: string | undefined;
  integrationIdWeek?: string | undefined;
  integrationIdMonth?: string | undefined;
  updatedAtHour?: string | undefined;
  updatedAtDay?: string | undefined;
  updatedAtWeek?: string | undefined;
  updatedAtMonth?: string | undefined;
  statusHour?: string | undefined;
  statusDay?: string | undefined;
  statusWeek?: string | undefined;
  statusMonth?: string | undefined;
  sumId?: number | undefined;
  sumType?: number | undefined;
  sumMessageId?: number | undefined;
  sumCreatedAt?: number | undefined;
  sumOrganizationId?: number | undefined;
  sumReasons?: number | undefined;
  sumProperties?: number | undefined;
  sumUserProperties?: number | undefined;
  sumConversationId?: number | undefined;
  sumProjectId?: number | undefined;
  sumIntegrationId?: number | undefined;
  sumUpdatedAt?: number | undefined;
  sumStatus?: number | undefined;
  countId?: number | undefined;
  countType?: number | undefined;
  countMessageId?: number | undefined;
  countCreatedAt?: number | undefined;
  countOrganizationId?: number | undefined;
  countReasons?: number | undefined;
  countProperties?: number | undefined;
  countUserProperties?: number | undefined;
  countConversationId?: number | undefined;
  countProjectId?: number | undefined;
  countIntegrationId?: number | undefined;
  countUpdatedAt?: number | undefined;
  countStatus?: number | undefined;
  avgId?: number | undefined;
  avgType?: number | undefined;
  avgMessageId?: number | undefined;
  avgCreatedAt?: number | undefined;
  avgOrganizationId?: number | undefined;
  avgReasons?: number | undefined;
  avgProperties?: number | undefined;
  avgUserProperties?: number | undefined;
  avgConversationId?: number | undefined;
  avgProjectId?: number | undefined;
  avgIntegrationId?: number | undefined;
  avgUpdatedAt?: number | undefined;
  avgStatus?: number | undefined;
  minId?: number | undefined;
  minType?: number | undefined;
  minMessageId?: number | undefined;
  minCreatedAt?: number | undefined;
  minOrganizationId?: number | undefined;
  minReasons?: number | undefined;
  minProperties?: number | undefined;
  minUserProperties?: number | undefined;
  minConversationId?: number | undefined;
  minProjectId?: number | undefined;
  minIntegrationId?: number | undefined;
  minUpdatedAt?: number | undefined;
  minStatus?: number | undefined;
  maxId?: number | undefined;
  maxType?: number | undefined;
  maxMessageId?: number | undefined;
  maxCreatedAt?: number | undefined;
  maxOrganizationId?: number | undefined;
  maxReasons?: number | undefined;
  maxProperties?: number | undefined;
  maxUserProperties?: number | undefined;
  maxConversationId?: number | undefined;
  maxProjectId?: number | undefined;
  maxIntegrationId?: number | undefined;
  maxUpdatedAt?: number | undefined;
  maxStatus?: number | undefined;
  sumPropertiesUserId?: number | undefined;
  sumPropertiesSupportAgentName?: number | undefined;
  sumUserPropertiesUserId?: number | undefined;
  sumUserPropertiesSupportAgentName?: number | undefined;
  countPropertiesUserId?: number | undefined;
  countPropertiesSupportAgentName?: number | undefined;
  countUserPropertiesUserId?: number | undefined;
  countUserPropertiesSupportAgentName?: number | undefined;
  countDistinctPropertiesUserId?: number | undefined;
  countDistinctPropertiesSupportAgentName?: number | undefined;
  countDistinctUserPropertiesUserId?: number | undefined;
  countDistinctUserPropertiesSupportAgentName?: number | undefined;
  avgPropertiesUserId?: number | undefined;
  avgPropertiesSupportAgentName?: number | undefined;
  avgUserPropertiesUserId?: number | undefined;
  avgUserPropertiesSupportAgentName?: number | undefined;
  minPropertiesUserId?: number | undefined;
  minPropertiesSupportAgentName?: number | undefined;
  minUserPropertiesUserId?: number | undefined;
  minUserPropertiesSupportAgentName?: number | undefined;
  maxPropertiesUserId?: number | undefined;
  maxPropertiesSupportAgentName?: number | undefined;
  maxUserPropertiesUserId?: number | undefined;
  maxUserPropertiesSupportAgentName?: number | undefined;
  propertiesUserId?: string | null | undefined;
  propertiesSupportAgentName?: string | null | undefined;
  userPropertiesUserId?: string | null | undefined;
  userPropertiesSupportAgentName?: string | null | undefined;
};

/**
 * Data object containing QueryFeedback query results and pagination information
 */
export type QueryFeedbackResponseData = {
  result: Array<FeedbackResultItem>;
  /**
   * Total number of results matching the query
   */
  total: number;
  /**
   * Number of results per page
   */
  pageSize: number;
  /**
   * Number of results in the current response
   */
  count: number;
};

/** @internal */
export const QueryFeedbackResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof QueryFeedbackResponseDataType
> = z.nativeEnum(QueryFeedbackResponseDataType);

/** @internal */
export const QueryFeedbackResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof QueryFeedbackResponseDataType
> = QueryFeedbackResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataType$ {
  /** @deprecated use `QueryFeedbackResponseDataType$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseDataType$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataType$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackResponseDataType$outboundSchema;
}

/** @internal */
export const QueryFeedbackResponseDataReasons$inboundSchema: z.ZodType<
  QueryFeedbackResponseDataReasons,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  details: z.string(),
});

/** @internal */
export type QueryFeedbackResponseDataReasons$Outbound = {
  label: string;
  details: string;
};

/** @internal */
export const QueryFeedbackResponseDataReasons$outboundSchema: z.ZodType<
  QueryFeedbackResponseDataReasons$Outbound,
  z.ZodTypeDef,
  QueryFeedbackResponseDataReasons
> = z.object({
  label: z.string(),
  details: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataReasons$ {
  /** @deprecated use `QueryFeedbackResponseDataReasons$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseDataReasons$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataReasons$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackResponseDataReasons$outboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataReasons$Outbound` instead. */
  export type Outbound = QueryFeedbackResponseDataReasons$Outbound;
}

export function queryFeedbackResponseDataReasonsToJSON(
  queryFeedbackResponseDataReasons: QueryFeedbackResponseDataReasons,
): string {
  return JSON.stringify(
    QueryFeedbackResponseDataReasons$outboundSchema.parse(
      queryFeedbackResponseDataReasons,
    ),
  );
}

export function queryFeedbackResponseDataReasonsFromJSON(
  jsonString: string,
): SafeParseResult<QueryFeedbackResponseDataReasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryFeedbackResponseDataReasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryFeedbackResponseDataReasons' from JSON`,
  );
}

/** @internal */
export const QueryFeedbackResponseDataId$inboundSchema: z.ZodType<
  QueryFeedbackResponseDataId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type QueryFeedbackResponseDataId$Outbound = string | number;

/** @internal */
export const QueryFeedbackResponseDataId$outboundSchema: z.ZodType<
  QueryFeedbackResponseDataId$Outbound,
  z.ZodTypeDef,
  QueryFeedbackResponseDataId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataId$ {
  /** @deprecated use `QueryFeedbackResponseDataId$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseDataId$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataId$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackResponseDataId$outboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataId$Outbound` instead. */
  export type Outbound = QueryFeedbackResponseDataId$Outbound;
}

export function queryFeedbackResponseDataIdToJSON(
  queryFeedbackResponseDataId: QueryFeedbackResponseDataId,
): string {
  return JSON.stringify(
    QueryFeedbackResponseDataId$outboundSchema.parse(
      queryFeedbackResponseDataId,
    ),
  );
}

export function queryFeedbackResponseDataIdFromJSON(
  jsonString: string,
): SafeParseResult<QueryFeedbackResponseDataId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryFeedbackResponseDataId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryFeedbackResponseDataId' from JSON`,
  );
}

/** @internal */
export const QueryFeedbackResponseDataUserId$inboundSchema: z.ZodType<
  QueryFeedbackResponseDataUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type QueryFeedbackResponseDataUserId$Outbound = string | number;

/** @internal */
export const QueryFeedbackResponseDataUserId$outboundSchema: z.ZodType<
  QueryFeedbackResponseDataUserId$Outbound,
  z.ZodTypeDef,
  QueryFeedbackResponseDataUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataUserId$ {
  /** @deprecated use `QueryFeedbackResponseDataUserId$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseDataUserId$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataUserId$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackResponseDataUserId$outboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataUserId$Outbound` instead. */
  export type Outbound = QueryFeedbackResponseDataUserId$Outbound;
}

export function queryFeedbackResponseDataUserIdToJSON(
  queryFeedbackResponseDataUserId: QueryFeedbackResponseDataUserId,
): string {
  return JSON.stringify(
    QueryFeedbackResponseDataUserId$outboundSchema.parse(
      queryFeedbackResponseDataUserId,
    ),
  );
}

export function queryFeedbackResponseDataUserIdFromJSON(
  jsonString: string,
): SafeParseResult<QueryFeedbackResponseDataUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryFeedbackResponseDataUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryFeedbackResponseDataUserId' from JSON`,
  );
}

/** @internal */
export const QueryFeedbackResponseDataUserType$inboundSchema: z.ZodNativeEnum<
  typeof QueryFeedbackResponseDataUserType
> = z.nativeEnum(QueryFeedbackResponseDataUserType);

/** @internal */
export const QueryFeedbackResponseDataUserType$outboundSchema: z.ZodNativeEnum<
  typeof QueryFeedbackResponseDataUserType
> = QueryFeedbackResponseDataUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataUserType$ {
  /** @deprecated use `QueryFeedbackResponseDataUserType$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseDataUserType$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataUserType$outboundSchema` instead. */
  export const outboundSchema =
    QueryFeedbackResponseDataUserType$outboundSchema;
}

/** @internal */
export const QueryFeedbackResponseDataUserProperties$inboundSchema: z.ZodType<
  QueryFeedbackResponseDataUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(QueryFeedbackResponseDataUserType$inboundSchema)
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type QueryFeedbackResponseDataUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const QueryFeedbackResponseDataUserProperties$outboundSchema: z.ZodType<
  QueryFeedbackResponseDataUserProperties$Outbound,
  z.ZodTypeDef,
  QueryFeedbackResponseDataUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(QueryFeedbackResponseDataUserType$outboundSchema)
    .optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataUserProperties$ {
  /** @deprecated use `QueryFeedbackResponseDataUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    QueryFeedbackResponseDataUserProperties$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    QueryFeedbackResponseDataUserProperties$outboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataUserProperties$Outbound` instead. */
  export type Outbound = QueryFeedbackResponseDataUserProperties$Outbound;
}

export function queryFeedbackResponseDataUserPropertiesToJSON(
  queryFeedbackResponseDataUserProperties:
    QueryFeedbackResponseDataUserProperties,
): string {
  return JSON.stringify(
    QueryFeedbackResponseDataUserProperties$outboundSchema.parse(
      queryFeedbackResponseDataUserProperties,
    ),
  );
}

export function queryFeedbackResponseDataUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  QueryFeedbackResponseDataUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      QueryFeedbackResponseDataUserProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'QueryFeedbackResponseDataUserProperties' from JSON`,
  );
}

/** @internal */
export const QueryFeedbackResponseDataStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryFeedbackResponseDataStatus
> = z.nativeEnum(QueryFeedbackResponseDataStatus);

/** @internal */
export const QueryFeedbackResponseDataStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryFeedbackResponseDataStatus
> = QueryFeedbackResponseDataStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseDataStatus$ {
  /** @deprecated use `QueryFeedbackResponseDataStatus$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseDataStatus$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseDataStatus$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackResponseDataStatus$outboundSchema;
}

/** @internal */
export const FeedbackResultItem$inboundSchema: z.ZodType<
  FeedbackResultItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: QueryFeedbackResponseDataType$inboundSchema.optional(),
  messageId: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  organizationId: z.string().optional(),
  reasons: z.nullable(
    z.array(z.lazy(() => QueryFeedbackResponseDataReasons$inboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => QueryFeedbackResponseDataUserProperties$inboundSchema),
  ).optional(),
  conversationId: z.string().optional(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: QueryFeedbackResponseDataStatus$inboundSchema.default("unreviewed"),
  sum: z.number().optional(),
  count: z.number().optional(),
  avg: z.number().optional(),
  min: z.number().optional(),
  max: z.number().optional(),
  id_hour: z.string().optional(),
  id_day: z.string().optional(),
  id_week: z.string().optional(),
  id_month: z.string().optional(),
  type_hour: z.string().optional(),
  type_day: z.string().optional(),
  type_week: z.string().optional(),
  type_month: z.string().optional(),
  messageId_hour: z.string().optional(),
  messageId_day: z.string().optional(),
  messageId_week: z.string().optional(),
  messageId_month: z.string().optional(),
  createdAt_hour: z.string().optional(),
  createdAt_day: z.string().optional(),
  createdAt_week: z.string().optional(),
  createdAt_month: z.string().optional(),
  organizationId_hour: z.string().optional(),
  organizationId_day: z.string().optional(),
  organizationId_week: z.string().optional(),
  organizationId_month: z.string().optional(),
  reasons_hour: z.string().optional(),
  reasons_day: z.string().optional(),
  reasons_week: z.string().optional(),
  reasons_month: z.string().optional(),
  properties_hour: z.string().optional(),
  properties_day: z.string().optional(),
  properties_week: z.string().optional(),
  properties_month: z.string().optional(),
  userProperties_hour: z.string().optional(),
  userProperties_day: z.string().optional(),
  userProperties_week: z.string().optional(),
  userProperties_month: z.string().optional(),
  conversationId_hour: z.string().optional(),
  conversationId_day: z.string().optional(),
  conversationId_week: z.string().optional(),
  conversationId_month: z.string().optional(),
  projectId_hour: z.string().optional(),
  projectId_day: z.string().optional(),
  projectId_week: z.string().optional(),
  projectId_month: z.string().optional(),
  integrationId_hour: z.string().optional(),
  integrationId_day: z.string().optional(),
  integrationId_week: z.string().optional(),
  integrationId_month: z.string().optional(),
  updatedAt_hour: z.string().optional(),
  updatedAt_day: z.string().optional(),
  updatedAt_week: z.string().optional(),
  updatedAt_month: z.string().optional(),
  status_hour: z.string().optional(),
  status_day: z.string().optional(),
  status_week: z.string().optional(),
  status_month: z.string().optional(),
  sum_id: z.number().optional(),
  sum_type: z.number().optional(),
  sum_messageId: z.number().optional(),
  sum_createdAt: z.number().optional(),
  sum_organizationId: z.number().optional(),
  sum_reasons: z.number().optional(),
  sum_properties: z.number().optional(),
  sum_userProperties: z.number().optional(),
  sum_conversationId: z.number().optional(),
  sum_projectId: z.number().optional(),
  sum_integrationId: z.number().optional(),
  sum_updatedAt: z.number().optional(),
  sum_status: z.number().optional(),
  count_id: z.number().optional(),
  count_type: z.number().optional(),
  count_messageId: z.number().optional(),
  count_createdAt: z.number().optional(),
  count_organizationId: z.number().optional(),
  count_reasons: z.number().optional(),
  count_properties: z.number().optional(),
  count_userProperties: z.number().optional(),
  count_conversationId: z.number().optional(),
  count_projectId: z.number().optional(),
  count_integrationId: z.number().optional(),
  count_updatedAt: z.number().optional(),
  count_status: z.number().optional(),
  avg_id: z.number().optional(),
  avg_type: z.number().optional(),
  avg_messageId: z.number().optional(),
  avg_createdAt: z.number().optional(),
  avg_organizationId: z.number().optional(),
  avg_reasons: z.number().optional(),
  avg_properties: z.number().optional(),
  avg_userProperties: z.number().optional(),
  avg_conversationId: z.number().optional(),
  avg_projectId: z.number().optional(),
  avg_integrationId: z.number().optional(),
  avg_updatedAt: z.number().optional(),
  avg_status: z.number().optional(),
  min_id: z.number().optional(),
  min_type: z.number().optional(),
  min_messageId: z.number().optional(),
  min_createdAt: z.number().optional(),
  min_organizationId: z.number().optional(),
  min_reasons: z.number().optional(),
  min_properties: z.number().optional(),
  min_userProperties: z.number().optional(),
  min_conversationId: z.number().optional(),
  min_projectId: z.number().optional(),
  min_integrationId: z.number().optional(),
  min_updatedAt: z.number().optional(),
  min_status: z.number().optional(),
  max_id: z.number().optional(),
  max_type: z.number().optional(),
  max_messageId: z.number().optional(),
  max_createdAt: z.number().optional(),
  max_organizationId: z.number().optional(),
  max_reasons: z.number().optional(),
  max_properties: z.number().optional(),
  max_userProperties: z.number().optional(),
  max_conversationId: z.number().optional(),
  max_projectId: z.number().optional(),
  max_integrationId: z.number().optional(),
  max_updatedAt: z.number().optional(),
  max_status: z.number().optional(),
  "sum_properties.userId": z.number().optional(),
  "sum_properties.supportAgentName": z.number().optional(),
  "sum_userProperties.userId": z.number().optional(),
  "sum_userProperties.supportAgentName": z.number().optional(),
  "count_properties.userId": z.number().optional(),
  "count_properties.supportAgentName": z.number().optional(),
  "count_userProperties.userId": z.number().optional(),
  "count_userProperties.supportAgentName": z.number().optional(),
  "countDistinct_properties.userId": z.number().optional(),
  "countDistinct_properties.supportAgentName": z.number().optional(),
  "countDistinct_userProperties.userId": z.number().optional(),
  "countDistinct_userProperties.supportAgentName": z.number().optional(),
  "avg_properties.userId": z.number().optional(),
  "avg_properties.supportAgentName": z.number().optional(),
  "avg_userProperties.userId": z.number().optional(),
  "avg_userProperties.supportAgentName": z.number().optional(),
  "min_properties.userId": z.number().optional(),
  "min_properties.supportAgentName": z.number().optional(),
  "min_userProperties.userId": z.number().optional(),
  "min_userProperties.supportAgentName": z.number().optional(),
  "max_properties.userId": z.number().optional(),
  "max_properties.supportAgentName": z.number().optional(),
  "max_userProperties.userId": z.number().optional(),
  "max_userProperties.supportAgentName": z.number().optional(),
  "properties.userId": z.nullable(z.string()).optional(),
  "properties.supportAgentName": z.nullable(z.string()).optional(),
  "userProperties.userId": z.nullable(z.string()).optional(),
  "userProperties.supportAgentName": z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "id_hour": "idHour",
    "id_day": "idDay",
    "id_week": "idWeek",
    "id_month": "idMonth",
    "type_hour": "typeHour",
    "type_day": "typeDay",
    "type_week": "typeWeek",
    "type_month": "typeMonth",
    "messageId_hour": "messageIdHour",
    "messageId_day": "messageIdDay",
    "messageId_week": "messageIdWeek",
    "messageId_month": "messageIdMonth",
    "createdAt_hour": "createdAtHour",
    "createdAt_day": "createdAtDay",
    "createdAt_week": "createdAtWeek",
    "createdAt_month": "createdAtMonth",
    "organizationId_hour": "organizationIdHour",
    "organizationId_day": "organizationIdDay",
    "organizationId_week": "organizationIdWeek",
    "organizationId_month": "organizationIdMonth",
    "reasons_hour": "reasonsHour",
    "reasons_day": "reasonsDay",
    "reasons_week": "reasonsWeek",
    "reasons_month": "reasonsMonth",
    "properties_hour": "propertiesHour",
    "properties_day": "propertiesDay",
    "properties_week": "propertiesWeek",
    "properties_month": "propertiesMonth",
    "userProperties_hour": "userPropertiesHour",
    "userProperties_day": "userPropertiesDay",
    "userProperties_week": "userPropertiesWeek",
    "userProperties_month": "userPropertiesMonth",
    "conversationId_hour": "conversationIdHour",
    "conversationId_day": "conversationIdDay",
    "conversationId_week": "conversationIdWeek",
    "conversationId_month": "conversationIdMonth",
    "projectId_hour": "projectIdHour",
    "projectId_day": "projectIdDay",
    "projectId_week": "projectIdWeek",
    "projectId_month": "projectIdMonth",
    "integrationId_hour": "integrationIdHour",
    "integrationId_day": "integrationIdDay",
    "integrationId_week": "integrationIdWeek",
    "integrationId_month": "integrationIdMonth",
    "updatedAt_hour": "updatedAtHour",
    "updatedAt_day": "updatedAtDay",
    "updatedAt_week": "updatedAtWeek",
    "updatedAt_month": "updatedAtMonth",
    "status_hour": "statusHour",
    "status_day": "statusDay",
    "status_week": "statusWeek",
    "status_month": "statusMonth",
    "sum_id": "sumId",
    "sum_type": "sumType",
    "sum_messageId": "sumMessageId",
    "sum_createdAt": "sumCreatedAt",
    "sum_organizationId": "sumOrganizationId",
    "sum_reasons": "sumReasons",
    "sum_properties": "sumProperties",
    "sum_userProperties": "sumUserProperties",
    "sum_conversationId": "sumConversationId",
    "sum_projectId": "sumProjectId",
    "sum_integrationId": "sumIntegrationId",
    "sum_updatedAt": "sumUpdatedAt",
    "sum_status": "sumStatus",
    "count_id": "countId",
    "count_type": "countType",
    "count_messageId": "countMessageId",
    "count_createdAt": "countCreatedAt",
    "count_organizationId": "countOrganizationId",
    "count_reasons": "countReasons",
    "count_properties": "countProperties",
    "count_userProperties": "countUserProperties",
    "count_conversationId": "countConversationId",
    "count_projectId": "countProjectId",
    "count_integrationId": "countIntegrationId",
    "count_updatedAt": "countUpdatedAt",
    "count_status": "countStatus",
    "avg_id": "avgId",
    "avg_type": "avgType",
    "avg_messageId": "avgMessageId",
    "avg_createdAt": "avgCreatedAt",
    "avg_organizationId": "avgOrganizationId",
    "avg_reasons": "avgReasons",
    "avg_properties": "avgProperties",
    "avg_userProperties": "avgUserProperties",
    "avg_conversationId": "avgConversationId",
    "avg_projectId": "avgProjectId",
    "avg_integrationId": "avgIntegrationId",
    "avg_updatedAt": "avgUpdatedAt",
    "avg_status": "avgStatus",
    "min_id": "minId",
    "min_type": "minType",
    "min_messageId": "minMessageId",
    "min_createdAt": "minCreatedAt",
    "min_organizationId": "minOrganizationId",
    "min_reasons": "minReasons",
    "min_properties": "minProperties",
    "min_userProperties": "minUserProperties",
    "min_conversationId": "minConversationId",
    "min_projectId": "minProjectId",
    "min_integrationId": "minIntegrationId",
    "min_updatedAt": "minUpdatedAt",
    "min_status": "minStatus",
    "max_id": "maxId",
    "max_type": "maxType",
    "max_messageId": "maxMessageId",
    "max_createdAt": "maxCreatedAt",
    "max_organizationId": "maxOrganizationId",
    "max_reasons": "maxReasons",
    "max_properties": "maxProperties",
    "max_userProperties": "maxUserProperties",
    "max_conversationId": "maxConversationId",
    "max_projectId": "maxProjectId",
    "max_integrationId": "maxIntegrationId",
    "max_updatedAt": "maxUpdatedAt",
    "max_status": "maxStatus",
    "sum_properties.userId": "sumPropertiesUserId",
    "sum_properties.supportAgentName": "sumPropertiesSupportAgentName",
    "sum_userProperties.userId": "sumUserPropertiesUserId",
    "sum_userProperties.supportAgentName": "sumUserPropertiesSupportAgentName",
    "count_properties.userId": "countPropertiesUserId",
    "count_properties.supportAgentName": "countPropertiesSupportAgentName",
    "count_userProperties.userId": "countUserPropertiesUserId",
    "count_userProperties.supportAgentName":
      "countUserPropertiesSupportAgentName",
    "countDistinct_properties.userId": "countDistinctPropertiesUserId",
    "countDistinct_properties.supportAgentName":
      "countDistinctPropertiesSupportAgentName",
    "countDistinct_userProperties.userId": "countDistinctUserPropertiesUserId",
    "countDistinct_userProperties.supportAgentName":
      "countDistinctUserPropertiesSupportAgentName",
    "avg_properties.userId": "avgPropertiesUserId",
    "avg_properties.supportAgentName": "avgPropertiesSupportAgentName",
    "avg_userProperties.userId": "avgUserPropertiesUserId",
    "avg_userProperties.supportAgentName": "avgUserPropertiesSupportAgentName",
    "min_properties.userId": "minPropertiesUserId",
    "min_properties.supportAgentName": "minPropertiesSupportAgentName",
    "min_userProperties.userId": "minUserPropertiesUserId",
    "min_userProperties.supportAgentName": "minUserPropertiesSupportAgentName",
    "max_properties.userId": "maxPropertiesUserId",
    "max_properties.supportAgentName": "maxPropertiesSupportAgentName",
    "max_userProperties.userId": "maxUserPropertiesUserId",
    "max_userProperties.supportAgentName": "maxUserPropertiesSupportAgentName",
    "properties.userId": "propertiesUserId",
    "properties.supportAgentName": "propertiesSupportAgentName",
    "userProperties.userId": "userPropertiesUserId",
    "userProperties.supportAgentName": "userPropertiesSupportAgentName",
  });
});

/** @internal */
export type FeedbackResultItem$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  messageId?: string | undefined;
  createdAt?: string | undefined;
  organizationId?: string | undefined;
  reasons?: Array<QueryFeedbackResponseDataReasons$Outbound> | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | QueryFeedbackResponseDataUserProperties$Outbound
    | null
    | undefined;
  conversationId?: string | undefined;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  updatedAt?: string | null | undefined;
  status: string;
  sum?: number | undefined;
  count?: number | undefined;
  avg?: number | undefined;
  min?: number | undefined;
  max?: number | undefined;
  id_hour?: string | undefined;
  id_day?: string | undefined;
  id_week?: string | undefined;
  id_month?: string | undefined;
  type_hour?: string | undefined;
  type_day?: string | undefined;
  type_week?: string | undefined;
  type_month?: string | undefined;
  messageId_hour?: string | undefined;
  messageId_day?: string | undefined;
  messageId_week?: string | undefined;
  messageId_month?: string | undefined;
  createdAt_hour?: string | undefined;
  createdAt_day?: string | undefined;
  createdAt_week?: string | undefined;
  createdAt_month?: string | undefined;
  organizationId_hour?: string | undefined;
  organizationId_day?: string | undefined;
  organizationId_week?: string | undefined;
  organizationId_month?: string | undefined;
  reasons_hour?: string | undefined;
  reasons_day?: string | undefined;
  reasons_week?: string | undefined;
  reasons_month?: string | undefined;
  properties_hour?: string | undefined;
  properties_day?: string | undefined;
  properties_week?: string | undefined;
  properties_month?: string | undefined;
  userProperties_hour?: string | undefined;
  userProperties_day?: string | undefined;
  userProperties_week?: string | undefined;
  userProperties_month?: string | undefined;
  conversationId_hour?: string | undefined;
  conversationId_day?: string | undefined;
  conversationId_week?: string | undefined;
  conversationId_month?: string | undefined;
  projectId_hour?: string | undefined;
  projectId_day?: string | undefined;
  projectId_week?: string | undefined;
  projectId_month?: string | undefined;
  integrationId_hour?: string | undefined;
  integrationId_day?: string | undefined;
  integrationId_week?: string | undefined;
  integrationId_month?: string | undefined;
  updatedAt_hour?: string | undefined;
  updatedAt_day?: string | undefined;
  updatedAt_week?: string | undefined;
  updatedAt_month?: string | undefined;
  status_hour?: string | undefined;
  status_day?: string | undefined;
  status_week?: string | undefined;
  status_month?: string | undefined;
  sum_id?: number | undefined;
  sum_type?: number | undefined;
  sum_messageId?: number | undefined;
  sum_createdAt?: number | undefined;
  sum_organizationId?: number | undefined;
  sum_reasons?: number | undefined;
  sum_properties?: number | undefined;
  sum_userProperties?: number | undefined;
  sum_conversationId?: number | undefined;
  sum_projectId?: number | undefined;
  sum_integrationId?: number | undefined;
  sum_updatedAt?: number | undefined;
  sum_status?: number | undefined;
  count_id?: number | undefined;
  count_type?: number | undefined;
  count_messageId?: number | undefined;
  count_createdAt?: number | undefined;
  count_organizationId?: number | undefined;
  count_reasons?: number | undefined;
  count_properties?: number | undefined;
  count_userProperties?: number | undefined;
  count_conversationId?: number | undefined;
  count_projectId?: number | undefined;
  count_integrationId?: number | undefined;
  count_updatedAt?: number | undefined;
  count_status?: number | undefined;
  avg_id?: number | undefined;
  avg_type?: number | undefined;
  avg_messageId?: number | undefined;
  avg_createdAt?: number | undefined;
  avg_organizationId?: number | undefined;
  avg_reasons?: number | undefined;
  avg_properties?: number | undefined;
  avg_userProperties?: number | undefined;
  avg_conversationId?: number | undefined;
  avg_projectId?: number | undefined;
  avg_integrationId?: number | undefined;
  avg_updatedAt?: number | undefined;
  avg_status?: number | undefined;
  min_id?: number | undefined;
  min_type?: number | undefined;
  min_messageId?: number | undefined;
  min_createdAt?: number | undefined;
  min_organizationId?: number | undefined;
  min_reasons?: number | undefined;
  min_properties?: number | undefined;
  min_userProperties?: number | undefined;
  min_conversationId?: number | undefined;
  min_projectId?: number | undefined;
  min_integrationId?: number | undefined;
  min_updatedAt?: number | undefined;
  min_status?: number | undefined;
  max_id?: number | undefined;
  max_type?: number | undefined;
  max_messageId?: number | undefined;
  max_createdAt?: number | undefined;
  max_organizationId?: number | undefined;
  max_reasons?: number | undefined;
  max_properties?: number | undefined;
  max_userProperties?: number | undefined;
  max_conversationId?: number | undefined;
  max_projectId?: number | undefined;
  max_integrationId?: number | undefined;
  max_updatedAt?: number | undefined;
  max_status?: number | undefined;
  "sum_properties.userId"?: number | undefined;
  "sum_properties.supportAgentName"?: number | undefined;
  "sum_userProperties.userId"?: number | undefined;
  "sum_userProperties.supportAgentName"?: number | undefined;
  "count_properties.userId"?: number | undefined;
  "count_properties.supportAgentName"?: number | undefined;
  "count_userProperties.userId"?: number | undefined;
  "count_userProperties.supportAgentName"?: number | undefined;
  "countDistinct_properties.userId"?: number | undefined;
  "countDistinct_properties.supportAgentName"?: number | undefined;
  "countDistinct_userProperties.userId"?: number | undefined;
  "countDistinct_userProperties.supportAgentName"?: number | undefined;
  "avg_properties.userId"?: number | undefined;
  "avg_properties.supportAgentName"?: number | undefined;
  "avg_userProperties.userId"?: number | undefined;
  "avg_userProperties.supportAgentName"?: number | undefined;
  "min_properties.userId"?: number | undefined;
  "min_properties.supportAgentName"?: number | undefined;
  "min_userProperties.userId"?: number | undefined;
  "min_userProperties.supportAgentName"?: number | undefined;
  "max_properties.userId"?: number | undefined;
  "max_properties.supportAgentName"?: number | undefined;
  "max_userProperties.userId"?: number | undefined;
  "max_userProperties.supportAgentName"?: number | undefined;
  "properties.userId"?: string | null | undefined;
  "properties.supportAgentName"?: string | null | undefined;
  "userProperties.userId"?: string | null | undefined;
  "userProperties.supportAgentName"?: string | null | undefined;
};

/** @internal */
export const FeedbackResultItem$outboundSchema: z.ZodType<
  FeedbackResultItem$Outbound,
  z.ZodTypeDef,
  FeedbackResultItem
> = z.object({
  id: z.string().optional(),
  type: QueryFeedbackResponseDataType$outboundSchema.optional(),
  messageId: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  organizationId: z.string().optional(),
  reasons: z.nullable(
    z.array(z.lazy(() => QueryFeedbackResponseDataReasons$outboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => QueryFeedbackResponseDataUserProperties$outboundSchema),
  ).optional(),
  conversationId: z.string().optional(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  status: QueryFeedbackResponseDataStatus$outboundSchema.default("unreviewed"),
  sum: z.number().optional(),
  count: z.number().optional(),
  avg: z.number().optional(),
  min: z.number().optional(),
  max: z.number().optional(),
  idHour: z.string().optional(),
  idDay: z.string().optional(),
  idWeek: z.string().optional(),
  idMonth: z.string().optional(),
  typeHour: z.string().optional(),
  typeDay: z.string().optional(),
  typeWeek: z.string().optional(),
  typeMonth: z.string().optional(),
  messageIdHour: z.string().optional(),
  messageIdDay: z.string().optional(),
  messageIdWeek: z.string().optional(),
  messageIdMonth: z.string().optional(),
  createdAtHour: z.string().optional(),
  createdAtDay: z.string().optional(),
  createdAtWeek: z.string().optional(),
  createdAtMonth: z.string().optional(),
  organizationIdHour: z.string().optional(),
  organizationIdDay: z.string().optional(),
  organizationIdWeek: z.string().optional(),
  organizationIdMonth: z.string().optional(),
  reasonsHour: z.string().optional(),
  reasonsDay: z.string().optional(),
  reasonsWeek: z.string().optional(),
  reasonsMonth: z.string().optional(),
  propertiesHour: z.string().optional(),
  propertiesDay: z.string().optional(),
  propertiesWeek: z.string().optional(),
  propertiesMonth: z.string().optional(),
  userPropertiesHour: z.string().optional(),
  userPropertiesDay: z.string().optional(),
  userPropertiesWeek: z.string().optional(),
  userPropertiesMonth: z.string().optional(),
  conversationIdHour: z.string().optional(),
  conversationIdDay: z.string().optional(),
  conversationIdWeek: z.string().optional(),
  conversationIdMonth: z.string().optional(),
  projectIdHour: z.string().optional(),
  projectIdDay: z.string().optional(),
  projectIdWeek: z.string().optional(),
  projectIdMonth: z.string().optional(),
  integrationIdHour: z.string().optional(),
  integrationIdDay: z.string().optional(),
  integrationIdWeek: z.string().optional(),
  integrationIdMonth: z.string().optional(),
  updatedAtHour: z.string().optional(),
  updatedAtDay: z.string().optional(),
  updatedAtWeek: z.string().optional(),
  updatedAtMonth: z.string().optional(),
  statusHour: z.string().optional(),
  statusDay: z.string().optional(),
  statusWeek: z.string().optional(),
  statusMonth: z.string().optional(),
  sumId: z.number().optional(),
  sumType: z.number().optional(),
  sumMessageId: z.number().optional(),
  sumCreatedAt: z.number().optional(),
  sumOrganizationId: z.number().optional(),
  sumReasons: z.number().optional(),
  sumProperties: z.number().optional(),
  sumUserProperties: z.number().optional(),
  sumConversationId: z.number().optional(),
  sumProjectId: z.number().optional(),
  sumIntegrationId: z.number().optional(),
  sumUpdatedAt: z.number().optional(),
  sumStatus: z.number().optional(),
  countId: z.number().optional(),
  countType: z.number().optional(),
  countMessageId: z.number().optional(),
  countCreatedAt: z.number().optional(),
  countOrganizationId: z.number().optional(),
  countReasons: z.number().optional(),
  countProperties: z.number().optional(),
  countUserProperties: z.number().optional(),
  countConversationId: z.number().optional(),
  countProjectId: z.number().optional(),
  countIntegrationId: z.number().optional(),
  countUpdatedAt: z.number().optional(),
  countStatus: z.number().optional(),
  avgId: z.number().optional(),
  avgType: z.number().optional(),
  avgMessageId: z.number().optional(),
  avgCreatedAt: z.number().optional(),
  avgOrganizationId: z.number().optional(),
  avgReasons: z.number().optional(),
  avgProperties: z.number().optional(),
  avgUserProperties: z.number().optional(),
  avgConversationId: z.number().optional(),
  avgProjectId: z.number().optional(),
  avgIntegrationId: z.number().optional(),
  avgUpdatedAt: z.number().optional(),
  avgStatus: z.number().optional(),
  minId: z.number().optional(),
  minType: z.number().optional(),
  minMessageId: z.number().optional(),
  minCreatedAt: z.number().optional(),
  minOrganizationId: z.number().optional(),
  minReasons: z.number().optional(),
  minProperties: z.number().optional(),
  minUserProperties: z.number().optional(),
  minConversationId: z.number().optional(),
  minProjectId: z.number().optional(),
  minIntegrationId: z.number().optional(),
  minUpdatedAt: z.number().optional(),
  minStatus: z.number().optional(),
  maxId: z.number().optional(),
  maxType: z.number().optional(),
  maxMessageId: z.number().optional(),
  maxCreatedAt: z.number().optional(),
  maxOrganizationId: z.number().optional(),
  maxReasons: z.number().optional(),
  maxProperties: z.number().optional(),
  maxUserProperties: z.number().optional(),
  maxConversationId: z.number().optional(),
  maxProjectId: z.number().optional(),
  maxIntegrationId: z.number().optional(),
  maxUpdatedAt: z.number().optional(),
  maxStatus: z.number().optional(),
  sumPropertiesUserId: z.number().optional(),
  sumPropertiesSupportAgentName: z.number().optional(),
  sumUserPropertiesUserId: z.number().optional(),
  sumUserPropertiesSupportAgentName: z.number().optional(),
  countPropertiesUserId: z.number().optional(),
  countPropertiesSupportAgentName: z.number().optional(),
  countUserPropertiesUserId: z.number().optional(),
  countUserPropertiesSupportAgentName: z.number().optional(),
  countDistinctPropertiesUserId: z.number().optional(),
  countDistinctPropertiesSupportAgentName: z.number().optional(),
  countDistinctUserPropertiesUserId: z.number().optional(),
  countDistinctUserPropertiesSupportAgentName: z.number().optional(),
  avgPropertiesUserId: z.number().optional(),
  avgPropertiesSupportAgentName: z.number().optional(),
  avgUserPropertiesUserId: z.number().optional(),
  avgUserPropertiesSupportAgentName: z.number().optional(),
  minPropertiesUserId: z.number().optional(),
  minPropertiesSupportAgentName: z.number().optional(),
  minUserPropertiesUserId: z.number().optional(),
  minUserPropertiesSupportAgentName: z.number().optional(),
  maxPropertiesUserId: z.number().optional(),
  maxPropertiesSupportAgentName: z.number().optional(),
  maxUserPropertiesUserId: z.number().optional(),
  maxUserPropertiesSupportAgentName: z.number().optional(),
  propertiesUserId: z.nullable(z.string()).optional(),
  propertiesSupportAgentName: z.nullable(z.string()).optional(),
  userPropertiesUserId: z.nullable(z.string()).optional(),
  userPropertiesSupportAgentName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    idHour: "id_hour",
    idDay: "id_day",
    idWeek: "id_week",
    idMonth: "id_month",
    typeHour: "type_hour",
    typeDay: "type_day",
    typeWeek: "type_week",
    typeMonth: "type_month",
    messageIdHour: "messageId_hour",
    messageIdDay: "messageId_day",
    messageIdWeek: "messageId_week",
    messageIdMonth: "messageId_month",
    createdAtHour: "createdAt_hour",
    createdAtDay: "createdAt_day",
    createdAtWeek: "createdAt_week",
    createdAtMonth: "createdAt_month",
    organizationIdHour: "organizationId_hour",
    organizationIdDay: "organizationId_day",
    organizationIdWeek: "organizationId_week",
    organizationIdMonth: "organizationId_month",
    reasonsHour: "reasons_hour",
    reasonsDay: "reasons_day",
    reasonsWeek: "reasons_week",
    reasonsMonth: "reasons_month",
    propertiesHour: "properties_hour",
    propertiesDay: "properties_day",
    propertiesWeek: "properties_week",
    propertiesMonth: "properties_month",
    userPropertiesHour: "userProperties_hour",
    userPropertiesDay: "userProperties_day",
    userPropertiesWeek: "userProperties_week",
    userPropertiesMonth: "userProperties_month",
    conversationIdHour: "conversationId_hour",
    conversationIdDay: "conversationId_day",
    conversationIdWeek: "conversationId_week",
    conversationIdMonth: "conversationId_month",
    projectIdHour: "projectId_hour",
    projectIdDay: "projectId_day",
    projectIdWeek: "projectId_week",
    projectIdMonth: "projectId_month",
    integrationIdHour: "integrationId_hour",
    integrationIdDay: "integrationId_day",
    integrationIdWeek: "integrationId_week",
    integrationIdMonth: "integrationId_month",
    updatedAtHour: "updatedAt_hour",
    updatedAtDay: "updatedAt_day",
    updatedAtWeek: "updatedAt_week",
    updatedAtMonth: "updatedAt_month",
    statusHour: "status_hour",
    statusDay: "status_day",
    statusWeek: "status_week",
    statusMonth: "status_month",
    sumId: "sum_id",
    sumType: "sum_type",
    sumMessageId: "sum_messageId",
    sumCreatedAt: "sum_createdAt",
    sumOrganizationId: "sum_organizationId",
    sumReasons: "sum_reasons",
    sumProperties: "sum_properties",
    sumUserProperties: "sum_userProperties",
    sumConversationId: "sum_conversationId",
    sumProjectId: "sum_projectId",
    sumIntegrationId: "sum_integrationId",
    sumUpdatedAt: "sum_updatedAt",
    sumStatus: "sum_status",
    countId: "count_id",
    countType: "count_type",
    countMessageId: "count_messageId",
    countCreatedAt: "count_createdAt",
    countOrganizationId: "count_organizationId",
    countReasons: "count_reasons",
    countProperties: "count_properties",
    countUserProperties: "count_userProperties",
    countConversationId: "count_conversationId",
    countProjectId: "count_projectId",
    countIntegrationId: "count_integrationId",
    countUpdatedAt: "count_updatedAt",
    countStatus: "count_status",
    avgId: "avg_id",
    avgType: "avg_type",
    avgMessageId: "avg_messageId",
    avgCreatedAt: "avg_createdAt",
    avgOrganizationId: "avg_organizationId",
    avgReasons: "avg_reasons",
    avgProperties: "avg_properties",
    avgUserProperties: "avg_userProperties",
    avgConversationId: "avg_conversationId",
    avgProjectId: "avg_projectId",
    avgIntegrationId: "avg_integrationId",
    avgUpdatedAt: "avg_updatedAt",
    avgStatus: "avg_status",
    minId: "min_id",
    minType: "min_type",
    minMessageId: "min_messageId",
    minCreatedAt: "min_createdAt",
    minOrganizationId: "min_organizationId",
    minReasons: "min_reasons",
    minProperties: "min_properties",
    minUserProperties: "min_userProperties",
    minConversationId: "min_conversationId",
    minProjectId: "min_projectId",
    minIntegrationId: "min_integrationId",
    minUpdatedAt: "min_updatedAt",
    minStatus: "min_status",
    maxId: "max_id",
    maxType: "max_type",
    maxMessageId: "max_messageId",
    maxCreatedAt: "max_createdAt",
    maxOrganizationId: "max_organizationId",
    maxReasons: "max_reasons",
    maxProperties: "max_properties",
    maxUserProperties: "max_userProperties",
    maxConversationId: "max_conversationId",
    maxProjectId: "max_projectId",
    maxIntegrationId: "max_integrationId",
    maxUpdatedAt: "max_updatedAt",
    maxStatus: "max_status",
    sumPropertiesUserId: "sum_properties.userId",
    sumPropertiesSupportAgentName: "sum_properties.supportAgentName",
    sumUserPropertiesUserId: "sum_userProperties.userId",
    sumUserPropertiesSupportAgentName: "sum_userProperties.supportAgentName",
    countPropertiesUserId: "count_properties.userId",
    countPropertiesSupportAgentName: "count_properties.supportAgentName",
    countUserPropertiesUserId: "count_userProperties.userId",
    countUserPropertiesSupportAgentName:
      "count_userProperties.supportAgentName",
    countDistinctPropertiesUserId: "countDistinct_properties.userId",
    countDistinctPropertiesSupportAgentName:
      "countDistinct_properties.supportAgentName",
    countDistinctUserPropertiesUserId: "countDistinct_userProperties.userId",
    countDistinctUserPropertiesSupportAgentName:
      "countDistinct_userProperties.supportAgentName",
    avgPropertiesUserId: "avg_properties.userId",
    avgPropertiesSupportAgentName: "avg_properties.supportAgentName",
    avgUserPropertiesUserId: "avg_userProperties.userId",
    avgUserPropertiesSupportAgentName: "avg_userProperties.supportAgentName",
    minPropertiesUserId: "min_properties.userId",
    minPropertiesSupportAgentName: "min_properties.supportAgentName",
    minUserPropertiesUserId: "min_userProperties.userId",
    minUserPropertiesSupportAgentName: "min_userProperties.supportAgentName",
    maxPropertiesUserId: "max_properties.userId",
    maxPropertiesSupportAgentName: "max_properties.supportAgentName",
    maxUserPropertiesUserId: "max_userProperties.userId",
    maxUserPropertiesSupportAgentName: "max_userProperties.supportAgentName",
    propertiesUserId: "properties.userId",
    propertiesSupportAgentName: "properties.supportAgentName",
    userPropertiesUserId: "userProperties.userId",
    userPropertiesSupportAgentName: "userProperties.supportAgentName",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackResultItem$ {
  /** @deprecated use `FeedbackResultItem$inboundSchema` instead. */
  export const inboundSchema = FeedbackResultItem$inboundSchema;
  /** @deprecated use `FeedbackResultItem$outboundSchema` instead. */
  export const outboundSchema = FeedbackResultItem$outboundSchema;
  /** @deprecated use `FeedbackResultItem$Outbound` instead. */
  export type Outbound = FeedbackResultItem$Outbound;
}

export function feedbackResultItemToJSON(
  feedbackResultItem: FeedbackResultItem,
): string {
  return JSON.stringify(
    FeedbackResultItem$outboundSchema.parse(feedbackResultItem),
  );
}

export function feedbackResultItemFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackResultItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackResultItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackResultItem' from JSON`,
  );
}

/** @internal */
export const QueryFeedbackResponseData$inboundSchema: z.ZodType<
  QueryFeedbackResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: z.array(z.lazy(() => FeedbackResultItem$inboundSchema)),
  total: z.number(),
  pageSize: z.number(),
  count: z.number(),
});

/** @internal */
export type QueryFeedbackResponseData$Outbound = {
  result: Array<FeedbackResultItem$Outbound>;
  total: number;
  pageSize: number;
  count: number;
};

/** @internal */
export const QueryFeedbackResponseData$outboundSchema: z.ZodType<
  QueryFeedbackResponseData$Outbound,
  z.ZodTypeDef,
  QueryFeedbackResponseData
> = z.object({
  result: z.array(z.lazy(() => FeedbackResultItem$outboundSchema)),
  total: z.number(),
  pageSize: z.number(),
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackResponseData$ {
  /** @deprecated use `QueryFeedbackResponseData$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackResponseData$inboundSchema;
  /** @deprecated use `QueryFeedbackResponseData$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackResponseData$outboundSchema;
  /** @deprecated use `QueryFeedbackResponseData$Outbound` instead. */
  export type Outbound = QueryFeedbackResponseData$Outbound;
}

export function queryFeedbackResponseDataToJSON(
  queryFeedbackResponseData: QueryFeedbackResponseData,
): string {
  return JSON.stringify(
    QueryFeedbackResponseData$outboundSchema.parse(queryFeedbackResponseData),
  );
}

export function queryFeedbackResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<QueryFeedbackResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryFeedbackResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryFeedbackResponseData' from JSON`,
  );
}
