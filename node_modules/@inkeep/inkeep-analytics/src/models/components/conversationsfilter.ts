/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsFilterAND,
  ConversationsFilterAND$inboundSchema,
  ConversationsFilterAND$Outbound,
  ConversationsFilterAND$outboundSchema,
} from "./conversationsfilterand.js";
import {
  ConversationsFilterCondition,
  ConversationsFilterCondition$inboundSchema,
  ConversationsFilterCondition$Outbound,
  ConversationsFilterCondition$outboundSchema,
} from "./conversationsfiltercondition.js";
import {
  ConversationsFilterOR,
  ConversationsFilterOR$inboundSchema,
  ConversationsFilterOR$Outbound,
  ConversationsFilterOR$outboundSchema,
} from "./conversationsfilteror.js";

export type ConversationsFilter =
  | ConversationsFilterCondition
  | ConversationsFilterAND
  | ConversationsFilterOR;

/** @internal */
export const ConversationsFilter$inboundSchema: z.ZodType<
  ConversationsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  ConversationsFilterCondition$inboundSchema,
  z.lazy(() => ConversationsFilterAND$inboundSchema),
  z.lazy(() => ConversationsFilterOR$inboundSchema),
]);

/** @internal */
export type ConversationsFilter$Outbound =
  | ConversationsFilterCondition$Outbound
  | ConversationsFilterAND$Outbound
  | ConversationsFilterOR$Outbound;

/** @internal */
export const ConversationsFilter$outboundSchema: z.ZodType<
  ConversationsFilter$Outbound,
  z.ZodTypeDef,
  ConversationsFilter
> = z.union([
  ConversationsFilterCondition$outboundSchema,
  z.lazy(() => ConversationsFilterAND$outboundSchema),
  z.lazy(() => ConversationsFilterOR$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter$ {
  /** @deprecated use `ConversationsFilter$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter$inboundSchema;
  /** @deprecated use `ConversationsFilter$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter$outboundSchema;
  /** @deprecated use `ConversationsFilter$Outbound` instead. */
  export type Outbound = ConversationsFilter$Outbound;
}

export function conversationsFilterToJSON(
  conversationsFilter: ConversationsFilter,
): string {
  return JSON.stringify(
    ConversationsFilter$outboundSchema.parse(conversationsFilter),
  );
}

export function conversationsFilterFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter' from JSON`,
  );
}
