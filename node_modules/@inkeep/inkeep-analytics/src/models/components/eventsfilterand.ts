/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsFilter,
  EventsFilter$inboundSchema,
  EventsFilter$Outbound,
  EventsFilter$outboundSchema,
} from "./eventsfilter.js";

export type EventsFilterANDAND = EventsFilter;

/**
 * EventsFilter AND operator
 */
export type EventsFilterAND = {
  /**
   * EventsFilter AND condition
   */
  and: Array<EventsFilter>;
};

/** @internal */
export const EventsFilterANDAND$inboundSchema: z.ZodType<
  EventsFilterANDAND,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => EventsFilter$inboundSchema);

/** @internal */
export type EventsFilterANDAND$Outbound = EventsFilter$Outbound;

/** @internal */
export const EventsFilterANDAND$outboundSchema: z.ZodType<
  EventsFilterANDAND$Outbound,
  z.ZodTypeDef,
  EventsFilterANDAND
> = z.lazy(() => EventsFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterANDAND$ {
  /** @deprecated use `EventsFilterANDAND$inboundSchema` instead. */
  export const inboundSchema = EventsFilterANDAND$inboundSchema;
  /** @deprecated use `EventsFilterANDAND$outboundSchema` instead. */
  export const outboundSchema = EventsFilterANDAND$outboundSchema;
  /** @deprecated use `EventsFilterANDAND$Outbound` instead. */
  export type Outbound = EventsFilterANDAND$Outbound;
}

export function eventsFilterANDANDToJSON(
  eventsFilterANDAND: EventsFilterANDAND,
): string {
  return JSON.stringify(
    EventsFilterANDAND$outboundSchema.parse(eventsFilterANDAND),
  );
}

export function eventsFilterANDANDFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterANDAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterANDAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterANDAND' from JSON`,
  );
}

/** @internal */
export const EventsFilterAND$inboundSchema: z.ZodType<
  EventsFilterAND,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(z.lazy(() => EventsFilter$inboundSchema)),
});

/** @internal */
export type EventsFilterAND$Outbound = {
  and: Array<EventsFilter$Outbound>;
};

/** @internal */
export const EventsFilterAND$outboundSchema: z.ZodType<
  EventsFilterAND$Outbound,
  z.ZodTypeDef,
  EventsFilterAND
> = z.object({
  and: z.array(z.lazy(() => EventsFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterAND$ {
  /** @deprecated use `EventsFilterAND$inboundSchema` instead. */
  export const inboundSchema = EventsFilterAND$inboundSchema;
  /** @deprecated use `EventsFilterAND$outboundSchema` instead. */
  export const outboundSchema = EventsFilterAND$outboundSchema;
  /** @deprecated use `EventsFilterAND$Outbound` instead. */
  export type Outbound = EventsFilterAND$Outbound;
}

export function eventsFilterANDToJSON(
  eventsFilterAND: EventsFilterAND,
): string {
  return JSON.stringify(EventsFilterAND$outboundSchema.parse(eventsFilterAND));
}

export function eventsFilterANDFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterAND' from JSON`,
  );
}
