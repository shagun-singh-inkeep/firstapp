/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenAIContentItem,
  OpenAIContentItem$inboundSchema,
  OpenAIContentItem$Outbound,
  OpenAIContentItem$outboundSchema,
} from "./openaicontentitem.js";
import {
  OpenAIToolCall,
  OpenAIToolCall$inboundSchema,
  OpenAIToolCall$Outbound,
  OpenAIToolCall$outboundSchema,
} from "./openaitoolcall.js";

export const OpenAIChatCompletionMessageRole = {
  System: "system",
  User: "user",
  Assistant: "assistant",
} as const;
export type OpenAIChatCompletionMessageRole = ClosedEnum<
  typeof OpenAIChatCompletionMessageRole
>;

export type OpenAIChatCompletionMessageContent =
  | string
  | Array<OpenAIContentItem>;

export type OpenAIChatCompletionMessage = {
  role: OpenAIChatCompletionMessageRole;
  name?: string | null | undefined;
  content: string | Array<OpenAIContentItem>;
  toolCalls?: Array<OpenAIToolCall> | null | undefined;
};

/** @internal */
export const OpenAIChatCompletionMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIChatCompletionMessageRole
> = z.nativeEnum(OpenAIChatCompletionMessageRole);

/** @internal */
export const OpenAIChatCompletionMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIChatCompletionMessageRole
> = OpenAIChatCompletionMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIChatCompletionMessageRole$ {
  /** @deprecated use `OpenAIChatCompletionMessageRole$inboundSchema` instead. */
  export const inboundSchema = OpenAIChatCompletionMessageRole$inboundSchema;
  /** @deprecated use `OpenAIChatCompletionMessageRole$outboundSchema` instead. */
  export const outboundSchema = OpenAIChatCompletionMessageRole$outboundSchema;
}

/** @internal */
export const OpenAIChatCompletionMessageContent$inboundSchema: z.ZodType<
  OpenAIChatCompletionMessageContent,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(OpenAIContentItem$inboundSchema)]);

/** @internal */
export type OpenAIChatCompletionMessageContent$Outbound =
  | string
  | Array<OpenAIContentItem$Outbound>;

/** @internal */
export const OpenAIChatCompletionMessageContent$outboundSchema: z.ZodType<
  OpenAIChatCompletionMessageContent$Outbound,
  z.ZodTypeDef,
  OpenAIChatCompletionMessageContent
> = z.union([z.string(), z.array(OpenAIContentItem$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIChatCompletionMessageContent$ {
  /** @deprecated use `OpenAIChatCompletionMessageContent$inboundSchema` instead. */
  export const inboundSchema = OpenAIChatCompletionMessageContent$inboundSchema;
  /** @deprecated use `OpenAIChatCompletionMessageContent$outboundSchema` instead. */
  export const outboundSchema =
    OpenAIChatCompletionMessageContent$outboundSchema;
  /** @deprecated use `OpenAIChatCompletionMessageContent$Outbound` instead. */
  export type Outbound = OpenAIChatCompletionMessageContent$Outbound;
}

export function openAIChatCompletionMessageContentToJSON(
  openAIChatCompletionMessageContent: OpenAIChatCompletionMessageContent,
): string {
  return JSON.stringify(
    OpenAIChatCompletionMessageContent$outboundSchema.parse(
      openAIChatCompletionMessageContent,
    ),
  );
}

export function openAIChatCompletionMessageContentFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIChatCompletionMessageContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenAIChatCompletionMessageContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIChatCompletionMessageContent' from JSON`,
  );
}

/** @internal */
export const OpenAIChatCompletionMessage$inboundSchema: z.ZodType<
  OpenAIChatCompletionMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: OpenAIChatCompletionMessageRole$inboundSchema,
  name: z.nullable(z.string()).optional(),
  content: z.union([z.string(), z.array(OpenAIContentItem$inboundSchema)]),
  tool_calls: z.nullable(z.array(OpenAIToolCall$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type OpenAIChatCompletionMessage$Outbound = {
  role: string;
  name?: string | null | undefined;
  content: string | Array<OpenAIContentItem$Outbound>;
  tool_calls?: Array<OpenAIToolCall$Outbound> | null | undefined;
};

/** @internal */
export const OpenAIChatCompletionMessage$outboundSchema: z.ZodType<
  OpenAIChatCompletionMessage$Outbound,
  z.ZodTypeDef,
  OpenAIChatCompletionMessage
> = z.object({
  role: OpenAIChatCompletionMessageRole$outboundSchema,
  name: z.nullable(z.string()).optional(),
  content: z.union([z.string(), z.array(OpenAIContentItem$outboundSchema)]),
  toolCalls: z.nullable(z.array(OpenAIToolCall$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIChatCompletionMessage$ {
  /** @deprecated use `OpenAIChatCompletionMessage$inboundSchema` instead. */
  export const inboundSchema = OpenAIChatCompletionMessage$inboundSchema;
  /** @deprecated use `OpenAIChatCompletionMessage$outboundSchema` instead. */
  export const outboundSchema = OpenAIChatCompletionMessage$outboundSchema;
  /** @deprecated use `OpenAIChatCompletionMessage$Outbound` instead. */
  export type Outbound = OpenAIChatCompletionMessage$Outbound;
}

export function openAIChatCompletionMessageToJSON(
  openAIChatCompletionMessage: OpenAIChatCompletionMessage,
): string {
  return JSON.stringify(
    OpenAIChatCompletionMessage$outboundSchema.parse(
      openAIChatCompletionMessage,
    ),
  );
}

export function openAIChatCompletionMessageFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIChatCompletionMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIChatCompletionMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIChatCompletionMessage' from JSON`,
  );
}
