/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SupportCopilotMessage,
  SupportCopilotMessage$inboundSchema,
  SupportCopilotMessage$Outbound,
  SupportCopilotMessage$outboundSchema,
} from "./supportcopilotmessage.js";

export const SupportCopilotConversationType = {
  SupportCopilot: "support_copilot",
} as const;
export type SupportCopilotConversationType = ClosedEnum<
  typeof SupportCopilotConversationType
>;

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type SupportCopilotConversationId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SupportCopilotConversationUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SupportCopilotConversationUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SupportCopilotConversationUserType = ClosedEnum<
  typeof SupportCopilotConversationUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type SupportCopilotConversationUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: SupportCopilotConversationUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const SupportCopilotConversationVisibility = {
  Private: "private",
  Public: "public",
} as const;
export type SupportCopilotConversationVisibility = ClosedEnum<
  typeof SupportCopilotConversationVisibility
>;

export type SupportCopilotConversation = {
  id: string;
  externalId: string | null;
  externalUrl: string | null;
  type: SupportCopilotConversationType;
  supportTicketConversationId: string | null;
  createdAt: string;
  updatedAt: string;
  projectId: string | null;
  integrationId: string | null;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: SupportCopilotConversationUserProperties | null | undefined;
  tags?: Array<string> | null | undefined;
  visibility: SupportCopilotConversationVisibility | null;
  /**
   * The messages in the conversation. Must be at least one message.
   */
  messages: Array<SupportCopilotMessage>;
};

/** @internal */
export const SupportCopilotConversationType$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotConversationType
> = z.nativeEnum(SupportCopilotConversationType);

/** @internal */
export const SupportCopilotConversationType$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotConversationType
> = SupportCopilotConversationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationType$ {
  /** @deprecated use `SupportCopilotConversationType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversationType$inboundSchema;
  /** @deprecated use `SupportCopilotConversationType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotConversationType$outboundSchema;
}

/** @internal */
export const SupportCopilotConversationId$inboundSchema: z.ZodType<
  SupportCopilotConversationId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SupportCopilotConversationId$Outbound = string | number;

/** @internal */
export const SupportCopilotConversationId$outboundSchema: z.ZodType<
  SupportCopilotConversationId$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversationId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationId$ {
  /** @deprecated use `SupportCopilotConversationId$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversationId$inboundSchema;
  /** @deprecated use `SupportCopilotConversationId$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotConversationId$outboundSchema;
  /** @deprecated use `SupportCopilotConversationId$Outbound` instead. */
  export type Outbound = SupportCopilotConversationId$Outbound;
}

export function supportCopilotConversationIdToJSON(
  supportCopilotConversationId: SupportCopilotConversationId,
): string {
  return JSON.stringify(
    SupportCopilotConversationId$outboundSchema.parse(
      supportCopilotConversationId,
    ),
  );
}

export function supportCopilotConversationIdFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotConversationId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotConversationId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotConversationId' from JSON`,
  );
}

/** @internal */
export const SupportCopilotConversationUserId$inboundSchema: z.ZodType<
  SupportCopilotConversationUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SupportCopilotConversationUserId$Outbound = string | number;

/** @internal */
export const SupportCopilotConversationUserId$outboundSchema: z.ZodType<
  SupportCopilotConversationUserId$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversationUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationUserId$ {
  /** @deprecated use `SupportCopilotConversationUserId$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversationUserId$inboundSchema;
  /** @deprecated use `SupportCopilotConversationUserId$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotConversationUserId$outboundSchema;
  /** @deprecated use `SupportCopilotConversationUserId$Outbound` instead. */
  export type Outbound = SupportCopilotConversationUserId$Outbound;
}

export function supportCopilotConversationUserIdToJSON(
  supportCopilotConversationUserId: SupportCopilotConversationUserId,
): string {
  return JSON.stringify(
    SupportCopilotConversationUserId$outboundSchema.parse(
      supportCopilotConversationUserId,
    ),
  );
}

export function supportCopilotConversationUserIdFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotConversationUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotConversationUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotConversationUserId' from JSON`,
  );
}

/** @internal */
export const SupportCopilotConversationUserType$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotConversationUserType
> = z.nativeEnum(SupportCopilotConversationUserType);

/** @internal */
export const SupportCopilotConversationUserType$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotConversationUserType
> = SupportCopilotConversationUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationUserType$ {
  /** @deprecated use `SupportCopilotConversationUserType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversationUserType$inboundSchema;
  /** @deprecated use `SupportCopilotConversationUserType$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotConversationUserType$outboundSchema;
}

/** @internal */
export const SupportCopilotConversationUserProperties$inboundSchema: z.ZodType<
  SupportCopilotConversationUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SupportCopilotConversationUserType$inboundSchema)
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type SupportCopilotConversationUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SupportCopilotConversationUserProperties$outboundSchema: z.ZodType<
  SupportCopilotConversationUserProperties$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversationUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(SupportCopilotConversationUserType$outboundSchema)
    .optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationUserProperties$ {
  /** @deprecated use `SupportCopilotConversationUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotConversationUserProperties$inboundSchema;
  /** @deprecated use `SupportCopilotConversationUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotConversationUserProperties$outboundSchema;
  /** @deprecated use `SupportCopilotConversationUserProperties$Outbound` instead. */
  export type Outbound = SupportCopilotConversationUserProperties$Outbound;
}

export function supportCopilotConversationUserPropertiesToJSON(
  supportCopilotConversationUserProperties:
    SupportCopilotConversationUserProperties,
): string {
  return JSON.stringify(
    SupportCopilotConversationUserProperties$outboundSchema.parse(
      supportCopilotConversationUserProperties,
    ),
  );
}

export function supportCopilotConversationUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  SupportCopilotConversationUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SupportCopilotConversationUserProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SupportCopilotConversationUserProperties' from JSON`,
  );
}

/** @internal */
export const SupportCopilotConversationVisibility$inboundSchema:
  z.ZodNativeEnum<typeof SupportCopilotConversationVisibility> = z.nativeEnum(
    SupportCopilotConversationVisibility,
  );

/** @internal */
export const SupportCopilotConversationVisibility$outboundSchema:
  z.ZodNativeEnum<typeof SupportCopilotConversationVisibility> =
    SupportCopilotConversationVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationVisibility$ {
  /** @deprecated use `SupportCopilotConversationVisibility$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotConversationVisibility$inboundSchema;
  /** @deprecated use `SupportCopilotConversationVisibility$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotConversationVisibility$outboundSchema;
}

/** @internal */
export const SupportCopilotConversation$inboundSchema: z.ZodType<
  SupportCopilotConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  type: SupportCopilotConversationType$inboundSchema,
  supportTicketConversationId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotConversationUserProperties$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(SupportCopilotConversationVisibility$inboundSchema),
  messages: z.array(SupportCopilotMessage$inboundSchema),
});

/** @internal */
export type SupportCopilotConversation$Outbound = {
  id: string;
  externalId: string | null;
  externalUrl: string | null;
  type: string;
  supportTicketConversationId: string | null;
  createdAt: string;
  updatedAt: string;
  projectId: string | null;
  integrationId: string | null;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | SupportCopilotConversationUserProperties$Outbound
    | null
    | undefined;
  tags?: Array<string> | null | undefined;
  visibility: string | null;
  messages: Array<SupportCopilotMessage$Outbound>;
};

/** @internal */
export const SupportCopilotConversation$outboundSchema: z.ZodType<
  SupportCopilotConversation$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversation
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  type: SupportCopilotConversationType$outboundSchema,
  supportTicketConversationId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotConversationUserProperties$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(SupportCopilotConversationVisibility$outboundSchema),
  messages: z.array(SupportCopilotMessage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversation$ {
  /** @deprecated use `SupportCopilotConversation$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversation$inboundSchema;
  /** @deprecated use `SupportCopilotConversation$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotConversation$outboundSchema;
  /** @deprecated use `SupportCopilotConversation$Outbound` instead. */
  export type Outbound = SupportCopilotConversation$Outbound;
}

export function supportCopilotConversationToJSON(
  supportCopilotConversation: SupportCopilotConversation,
): string {
  return JSON.stringify(
    SupportCopilotConversation$outboundSchema.parse(supportCopilotConversation),
  );
}

export function supportCopilotConversationFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotConversation' from JSON`,
  );
}
