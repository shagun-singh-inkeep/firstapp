/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TimeUnit,
  TimeUnit$inboundSchema,
  TimeUnit$outboundSchema,
} from "./timeunit.js";

export const ConversationsTimeBasedGroupBySelectionType = {
  Time: "time",
} as const;
export type ConversationsTimeBasedGroupBySelectionType = ClosedEnum<
  typeof ConversationsTimeBasedGroupBySelectionType
>;

export const ConversationsTimeBasedGroupBySelectionField = {
  Id: "id",
  UserMessageCount: "userMessageCount",
  OrganizationId: "organizationId",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  Type: "type",
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
export type ConversationsTimeBasedGroupBySelectionField = ClosedEnum<
  typeof ConversationsTimeBasedGroupBySelectionField
>;

export type ConversationsTimeBasedGroupBySelection = {
  type: ConversationsTimeBasedGroupBySelectionType;
  /**
   * Valid time units for time-based operations
   */
  timeUnit: TimeUnit;
  field?: ConversationsTimeBasedGroupBySelectionField | undefined;
};

/** @internal */
export const ConversationsTimeBasedGroupBySelectionType$inboundSchema:
  z.ZodNativeEnum<typeof ConversationsTimeBasedGroupBySelectionType> = z
    .nativeEnum(ConversationsTimeBasedGroupBySelectionType);

/** @internal */
export const ConversationsTimeBasedGroupBySelectionType$outboundSchema:
  z.ZodNativeEnum<typeof ConversationsTimeBasedGroupBySelectionType> =
    ConversationsTimeBasedGroupBySelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsTimeBasedGroupBySelectionType$ {
  /** @deprecated use `ConversationsTimeBasedGroupBySelectionType$inboundSchema` instead. */
  export const inboundSchema =
    ConversationsTimeBasedGroupBySelectionType$inboundSchema;
  /** @deprecated use `ConversationsTimeBasedGroupBySelectionType$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsTimeBasedGroupBySelectionType$outboundSchema;
}

/** @internal */
export const ConversationsTimeBasedGroupBySelectionField$inboundSchema:
  z.ZodNativeEnum<typeof ConversationsTimeBasedGroupBySelectionField> = z
    .nativeEnum(ConversationsTimeBasedGroupBySelectionField);

/** @internal */
export const ConversationsTimeBasedGroupBySelectionField$outboundSchema:
  z.ZodNativeEnum<typeof ConversationsTimeBasedGroupBySelectionField> =
    ConversationsTimeBasedGroupBySelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsTimeBasedGroupBySelectionField$ {
  /** @deprecated use `ConversationsTimeBasedGroupBySelectionField$inboundSchema` instead. */
  export const inboundSchema =
    ConversationsTimeBasedGroupBySelectionField$inboundSchema;
  /** @deprecated use `ConversationsTimeBasedGroupBySelectionField$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsTimeBasedGroupBySelectionField$outboundSchema;
}

/** @internal */
export const ConversationsTimeBasedGroupBySelection$inboundSchema: z.ZodType<
  ConversationsTimeBasedGroupBySelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ConversationsTimeBasedGroupBySelectionType$inboundSchema,
  timeUnit: TimeUnit$inboundSchema,
  field: ConversationsTimeBasedGroupBySelectionField$inboundSchema.optional(),
});

/** @internal */
export type ConversationsTimeBasedGroupBySelection$Outbound = {
  type: string;
  timeUnit: string;
  field?: string | undefined;
};

/** @internal */
export const ConversationsTimeBasedGroupBySelection$outboundSchema: z.ZodType<
  ConversationsTimeBasedGroupBySelection$Outbound,
  z.ZodTypeDef,
  ConversationsTimeBasedGroupBySelection
> = z.object({
  type: ConversationsTimeBasedGroupBySelectionType$outboundSchema,
  timeUnit: TimeUnit$outboundSchema,
  field: ConversationsTimeBasedGroupBySelectionField$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsTimeBasedGroupBySelection$ {
  /** @deprecated use `ConversationsTimeBasedGroupBySelection$inboundSchema` instead. */
  export const inboundSchema =
    ConversationsTimeBasedGroupBySelection$inboundSchema;
  /** @deprecated use `ConversationsTimeBasedGroupBySelection$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsTimeBasedGroupBySelection$outboundSchema;
  /** @deprecated use `ConversationsTimeBasedGroupBySelection$Outbound` instead. */
  export type Outbound = ConversationsTimeBasedGroupBySelection$Outbound;
}

export function conversationsTimeBasedGroupBySelectionToJSON(
  conversationsTimeBasedGroupBySelection:
    ConversationsTimeBasedGroupBySelection,
): string {
  return JSON.stringify(
    ConversationsTimeBasedGroupBySelection$outboundSchema.parse(
      conversationsTimeBasedGroupBySelection,
    ),
  );
}

export function conversationsTimeBasedGroupBySelectionFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsTimeBasedGroupBySelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ConversationsTimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsTimeBasedGroupBySelection' from JSON`,
  );
}
