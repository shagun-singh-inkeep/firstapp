/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FeedbackSimpleFieldSelectionType = {
  Field: "field",
} as const;
export type FeedbackSimpleFieldSelectionType = ClosedEnum<
  typeof FeedbackSimpleFieldSelectionType
>;

export const FeedbackSimpleFieldSelectionField = {
  Id: "id",
  Type: "type",
  MessageId: "messageId",
  CreatedAt: "createdAt",
  OrganizationId: "organizationId",
  Reasons: "reasons",
  Properties: "properties",
  UserProperties: "userProperties",
  ConversationId: "conversationId",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  UpdatedAt: "updatedAt",
  Status: "status",
} as const;
export type FeedbackSimpleFieldSelectionField = ClosedEnum<
  typeof FeedbackSimpleFieldSelectionField
>;

export type FeedbackSimpleFieldSelection = {
  type: FeedbackSimpleFieldSelectionType;
  field: FeedbackSimpleFieldSelectionField;
  path?: Array<string> | undefined;
};

/** @internal */
export const FeedbackSimpleFieldSelectionType$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackSimpleFieldSelectionType
> = z.nativeEnum(FeedbackSimpleFieldSelectionType);

/** @internal */
export const FeedbackSimpleFieldSelectionType$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackSimpleFieldSelectionType
> = FeedbackSimpleFieldSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackSimpleFieldSelectionType$ {
  /** @deprecated use `FeedbackSimpleFieldSelectionType$inboundSchema` instead. */
  export const inboundSchema = FeedbackSimpleFieldSelectionType$inboundSchema;
  /** @deprecated use `FeedbackSimpleFieldSelectionType$outboundSchema` instead. */
  export const outboundSchema = FeedbackSimpleFieldSelectionType$outboundSchema;
}

/** @internal */
export const FeedbackSimpleFieldSelectionField$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackSimpleFieldSelectionField
> = z.nativeEnum(FeedbackSimpleFieldSelectionField);

/** @internal */
export const FeedbackSimpleFieldSelectionField$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackSimpleFieldSelectionField
> = FeedbackSimpleFieldSelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackSimpleFieldSelectionField$ {
  /** @deprecated use `FeedbackSimpleFieldSelectionField$inboundSchema` instead. */
  export const inboundSchema = FeedbackSimpleFieldSelectionField$inboundSchema;
  /** @deprecated use `FeedbackSimpleFieldSelectionField$outboundSchema` instead. */
  export const outboundSchema =
    FeedbackSimpleFieldSelectionField$outboundSchema;
}

/** @internal */
export const FeedbackSimpleFieldSelection$inboundSchema: z.ZodType<
  FeedbackSimpleFieldSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FeedbackSimpleFieldSelectionType$inboundSchema,
  field: FeedbackSimpleFieldSelectionField$inboundSchema,
  path: z.array(z.string()).optional(),
});

/** @internal */
export type FeedbackSimpleFieldSelection$Outbound = {
  type: string;
  field: string;
  path?: Array<string> | undefined;
};

/** @internal */
export const FeedbackSimpleFieldSelection$outboundSchema: z.ZodType<
  FeedbackSimpleFieldSelection$Outbound,
  z.ZodTypeDef,
  FeedbackSimpleFieldSelection
> = z.object({
  type: FeedbackSimpleFieldSelectionType$outboundSchema,
  field: FeedbackSimpleFieldSelectionField$outboundSchema,
  path: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackSimpleFieldSelection$ {
  /** @deprecated use `FeedbackSimpleFieldSelection$inboundSchema` instead. */
  export const inboundSchema = FeedbackSimpleFieldSelection$inboundSchema;
  /** @deprecated use `FeedbackSimpleFieldSelection$outboundSchema` instead. */
  export const outboundSchema = FeedbackSimpleFieldSelection$outboundSchema;
  /** @deprecated use `FeedbackSimpleFieldSelection$Outbound` instead. */
  export type Outbound = FeedbackSimpleFieldSelection$Outbound;
}

export function feedbackSimpleFieldSelectionToJSON(
  feedbackSimpleFieldSelection: FeedbackSimpleFieldSelection,
): string {
  return JSON.stringify(
    FeedbackSimpleFieldSelection$outboundSchema.parse(
      feedbackSimpleFieldSelection,
    ),
  );
}

export function feedbackSimpleFieldSelectionFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackSimpleFieldSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackSimpleFieldSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackSimpleFieldSelection' from JSON`,
  );
}
