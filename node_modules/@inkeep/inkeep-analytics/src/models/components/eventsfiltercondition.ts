/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsField,
  EventsField$inboundSchema,
  EventsField$outboundSchema,
} from "./eventsfield.js";
import {
  FilterOperator,
  FilterOperator$inboundSchema,
  FilterOperator$outboundSchema,
} from "./filteroperator.js";

export type Value4 = string | number | boolean;

export type EventsFilterConditionValueValue =
  | string
  | number
  | boolean
  | Array<string | number | boolean | null>;

export type EventsFilterConditionValue7 = {
  path: Array<string>;
  value:
    | string
    | number
    | boolean
    | Array<string | number | boolean | null>
    | null;
};

export type EventsFilterConditionCondition = {
  /**
   * Available fields for Events
   */
  field: EventsField;
  /**
   * Available operators for filtering data
   */
  operator: FilterOperator;
  /**
   * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
   */
  value?: any | undefined;
};

export type EventsFilterCondition = {
  condition: EventsFilterConditionCondition;
};

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type Value4$Outbound = string | number | boolean;

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const EventsFilterConditionValueValue$inboundSchema: z.ZodType<
  EventsFilterConditionValueValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);

/** @internal */
export type EventsFilterConditionValueValue$Outbound =
  | string
  | number
  | boolean
  | Array<string | number | boolean | null>;

/** @internal */
export const EventsFilterConditionValueValue$outboundSchema: z.ZodType<
  EventsFilterConditionValueValue$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionValueValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionValueValue$ {
  /** @deprecated use `EventsFilterConditionValueValue$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionValueValue$inboundSchema;
  /** @deprecated use `EventsFilterConditionValueValue$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionValueValue$outboundSchema;
  /** @deprecated use `EventsFilterConditionValueValue$Outbound` instead. */
  export type Outbound = EventsFilterConditionValueValue$Outbound;
}

export function eventsFilterConditionValueValueToJSON(
  eventsFilterConditionValueValue: EventsFilterConditionValueValue,
): string {
  return JSON.stringify(
    EventsFilterConditionValueValue$outboundSchema.parse(
      eventsFilterConditionValueValue,
    ),
  );
}

export function eventsFilterConditionValueValueFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionValueValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionValueValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionValueValue' from JSON`,
  );
}

/** @internal */
export const EventsFilterConditionValue7$inboundSchema: z.ZodType<
  EventsFilterConditionValue7,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ]),
  ),
});

/** @internal */
export type EventsFilterConditionValue7$Outbound = {
  path: Array<string>;
  value:
    | string
    | number
    | boolean
    | Array<string | number | boolean | null>
    | null;
};

/** @internal */
export const EventsFilterConditionValue7$outboundSchema: z.ZodType<
  EventsFilterConditionValue7$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionValue7
> = z.object({
  path: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionValue7$ {
  /** @deprecated use `EventsFilterConditionValue7$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionValue7$inboundSchema;
  /** @deprecated use `EventsFilterConditionValue7$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionValue7$outboundSchema;
  /** @deprecated use `EventsFilterConditionValue7$Outbound` instead. */
  export type Outbound = EventsFilterConditionValue7$Outbound;
}

export function eventsFilterConditionValue7ToJSON(
  eventsFilterConditionValue7: EventsFilterConditionValue7,
): string {
  return JSON.stringify(
    EventsFilterConditionValue7$outboundSchema.parse(
      eventsFilterConditionValue7,
    ),
  );
}

export function eventsFilterConditionValue7FromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionValue7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionValue7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionValue7' from JSON`,
  );
}

/** @internal */
export const EventsFilterConditionCondition$inboundSchema: z.ZodType<
  EventsFilterConditionCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: EventsField$inboundSchema,
  operator: FilterOperator$inboundSchema,
  value: z.any().optional(),
});

/** @internal */
export type EventsFilterConditionCondition$Outbound = {
  field: string;
  operator: string;
  value?: any | undefined;
};

/** @internal */
export const EventsFilterConditionCondition$outboundSchema: z.ZodType<
  EventsFilterConditionCondition$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionCondition
> = z.object({
  field: EventsField$outboundSchema,
  operator: FilterOperator$outboundSchema,
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionCondition$ {
  /** @deprecated use `EventsFilterConditionCondition$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionCondition$inboundSchema;
  /** @deprecated use `EventsFilterConditionCondition$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionCondition$outboundSchema;
  /** @deprecated use `EventsFilterConditionCondition$Outbound` instead. */
  export type Outbound = EventsFilterConditionCondition$Outbound;
}

export function eventsFilterConditionConditionToJSON(
  eventsFilterConditionCondition: EventsFilterConditionCondition,
): string {
  return JSON.stringify(
    EventsFilterConditionCondition$outboundSchema.parse(
      eventsFilterConditionCondition,
    ),
  );
}

export function eventsFilterConditionConditionFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionCondition' from JSON`,
  );
}

/** @internal */
export const EventsFilterCondition$inboundSchema: z.ZodType<
  EventsFilterCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => EventsFilterConditionCondition$inboundSchema),
});

/** @internal */
export type EventsFilterCondition$Outbound = {
  condition: EventsFilterConditionCondition$Outbound;
};

/** @internal */
export const EventsFilterCondition$outboundSchema: z.ZodType<
  EventsFilterCondition$Outbound,
  z.ZodTypeDef,
  EventsFilterCondition
> = z.object({
  condition: z.lazy(() => EventsFilterConditionCondition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterCondition$ {
  /** @deprecated use `EventsFilterCondition$inboundSchema` instead. */
  export const inboundSchema = EventsFilterCondition$inboundSchema;
  /** @deprecated use `EventsFilterCondition$outboundSchema` instead. */
  export const outboundSchema = EventsFilterCondition$outboundSchema;
  /** @deprecated use `EventsFilterCondition$Outbound` instead. */
  export type Outbound = EventsFilterCondition$Outbound;
}

export function eventsFilterConditionToJSON(
  eventsFilterCondition: EventsFilterCondition,
): string {
  return JSON.stringify(
    EventsFilterCondition$outboundSchema.parse(eventsFilterCondition),
  );
}

export function eventsFilterConditionFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterCondition' from JSON`,
  );
}
