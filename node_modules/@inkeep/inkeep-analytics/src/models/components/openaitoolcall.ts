/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenAIToolCallFunction,
  OpenAIToolCallFunction$inboundSchema,
  OpenAIToolCallFunction$Outbound,
  OpenAIToolCallFunction$outboundSchema,
} from "./openaitoolcallfunction.js";

export const OpenAIToolCallType = {
  Function: "function",
} as const;
export type OpenAIToolCallType = ClosedEnum<typeof OpenAIToolCallType>;

export type OpenAIToolCall = {
  id: string;
  type: OpenAIToolCallType;
  function: OpenAIToolCallFunction;
};

/** @internal */
export const OpenAIToolCallType$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIToolCallType
> = z.nativeEnum(OpenAIToolCallType);

/** @internal */
export const OpenAIToolCallType$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIToolCallType
> = OpenAIToolCallType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIToolCallType$ {
  /** @deprecated use `OpenAIToolCallType$inboundSchema` instead. */
  export const inboundSchema = OpenAIToolCallType$inboundSchema;
  /** @deprecated use `OpenAIToolCallType$outboundSchema` instead. */
  export const outboundSchema = OpenAIToolCallType$outboundSchema;
}

/** @internal */
export const OpenAIToolCall$inboundSchema: z.ZodType<
  OpenAIToolCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: OpenAIToolCallType$inboundSchema,
  function: OpenAIToolCallFunction$inboundSchema,
});

/** @internal */
export type OpenAIToolCall$Outbound = {
  id: string;
  type: string;
  function: OpenAIToolCallFunction$Outbound;
};

/** @internal */
export const OpenAIToolCall$outboundSchema: z.ZodType<
  OpenAIToolCall$Outbound,
  z.ZodTypeDef,
  OpenAIToolCall
> = z.object({
  id: z.string(),
  type: OpenAIToolCallType$outboundSchema,
  function: OpenAIToolCallFunction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIToolCall$ {
  /** @deprecated use `OpenAIToolCall$inboundSchema` instead. */
  export const inboundSchema = OpenAIToolCall$inboundSchema;
  /** @deprecated use `OpenAIToolCall$outboundSchema` instead. */
  export const outboundSchema = OpenAIToolCall$outboundSchema;
  /** @deprecated use `OpenAIToolCall$Outbound` instead. */
  export type Outbound = OpenAIToolCall$Outbound;
}

export function openAIToolCallToJSON(openAIToolCall: OpenAIToolCall): string {
  return JSON.stringify(OpenAIToolCall$outboundSchema.parse(openAIToolCall));
}

export function openAIToolCallFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIToolCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIToolCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIToolCall' from JSON`,
  );
}
