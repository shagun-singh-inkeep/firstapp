/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackField,
  FeedbackField$inboundSchema,
  FeedbackField$outboundSchema,
} from "./feedbackfield.js";
import {
  FilterOperator,
  FilterOperator$inboundSchema,
  FilterOperator$outboundSchema,
} from "./filteroperator.js";

export type FeedbackFilterConditionValueValue4 = string | number | boolean;

export type FeedbackFilterConditionValueValue =
  | string
  | number
  | boolean
  | Array<string | number | boolean | null>;

export type FeedbackFilterConditionValue7 = {
  path: Array<string>;
  value:
    | string
    | number
    | boolean
    | Array<string | number | boolean | null>
    | null;
};

export type FeedbackFilterConditionCondition = {
  /**
   * Available fields for Feedback
   */
  field: FeedbackField;
  /**
   * Available operators for filtering data
   */
  operator: FilterOperator;
  /**
   * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
   */
  value?: any | undefined;
};

export type FeedbackFilterCondition = {
  condition: FeedbackFilterConditionCondition;
};

/** @internal */
export const FeedbackFilterConditionValueValue4$inboundSchema: z.ZodType<
  FeedbackFilterConditionValueValue4,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type FeedbackFilterConditionValueValue4$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const FeedbackFilterConditionValueValue4$outboundSchema: z.ZodType<
  FeedbackFilterConditionValueValue4$Outbound,
  z.ZodTypeDef,
  FeedbackFilterConditionValueValue4
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterConditionValueValue4$ {
  /** @deprecated use `FeedbackFilterConditionValueValue4$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterConditionValueValue4$inboundSchema;
  /** @deprecated use `FeedbackFilterConditionValueValue4$outboundSchema` instead. */
  export const outboundSchema =
    FeedbackFilterConditionValueValue4$outboundSchema;
  /** @deprecated use `FeedbackFilterConditionValueValue4$Outbound` instead. */
  export type Outbound = FeedbackFilterConditionValueValue4$Outbound;
}

export function feedbackFilterConditionValueValue4ToJSON(
  feedbackFilterConditionValueValue4: FeedbackFilterConditionValueValue4,
): string {
  return JSON.stringify(
    FeedbackFilterConditionValueValue4$outboundSchema.parse(
      feedbackFilterConditionValueValue4,
    ),
  );
}

export function feedbackFilterConditionValueValue4FromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterConditionValueValue4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FeedbackFilterConditionValueValue4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterConditionValueValue4' from JSON`,
  );
}

/** @internal */
export const FeedbackFilterConditionValueValue$inboundSchema: z.ZodType<
  FeedbackFilterConditionValueValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);

/** @internal */
export type FeedbackFilterConditionValueValue$Outbound =
  | string
  | number
  | boolean
  | Array<string | number | boolean | null>;

/** @internal */
export const FeedbackFilterConditionValueValue$outboundSchema: z.ZodType<
  FeedbackFilterConditionValueValue$Outbound,
  z.ZodTypeDef,
  FeedbackFilterConditionValueValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterConditionValueValue$ {
  /** @deprecated use `FeedbackFilterConditionValueValue$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterConditionValueValue$inboundSchema;
  /** @deprecated use `FeedbackFilterConditionValueValue$outboundSchema` instead. */
  export const outboundSchema =
    FeedbackFilterConditionValueValue$outboundSchema;
  /** @deprecated use `FeedbackFilterConditionValueValue$Outbound` instead. */
  export type Outbound = FeedbackFilterConditionValueValue$Outbound;
}

export function feedbackFilterConditionValueValueToJSON(
  feedbackFilterConditionValueValue: FeedbackFilterConditionValueValue,
): string {
  return JSON.stringify(
    FeedbackFilterConditionValueValue$outboundSchema.parse(
      feedbackFilterConditionValueValue,
    ),
  );
}

export function feedbackFilterConditionValueValueFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterConditionValueValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterConditionValueValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterConditionValueValue' from JSON`,
  );
}

/** @internal */
export const FeedbackFilterConditionValue7$inboundSchema: z.ZodType<
  FeedbackFilterConditionValue7,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ]),
  ),
});

/** @internal */
export type FeedbackFilterConditionValue7$Outbound = {
  path: Array<string>;
  value:
    | string
    | number
    | boolean
    | Array<string | number | boolean | null>
    | null;
};

/** @internal */
export const FeedbackFilterConditionValue7$outboundSchema: z.ZodType<
  FeedbackFilterConditionValue7$Outbound,
  z.ZodTypeDef,
  FeedbackFilterConditionValue7
> = z.object({
  path: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterConditionValue7$ {
  /** @deprecated use `FeedbackFilterConditionValue7$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterConditionValue7$inboundSchema;
  /** @deprecated use `FeedbackFilterConditionValue7$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterConditionValue7$outboundSchema;
  /** @deprecated use `FeedbackFilterConditionValue7$Outbound` instead. */
  export type Outbound = FeedbackFilterConditionValue7$Outbound;
}

export function feedbackFilterConditionValue7ToJSON(
  feedbackFilterConditionValue7: FeedbackFilterConditionValue7,
): string {
  return JSON.stringify(
    FeedbackFilterConditionValue7$outboundSchema.parse(
      feedbackFilterConditionValue7,
    ),
  );
}

export function feedbackFilterConditionValue7FromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterConditionValue7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterConditionValue7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterConditionValue7' from JSON`,
  );
}

/** @internal */
export const FeedbackFilterConditionCondition$inboundSchema: z.ZodType<
  FeedbackFilterConditionCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: FeedbackField$inboundSchema,
  operator: FilterOperator$inboundSchema,
  value: z.any().optional(),
});

/** @internal */
export type FeedbackFilterConditionCondition$Outbound = {
  field: string;
  operator: string;
  value?: any | undefined;
};

/** @internal */
export const FeedbackFilterConditionCondition$outboundSchema: z.ZodType<
  FeedbackFilterConditionCondition$Outbound,
  z.ZodTypeDef,
  FeedbackFilterConditionCondition
> = z.object({
  field: FeedbackField$outboundSchema,
  operator: FilterOperator$outboundSchema,
  value: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterConditionCondition$ {
  /** @deprecated use `FeedbackFilterConditionCondition$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterConditionCondition$inboundSchema;
  /** @deprecated use `FeedbackFilterConditionCondition$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterConditionCondition$outboundSchema;
  /** @deprecated use `FeedbackFilterConditionCondition$Outbound` instead. */
  export type Outbound = FeedbackFilterConditionCondition$Outbound;
}

export function feedbackFilterConditionConditionToJSON(
  feedbackFilterConditionCondition: FeedbackFilterConditionCondition,
): string {
  return JSON.stringify(
    FeedbackFilterConditionCondition$outboundSchema.parse(
      feedbackFilterConditionCondition,
    ),
  );
}

export function feedbackFilterConditionConditionFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterConditionCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterConditionCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterConditionCondition' from JSON`,
  );
}

/** @internal */
export const FeedbackFilterCondition$inboundSchema: z.ZodType<
  FeedbackFilterCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => FeedbackFilterConditionCondition$inboundSchema),
});

/** @internal */
export type FeedbackFilterCondition$Outbound = {
  condition: FeedbackFilterConditionCondition$Outbound;
};

/** @internal */
export const FeedbackFilterCondition$outboundSchema: z.ZodType<
  FeedbackFilterCondition$Outbound,
  z.ZodTypeDef,
  FeedbackFilterCondition
> = z.object({
  condition: z.lazy(() => FeedbackFilterConditionCondition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterCondition$ {
  /** @deprecated use `FeedbackFilterCondition$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterCondition$inboundSchema;
  /** @deprecated use `FeedbackFilterCondition$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterCondition$outboundSchema;
  /** @deprecated use `FeedbackFilterCondition$Outbound` instead. */
  export type Outbound = FeedbackFilterCondition$Outbound;
}

export function feedbackFilterConditionToJSON(
  feedbackFilterCondition: FeedbackFilterCondition,
): string {
  return JSON.stringify(
    FeedbackFilterCondition$outboundSchema.parse(feedbackFilterCondition),
  );
}

export function feedbackFilterConditionFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterCondition' from JSON`,
  );
}
