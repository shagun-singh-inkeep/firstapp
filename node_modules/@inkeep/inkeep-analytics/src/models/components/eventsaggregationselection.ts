/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EventsAggregationSelectionType = {
  Aggregation: "aggregation",
} as const;
export type EventsAggregationSelectionType = ClosedEnum<
  typeof EventsAggregationSelectionType
>;

export const EventsAggregationSelectionAggregation = {
  Sum: "sum",
  Count: "count",
  CountDistinct: "countDistinct",
  Avg: "avg",
  Min: "min",
  Max: "max",
} as const;
export type EventsAggregationSelectionAggregation = ClosedEnum<
  typeof EventsAggregationSelectionAggregation
>;

export const EventsAggregationSelectionField = {
  Id: "id",
  OrganizationId: "organizationId",
  MessageId: "messageId",
  ConversationId: "conversationId",
  CreatedAt: "createdAt",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  EventType: "eventType",
  Type: "type",
  SearchQuery: "searchQuery",
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
export type EventsAggregationSelectionField = ClosedEnum<
  typeof EventsAggregationSelectionField
>;

export type EventsAggregationSelection = {
  type: EventsAggregationSelectionType;
  aggregation: EventsAggregationSelectionAggregation;
  field?: EventsAggregationSelectionField | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const EventsAggregationSelectionType$inboundSchema: z.ZodNativeEnum<
  typeof EventsAggregationSelectionType
> = z.nativeEnum(EventsAggregationSelectionType);

/** @internal */
export const EventsAggregationSelectionType$outboundSchema: z.ZodNativeEnum<
  typeof EventsAggregationSelectionType
> = EventsAggregationSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsAggregationSelectionType$ {
  /** @deprecated use `EventsAggregationSelectionType$inboundSchema` instead. */
  export const inboundSchema = EventsAggregationSelectionType$inboundSchema;
  /** @deprecated use `EventsAggregationSelectionType$outboundSchema` instead. */
  export const outboundSchema = EventsAggregationSelectionType$outboundSchema;
}

/** @internal */
export const EventsAggregationSelectionAggregation$inboundSchema:
  z.ZodNativeEnum<typeof EventsAggregationSelectionAggregation> = z.nativeEnum(
    EventsAggregationSelectionAggregation,
  );

/** @internal */
export const EventsAggregationSelectionAggregation$outboundSchema:
  z.ZodNativeEnum<typeof EventsAggregationSelectionAggregation> =
    EventsAggregationSelectionAggregation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsAggregationSelectionAggregation$ {
  /** @deprecated use `EventsAggregationSelectionAggregation$inboundSchema` instead. */
  export const inboundSchema =
    EventsAggregationSelectionAggregation$inboundSchema;
  /** @deprecated use `EventsAggregationSelectionAggregation$outboundSchema` instead. */
  export const outboundSchema =
    EventsAggregationSelectionAggregation$outboundSchema;
}

/** @internal */
export const EventsAggregationSelectionField$inboundSchema: z.ZodNativeEnum<
  typeof EventsAggregationSelectionField
> = z.nativeEnum(EventsAggregationSelectionField);

/** @internal */
export const EventsAggregationSelectionField$outboundSchema: z.ZodNativeEnum<
  typeof EventsAggregationSelectionField
> = EventsAggregationSelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsAggregationSelectionField$ {
  /** @deprecated use `EventsAggregationSelectionField$inboundSchema` instead. */
  export const inboundSchema = EventsAggregationSelectionField$inboundSchema;
  /** @deprecated use `EventsAggregationSelectionField$outboundSchema` instead. */
  export const outboundSchema = EventsAggregationSelectionField$outboundSchema;
}

/** @internal */
export const EventsAggregationSelection$inboundSchema: z.ZodType<
  EventsAggregationSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: EventsAggregationSelectionType$inboundSchema,
  aggregation: EventsAggregationSelectionAggregation$inboundSchema,
  field: EventsAggregationSelectionField$inboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/** @internal */
export type EventsAggregationSelection$Outbound = {
  type: string;
  aggregation: string;
  field?: string | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const EventsAggregationSelection$outboundSchema: z.ZodType<
  EventsAggregationSelection$Outbound,
  z.ZodTypeDef,
  EventsAggregationSelection
> = z.object({
  type: EventsAggregationSelectionType$outboundSchema,
  aggregation: EventsAggregationSelectionAggregation$outboundSchema,
  field: EventsAggregationSelectionField$outboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsAggregationSelection$ {
  /** @deprecated use `EventsAggregationSelection$inboundSchema` instead. */
  export const inboundSchema = EventsAggregationSelection$inboundSchema;
  /** @deprecated use `EventsAggregationSelection$outboundSchema` instead. */
  export const outboundSchema = EventsAggregationSelection$outboundSchema;
  /** @deprecated use `EventsAggregationSelection$Outbound` instead. */
  export type Outbound = EventsAggregationSelection$Outbound;
}

export function eventsAggregationSelectionToJSON(
  eventsAggregationSelection: EventsAggregationSelection,
): string {
  return JSON.stringify(
    EventsAggregationSelection$outboundSchema.parse(eventsAggregationSelection),
  );
}

export function eventsAggregationSelectionFromJSON(
  jsonString: string,
): SafeParseResult<EventsAggregationSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsAggregationSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsAggregationSelection' from JSON`,
  );
}
