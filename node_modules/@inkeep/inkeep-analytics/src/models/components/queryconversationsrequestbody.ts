/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsFilter,
  ConversationsFilter$inboundSchema,
  ConversationsFilter$Outbound,
  ConversationsFilter$outboundSchema,
} from "./conversationsfilter.js";
import {
  ConversationsGroupBy,
  ConversationsGroupBy$inboundSchema,
  ConversationsGroupBy$Outbound,
  ConversationsGroupBy$outboundSchema,
} from "./conversationsgroupby.js";
import {
  ConversationsOrderBy,
  ConversationsOrderBy$inboundSchema,
  ConversationsOrderBy$Outbound,
  ConversationsOrderBy$outboundSchema,
} from "./conversationsorderby.js";
import {
  ConversationsSelection,
  ConversationsSelection$inboundSchema,
  ConversationsSelection$Outbound,
  ConversationsSelection$outboundSchema,
} from "./conversationsselection.js";

/**
 * Query Conversations Params
 */
export type QueryConversationsRequestBody = {
  select?: Array<ConversationsSelection> | undefined;
  groupBy?: Array<ConversationsGroupBy> | undefined;
  where?: ConversationsFilter | undefined;
  orderBy?: Array<ConversationsOrderBy> | undefined;
  /**
   * Notes are not persisted, but may be useful for your debugging purposes
   */
  notes?: string | undefined;
};

/** @internal */
export const QueryConversationsRequestBody$inboundSchema: z.ZodType<
  QueryConversationsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  select: z.array(ConversationsSelection$inboundSchema).optional(),
  groupBy: z.array(ConversationsGroupBy$inboundSchema).optional(),
  where: ConversationsFilter$inboundSchema.optional(),
  orderBy: z.array(ConversationsOrderBy$inboundSchema).optional(),
  notes: z.string().optional(),
});

/** @internal */
export type QueryConversationsRequestBody$Outbound = {
  select?: Array<ConversationsSelection$Outbound> | undefined;
  groupBy?: Array<ConversationsGroupBy$Outbound> | undefined;
  where?: ConversationsFilter$Outbound | undefined;
  orderBy?: Array<ConversationsOrderBy$Outbound> | undefined;
  notes?: string | undefined;
};

/** @internal */
export const QueryConversationsRequestBody$outboundSchema: z.ZodType<
  QueryConversationsRequestBody$Outbound,
  z.ZodTypeDef,
  QueryConversationsRequestBody
> = z.object({
  select: z.array(ConversationsSelection$outboundSchema).optional(),
  groupBy: z.array(ConversationsGroupBy$outboundSchema).optional(),
  where: ConversationsFilter$outboundSchema.optional(),
  orderBy: z.array(ConversationsOrderBy$outboundSchema).optional(),
  notes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryConversationsRequestBody$ {
  /** @deprecated use `QueryConversationsRequestBody$inboundSchema` instead. */
  export const inboundSchema = QueryConversationsRequestBody$inboundSchema;
  /** @deprecated use `QueryConversationsRequestBody$outboundSchema` instead. */
  export const outboundSchema = QueryConversationsRequestBody$outboundSchema;
  /** @deprecated use `QueryConversationsRequestBody$Outbound` instead. */
  export type Outbound = QueryConversationsRequestBody$Outbound;
}

export function queryConversationsRequestBodyToJSON(
  queryConversationsRequestBody: QueryConversationsRequestBody,
): string {
  return JSON.stringify(
    QueryConversationsRequestBody$outboundSchema.parse(
      queryConversationsRequestBody,
    ),
  );
}

export function queryConversationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<QueryConversationsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryConversationsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryConversationsRequestBody' from JSON`,
  );
}
