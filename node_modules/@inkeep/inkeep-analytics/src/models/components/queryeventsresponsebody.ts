/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  QueryEventsResponseData,
  QueryEventsResponseData$inboundSchema,
  QueryEventsResponseData$Outbound,
  QueryEventsResponseData$outboundSchema,
} from "./queryeventsresponsedata.js";

/**
 * Status of the response
 */
export const QueryEventsResponseBodyStatus = {
  Ok: "ok",
} as const;
/**
 * Status of the response
 */
export type QueryEventsResponseBodyStatus = ClosedEnum<
  typeof QueryEventsResponseBodyStatus
>;

/**
 * Response body for QueryEvents query endpoint
 */
export type QueryEventsResponseBody = {
  /**
   * Status of the response
   */
  status: QueryEventsResponseBodyStatus;
  /**
   * Data object containing QueryEvents query results and pagination information
   */
  data: QueryEventsResponseData;
};

/** @internal */
export const QueryEventsResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryEventsResponseBodyStatus
> = z.nativeEnum(QueryEventsResponseBodyStatus);

/** @internal */
export const QueryEventsResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryEventsResponseBodyStatus
> = QueryEventsResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryEventsResponseBodyStatus$ {
  /** @deprecated use `QueryEventsResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = QueryEventsResponseBodyStatus$inboundSchema;
  /** @deprecated use `QueryEventsResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = QueryEventsResponseBodyStatus$outboundSchema;
}

/** @internal */
export const QueryEventsResponseBody$inboundSchema: z.ZodType<
  QueryEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: QueryEventsResponseBodyStatus$inboundSchema,
  data: QueryEventsResponseData$inboundSchema,
});

/** @internal */
export type QueryEventsResponseBody$Outbound = {
  status: string;
  data: QueryEventsResponseData$Outbound;
};

/** @internal */
export const QueryEventsResponseBody$outboundSchema: z.ZodType<
  QueryEventsResponseBody$Outbound,
  z.ZodTypeDef,
  QueryEventsResponseBody
> = z.object({
  status: QueryEventsResponseBodyStatus$outboundSchema,
  data: QueryEventsResponseData$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryEventsResponseBody$ {
  /** @deprecated use `QueryEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = QueryEventsResponseBody$inboundSchema;
  /** @deprecated use `QueryEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = QueryEventsResponseBody$outboundSchema;
  /** @deprecated use `QueryEventsResponseBody$Outbound` instead. */
  export type Outbound = QueryEventsResponseBody$Outbound;
}

export function queryEventsResponseBodyToJSON(
  queryEventsResponseBody: QueryEventsResponseBody,
): string {
  return JSON.stringify(
    QueryEventsResponseBody$outboundSchema.parse(queryEventsResponseBody),
  );
}

export function queryEventsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<QueryEventsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryEventsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryEventsResponseBody' from JSON`,
  );
}
