/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Conversation,
  Conversation$inboundSchema,
  Conversation$Outbound,
  Conversation$outboundSchema,
} from "./conversation.js";
import {
  Message,
  Message$inboundSchema,
  Message$Outbound,
  Message$outboundSchema,
} from "./message.js";

export const GetAllFeedbackResponseType = {
  Positive: "positive",
  Negative: "negative",
} as const;
export type GetAllFeedbackResponseType = ClosedEnum<
  typeof GetAllFeedbackResponseType
>;

export type Reasons = {
  label: string;
  details: string;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type GetAllFeedbackResponseId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const GetAllFeedbackResponseUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseUserType = ClosedEnum<
  typeof GetAllFeedbackResponseUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type GetAllFeedbackResponseUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: GetAllFeedbackResponseUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export type PositiveFeedback = {
  id: string;
  type: GetAllFeedbackResponseType;
  messageId: string;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  reasons?: Array<Reasons> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: GetAllFeedbackResponseUserProperties | null | undefined;
  conversation: Conversation;
  message: Message;
};

export const GetAllFeedbackResponseNegativeFeedbackType = {
  Positive: "positive",
  Negative: "negative",
} as const;
export type GetAllFeedbackResponseNegativeFeedbackType = ClosedEnum<
  typeof GetAllFeedbackResponseNegativeFeedbackType
>;

export type GetAllFeedbackResponseReasons = {
  label: string;
  details: string;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type GetAllFeedbackResponseNegativeFeedbackId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseNegativeFeedbackUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const GetAllFeedbackResponseNegativeFeedbackUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetAllFeedbackResponseNegativeFeedbackUserType = ClosedEnum<
  typeof GetAllFeedbackResponseNegativeFeedbackUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type GetAllFeedbackResponseNegativeFeedbackUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: GetAllFeedbackResponseNegativeFeedbackUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export type NegativeFeedback = {
  id: string;
  type: GetAllFeedbackResponseNegativeFeedbackType;
  messageId: string;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  reasons?: Array<GetAllFeedbackResponseReasons> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?:
    | GetAllFeedbackResponseNegativeFeedbackUserProperties
    | null
    | undefined;
  conversation: Conversation;
  message: Message;
};

export type GetAllFeedbackResponse = {
  positiveFeedbackCount: number;
  negativeFeedbackCount: number;
  positiveFeedback: Array<PositiveFeedback>;
  negativeFeedback: Array<NegativeFeedback>;
};

/** @internal */
export const GetAllFeedbackResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllFeedbackResponseType
> = z.nativeEnum(GetAllFeedbackResponseType);

/** @internal */
export const GetAllFeedbackResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllFeedbackResponseType
> = GetAllFeedbackResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseType$ {
  /** @deprecated use `GetAllFeedbackResponseType$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackResponseType$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseType$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackResponseType$outboundSchema;
}

/** @internal */
export const Reasons$inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown> =
  z.object({
    label: z.string(),
    details: z.string(),
  });

/** @internal */
export type Reasons$Outbound = {
  label: string;
  details: string;
};

/** @internal */
export const Reasons$outboundSchema: z.ZodType<
  Reasons$Outbound,
  z.ZodTypeDef,
  Reasons
> = z.object({
  label: z.string(),
  details: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reasons$ {
  /** @deprecated use `Reasons$inboundSchema` instead. */
  export const inboundSchema = Reasons$inboundSchema;
  /** @deprecated use `Reasons$outboundSchema` instead. */
  export const outboundSchema = Reasons$outboundSchema;
  /** @deprecated use `Reasons$Outbound` instead. */
  export type Outbound = Reasons$Outbound;
}

export function reasonsToJSON(reasons: Reasons): string {
  return JSON.stringify(Reasons$outboundSchema.parse(reasons));
}

export function reasonsFromJSON(
  jsonString: string,
): SafeParseResult<Reasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reasons' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseId$inboundSchema: z.ZodType<
  GetAllFeedbackResponseId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllFeedbackResponseId$Outbound = string | number;

/** @internal */
export const GetAllFeedbackResponseId$outboundSchema: z.ZodType<
  GetAllFeedbackResponseId$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackResponseId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseId$ {
  /** @deprecated use `GetAllFeedbackResponseId$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackResponseId$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseId$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackResponseId$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseId$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponseId$Outbound;
}

export function getAllFeedbackResponseIdToJSON(
  getAllFeedbackResponseId: GetAllFeedbackResponseId,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseId$outboundSchema.parse(getAllFeedbackResponseId),
  );
}

export function getAllFeedbackResponseIdFromJSON(
  jsonString: string,
): SafeParseResult<GetAllFeedbackResponseId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllFeedbackResponseId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllFeedbackResponseId' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseUserId$inboundSchema: z.ZodType<
  GetAllFeedbackResponseUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllFeedbackResponseUserId$Outbound = string | number;

/** @internal */
export const GetAllFeedbackResponseUserId$outboundSchema: z.ZodType<
  GetAllFeedbackResponseUserId$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackResponseUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseUserId$ {
  /** @deprecated use `GetAllFeedbackResponseUserId$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackResponseUserId$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseUserId$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackResponseUserId$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseUserId$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponseUserId$Outbound;
}

export function getAllFeedbackResponseUserIdToJSON(
  getAllFeedbackResponseUserId: GetAllFeedbackResponseUserId,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseUserId$outboundSchema.parse(
      getAllFeedbackResponseUserId,
    ),
  );
}

export function getAllFeedbackResponseUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetAllFeedbackResponseUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllFeedbackResponseUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllFeedbackResponseUserId' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseUserType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllFeedbackResponseUserType
> = z.nativeEnum(GetAllFeedbackResponseUserType);

/** @internal */
export const GetAllFeedbackResponseUserType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllFeedbackResponseUserType
> = GetAllFeedbackResponseUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseUserType$ {
  /** @deprecated use `GetAllFeedbackResponseUserType$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackResponseUserType$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseUserType$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackResponseUserType$outboundSchema;
}

/** @internal */
export const GetAllFeedbackResponseUserProperties$inboundSchema: z.ZodType<
  GetAllFeedbackResponseUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(GetAllFeedbackResponseUserType$inboundSchema)
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type GetAllFeedbackResponseUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GetAllFeedbackResponseUserProperties$outboundSchema: z.ZodType<
  GetAllFeedbackResponseUserProperties$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackResponseUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(GetAllFeedbackResponseUserType$outboundSchema)
    .optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseUserProperties$ {
  /** @deprecated use `GetAllFeedbackResponseUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    GetAllFeedbackResponseUserProperties$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetAllFeedbackResponseUserProperties$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseUserProperties$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponseUserProperties$Outbound;
}

export function getAllFeedbackResponseUserPropertiesToJSON(
  getAllFeedbackResponseUserProperties: GetAllFeedbackResponseUserProperties,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseUserProperties$outboundSchema.parse(
      getAllFeedbackResponseUserProperties,
    ),
  );
}

export function getAllFeedbackResponseUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<GetAllFeedbackResponseUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllFeedbackResponseUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllFeedbackResponseUserProperties' from JSON`,
  );
}

/** @internal */
export const PositiveFeedback$inboundSchema: z.ZodType<
  PositiveFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: GetAllFeedbackResponseType$inboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reasons: z.nullable(z.array(z.lazy(() => Reasons$inboundSchema))).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => GetAllFeedbackResponseUserProperties$inboundSchema),
  ).optional(),
  conversation: Conversation$inboundSchema,
  message: Message$inboundSchema,
});

/** @internal */
export type PositiveFeedback$Outbound = {
  id: string;
  type: string;
  messageId: string;
  createdAt?: string | null | undefined;
  reasons?: Array<Reasons$Outbound> | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | GetAllFeedbackResponseUserProperties$Outbound
    | null
    | undefined;
  conversation: Conversation$Outbound;
  message: Message$Outbound;
};

/** @internal */
export const PositiveFeedback$outboundSchema: z.ZodType<
  PositiveFeedback$Outbound,
  z.ZodTypeDef,
  PositiveFeedback
> = z.object({
  id: z.string(),
  type: GetAllFeedbackResponseType$outboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reasons: z.nullable(z.array(z.lazy(() => Reasons$outboundSchema))).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => GetAllFeedbackResponseUserProperties$outboundSchema),
  ).optional(),
  conversation: Conversation$outboundSchema,
  message: Message$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PositiveFeedback$ {
  /** @deprecated use `PositiveFeedback$inboundSchema` instead. */
  export const inboundSchema = PositiveFeedback$inboundSchema;
  /** @deprecated use `PositiveFeedback$outboundSchema` instead. */
  export const outboundSchema = PositiveFeedback$outboundSchema;
  /** @deprecated use `PositiveFeedback$Outbound` instead. */
  export type Outbound = PositiveFeedback$Outbound;
}

export function positiveFeedbackToJSON(
  positiveFeedback: PositiveFeedback,
): string {
  return JSON.stringify(
    PositiveFeedback$outboundSchema.parse(positiveFeedback),
  );
}

export function positiveFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<PositiveFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PositiveFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PositiveFeedback' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackType> = z
    .nativeEnum(GetAllFeedbackResponseNegativeFeedbackType);

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackType> =
    GetAllFeedbackResponseNegativeFeedbackType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseNegativeFeedbackType$ {
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllFeedbackResponseNegativeFeedbackType$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllFeedbackResponseNegativeFeedbackType$outboundSchema;
}

/** @internal */
export const GetAllFeedbackResponseReasons$inboundSchema: z.ZodType<
  GetAllFeedbackResponseReasons,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  details: z.string(),
});

/** @internal */
export type GetAllFeedbackResponseReasons$Outbound = {
  label: string;
  details: string;
};

/** @internal */
export const GetAllFeedbackResponseReasons$outboundSchema: z.ZodType<
  GetAllFeedbackResponseReasons$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackResponseReasons
> = z.object({
  label: z.string(),
  details: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseReasons$ {
  /** @deprecated use `GetAllFeedbackResponseReasons$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackResponseReasons$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseReasons$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackResponseReasons$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseReasons$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponseReasons$Outbound;
}

export function getAllFeedbackResponseReasonsToJSON(
  getAllFeedbackResponseReasons: GetAllFeedbackResponseReasons,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseReasons$outboundSchema.parse(
      getAllFeedbackResponseReasons,
    ),
  );
}

export function getAllFeedbackResponseReasonsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllFeedbackResponseReasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllFeedbackResponseReasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllFeedbackResponseReasons' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackId$inboundSchema: z.ZodType<
  GetAllFeedbackResponseNegativeFeedbackId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllFeedbackResponseNegativeFeedbackId$Outbound = string | number;

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackId$outboundSchema: z.ZodType<
  GetAllFeedbackResponseNegativeFeedbackId$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackResponseNegativeFeedbackId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseNegativeFeedbackId$ {
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackId$inboundSchema` instead. */
  export const inboundSchema =
    GetAllFeedbackResponseNegativeFeedbackId$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackId$outboundSchema` instead. */
  export const outboundSchema =
    GetAllFeedbackResponseNegativeFeedbackId$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackId$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponseNegativeFeedbackId$Outbound;
}

export function getAllFeedbackResponseNegativeFeedbackIdToJSON(
  getAllFeedbackResponseNegativeFeedbackId:
    GetAllFeedbackResponseNegativeFeedbackId,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseNegativeFeedbackId$outboundSchema.parse(
      getAllFeedbackResponseNegativeFeedbackId,
    ),
  );
}

export function getAllFeedbackResponseNegativeFeedbackIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllFeedbackResponseNegativeFeedbackId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllFeedbackResponseNegativeFeedbackId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllFeedbackResponseNegativeFeedbackId' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackUserId$inboundSchema:
  z.ZodType<
    GetAllFeedbackResponseNegativeFeedbackUserId,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number()]);

/** @internal */
export type GetAllFeedbackResponseNegativeFeedbackUserId$Outbound =
  | string
  | number;

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackUserId$outboundSchema:
  z.ZodType<
    GetAllFeedbackResponseNegativeFeedbackUserId$Outbound,
    z.ZodTypeDef,
    GetAllFeedbackResponseNegativeFeedbackUserId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseNegativeFeedbackUserId$ {
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserId$inboundSchema` instead. */
  export const inboundSchema =
    GetAllFeedbackResponseNegativeFeedbackUserId$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserId$outboundSchema` instead. */
  export const outboundSchema =
    GetAllFeedbackResponseNegativeFeedbackUserId$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserId$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponseNegativeFeedbackUserId$Outbound;
}

export function getAllFeedbackResponseNegativeFeedbackUserIdToJSON(
  getAllFeedbackResponseNegativeFeedbackUserId:
    GetAllFeedbackResponseNegativeFeedbackUserId,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseNegativeFeedbackUserId$outboundSchema.parse(
      getAllFeedbackResponseNegativeFeedbackUserId,
    ),
  );
}

export function getAllFeedbackResponseNegativeFeedbackUserIdFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllFeedbackResponseNegativeFeedbackUserId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllFeedbackResponseNegativeFeedbackUserId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllFeedbackResponseNegativeFeedbackUserId' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackUserType> = z
    .nativeEnum(GetAllFeedbackResponseNegativeFeedbackUserType);

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackUserType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllFeedbackResponseNegativeFeedbackUserType> =
    GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseNegativeFeedbackUserType$ {
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllFeedbackResponseNegativeFeedbackUserType$outboundSchema;
}

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema:
  z.ZodType<
    GetAllFeedbackResponseNegativeFeedbackUserProperties,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      id: z.nullable(z.union([z.string(), z.number()])).optional(),
      identificationType: z.nullable(z.string()).optional(),
      userId: z.nullable(z.union([z.string(), z.number()])).optional(),
      supportAgentName: z.nullable(z.string()).optional(),
      userType: z.nullable(
        GetAllFeedbackResponseNegativeFeedbackUserType$inboundSchema,
      ).optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  );

/** @internal */
export type GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema:
  z.ZodType<
    GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound,
    z.ZodTypeDef,
    GetAllFeedbackResponseNegativeFeedbackUserProperties
  > = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(
      GetAllFeedbackResponseNegativeFeedbackUserType$outboundSchema,
    ).optional(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponseNegativeFeedbackUserProperties$ {
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound` instead. */
  export type Outbound =
    GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound;
}

export function getAllFeedbackResponseNegativeFeedbackUserPropertiesToJSON(
  getAllFeedbackResponseNegativeFeedbackUserProperties:
    GetAllFeedbackResponseNegativeFeedbackUserProperties,
): string {
  return JSON.stringify(
    GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema.parse(
      getAllFeedbackResponseNegativeFeedbackUserProperties,
    ),
  );
}

export function getAllFeedbackResponseNegativeFeedbackUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllFeedbackResponseNegativeFeedbackUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllFeedbackResponseNegativeFeedbackUserProperties' from JSON`,
  );
}

/** @internal */
export const NegativeFeedback$inboundSchema: z.ZodType<
  NegativeFeedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: GetAllFeedbackResponseNegativeFeedbackType$inboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reasons: z.nullable(
    z.array(z.lazy(() => GetAllFeedbackResponseReasons$inboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() =>
      GetAllFeedbackResponseNegativeFeedbackUserProperties$inboundSchema
    ),
  ).optional(),
  conversation: Conversation$inboundSchema,
  message: Message$inboundSchema,
});

/** @internal */
export type NegativeFeedback$Outbound = {
  id: string;
  type: string;
  messageId: string;
  createdAt?: string | null | undefined;
  reasons?: Array<GetAllFeedbackResponseReasons$Outbound> | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | GetAllFeedbackResponseNegativeFeedbackUserProperties$Outbound
    | null
    | undefined;
  conversation: Conversation$Outbound;
  message: Message$Outbound;
};

/** @internal */
export const NegativeFeedback$outboundSchema: z.ZodType<
  NegativeFeedback$Outbound,
  z.ZodTypeDef,
  NegativeFeedback
> = z.object({
  id: z.string(),
  type: GetAllFeedbackResponseNegativeFeedbackType$outboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reasons: z.nullable(
    z.array(z.lazy(() => GetAllFeedbackResponseReasons$outboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() =>
      GetAllFeedbackResponseNegativeFeedbackUserProperties$outboundSchema
    ),
  ).optional(),
  conversation: Conversation$outboundSchema,
  message: Message$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NegativeFeedback$ {
  /** @deprecated use `NegativeFeedback$inboundSchema` instead. */
  export const inboundSchema = NegativeFeedback$inboundSchema;
  /** @deprecated use `NegativeFeedback$outboundSchema` instead. */
  export const outboundSchema = NegativeFeedback$outboundSchema;
  /** @deprecated use `NegativeFeedback$Outbound` instead. */
  export type Outbound = NegativeFeedback$Outbound;
}

export function negativeFeedbackToJSON(
  negativeFeedback: NegativeFeedback,
): string {
  return JSON.stringify(
    NegativeFeedback$outboundSchema.parse(negativeFeedback),
  );
}

export function negativeFeedbackFromJSON(
  jsonString: string,
): SafeParseResult<NegativeFeedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NegativeFeedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NegativeFeedback' from JSON`,
  );
}

/** @internal */
export const GetAllFeedbackResponse$inboundSchema: z.ZodType<
  GetAllFeedbackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  positiveFeedbackCount: z.number(),
  negativeFeedbackCount: z.number(),
  positiveFeedback: z.array(z.lazy(() => PositiveFeedback$inboundSchema)),
  negativeFeedback: z.array(z.lazy(() => NegativeFeedback$inboundSchema)),
});

/** @internal */
export type GetAllFeedbackResponse$Outbound = {
  positiveFeedbackCount: number;
  negativeFeedbackCount: number;
  positiveFeedback: Array<PositiveFeedback$Outbound>;
  negativeFeedback: Array<NegativeFeedback$Outbound>;
};

/** @internal */
export const GetAllFeedbackResponse$outboundSchema: z.ZodType<
  GetAllFeedbackResponse$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackResponse
> = z.object({
  positiveFeedbackCount: z.number(),
  negativeFeedbackCount: z.number(),
  positiveFeedback: z.array(z.lazy(() => PositiveFeedback$outboundSchema)),
  negativeFeedback: z.array(z.lazy(() => NegativeFeedback$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackResponse$ {
  /** @deprecated use `GetAllFeedbackResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackResponse$inboundSchema;
  /** @deprecated use `GetAllFeedbackResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackResponse$outboundSchema;
  /** @deprecated use `GetAllFeedbackResponse$Outbound` instead. */
  export type Outbound = GetAllFeedbackResponse$Outbound;
}

export function getAllFeedbackResponseToJSON(
  getAllFeedbackResponse: GetAllFeedbackResponse,
): string {
  return JSON.stringify(
    GetAllFeedbackResponse$outboundSchema.parse(getAllFeedbackResponse),
  );
}

export function getAllFeedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllFeedbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllFeedbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllFeedbackResponse' from JSON`,
  );
}
