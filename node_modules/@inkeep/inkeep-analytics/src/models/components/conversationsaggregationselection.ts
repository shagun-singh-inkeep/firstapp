/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ConversationsAggregationSelectionType = {
  Aggregation: "aggregation",
} as const;
export type ConversationsAggregationSelectionType = ClosedEnum<
  typeof ConversationsAggregationSelectionType
>;

export const Aggregation = {
  Sum: "sum",
  Count: "count",
  CountDistinct: "countDistinct",
  Avg: "avg",
  Min: "min",
  Max: "max",
} as const;
export type Aggregation = ClosedEnum<typeof Aggregation>;

export const Field = {
  Id: "id",
  UserMessageCount: "userMessageCount",
  OrganizationId: "organizationId",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  Type: "type",
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
export type Field = ClosedEnum<typeof Field>;

export type ConversationsAggregationSelection = {
  type: ConversationsAggregationSelectionType;
  aggregation: Aggregation;
  field?: Field | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const ConversationsAggregationSelectionType$inboundSchema:
  z.ZodNativeEnum<typeof ConversationsAggregationSelectionType> = z.nativeEnum(
    ConversationsAggregationSelectionType,
  );

/** @internal */
export const ConversationsAggregationSelectionType$outboundSchema:
  z.ZodNativeEnum<typeof ConversationsAggregationSelectionType> =
    ConversationsAggregationSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsAggregationSelectionType$ {
  /** @deprecated use `ConversationsAggregationSelectionType$inboundSchema` instead. */
  export const inboundSchema =
    ConversationsAggregationSelectionType$inboundSchema;
  /** @deprecated use `ConversationsAggregationSelectionType$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsAggregationSelectionType$outboundSchema;
}

/** @internal */
export const Aggregation$inboundSchema: z.ZodNativeEnum<typeof Aggregation> = z
  .nativeEnum(Aggregation);

/** @internal */
export const Aggregation$outboundSchema: z.ZodNativeEnum<typeof Aggregation> =
  Aggregation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Aggregation$ {
  /** @deprecated use `Aggregation$inboundSchema` instead. */
  export const inboundSchema = Aggregation$inboundSchema;
  /** @deprecated use `Aggregation$outboundSchema` instead. */
  export const outboundSchema = Aggregation$outboundSchema;
}

/** @internal */
export const Field$inboundSchema: z.ZodNativeEnum<typeof Field> = z.nativeEnum(
  Field,
);

/** @internal */
export const Field$outboundSchema: z.ZodNativeEnum<typeof Field> =
  Field$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
  /** @deprecated use `Field$inboundSchema` instead. */
  export const inboundSchema = Field$inboundSchema;
  /** @deprecated use `Field$outboundSchema` instead. */
  export const outboundSchema = Field$outboundSchema;
}

/** @internal */
export const ConversationsAggregationSelection$inboundSchema: z.ZodType<
  ConversationsAggregationSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ConversationsAggregationSelectionType$inboundSchema,
  aggregation: Aggregation$inboundSchema,
  field: Field$inboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/** @internal */
export type ConversationsAggregationSelection$Outbound = {
  type: string;
  aggregation: string;
  field?: string | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const ConversationsAggregationSelection$outboundSchema: z.ZodType<
  ConversationsAggregationSelection$Outbound,
  z.ZodTypeDef,
  ConversationsAggregationSelection
> = z.object({
  type: ConversationsAggregationSelectionType$outboundSchema,
  aggregation: Aggregation$outboundSchema,
  field: Field$outboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsAggregationSelection$ {
  /** @deprecated use `ConversationsAggregationSelection$inboundSchema` instead. */
  export const inboundSchema = ConversationsAggregationSelection$inboundSchema;
  /** @deprecated use `ConversationsAggregationSelection$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsAggregationSelection$outboundSchema;
  /** @deprecated use `ConversationsAggregationSelection$Outbound` instead. */
  export type Outbound = ConversationsAggregationSelection$Outbound;
}

export function conversationsAggregationSelectionToJSON(
  conversationsAggregationSelection: ConversationsAggregationSelection,
): string {
  return JSON.stringify(
    ConversationsAggregationSelection$outboundSchema.parse(
      conversationsAggregationSelection,
    ),
  );
}

export function conversationsAggregationSelectionFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsAggregationSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsAggregationSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsAggregationSelection' from JSON`,
  );
}
