/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SemanticThreadAggregationSelectionType = {
  Aggregation: "aggregation",
} as const;
export type SemanticThreadAggregationSelectionType = ClosedEnum<
  typeof SemanticThreadAggregationSelectionType
>;

export const SemanticThreadAggregationSelectionAggregation = {
  Sum: "sum",
  Count: "count",
  CountDistinct: "countDistinct",
  Avg: "avg",
  Min: "min",
  Max: "max",
} as const;
export type SemanticThreadAggregationSelectionAggregation = ClosedEnum<
  typeof SemanticThreadAggregationSelectionAggregation
>;

export const SemanticThreadAggregationSelectionField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  Properties: "properties",
  UserProperties: "userProperties",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type SemanticThreadAggregationSelectionField = ClosedEnum<
  typeof SemanticThreadAggregationSelectionField
>;

export type SemanticThreadAggregationSelection = {
  type: SemanticThreadAggregationSelectionType;
  aggregation: SemanticThreadAggregationSelectionAggregation;
  field?: SemanticThreadAggregationSelectionField | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const SemanticThreadAggregationSelectionType$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadAggregationSelectionType> = z.nativeEnum(
    SemanticThreadAggregationSelectionType,
  );

/** @internal */
export const SemanticThreadAggregationSelectionType$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadAggregationSelectionType> =
    SemanticThreadAggregationSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadAggregationSelectionType$ {
  /** @deprecated use `SemanticThreadAggregationSelectionType$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadAggregationSelectionType$inboundSchema;
  /** @deprecated use `SemanticThreadAggregationSelectionType$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadAggregationSelectionType$outboundSchema;
}

/** @internal */
export const SemanticThreadAggregationSelectionAggregation$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadAggregationSelectionAggregation> = z
    .nativeEnum(SemanticThreadAggregationSelectionAggregation);

/** @internal */
export const SemanticThreadAggregationSelectionAggregation$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadAggregationSelectionAggregation> =
    SemanticThreadAggregationSelectionAggregation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadAggregationSelectionAggregation$ {
  /** @deprecated use `SemanticThreadAggregationSelectionAggregation$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadAggregationSelectionAggregation$inboundSchema;
  /** @deprecated use `SemanticThreadAggregationSelectionAggregation$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadAggregationSelectionAggregation$outboundSchema;
}

/** @internal */
export const SemanticThreadAggregationSelectionField$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadAggregationSelectionField> = z
    .nativeEnum(SemanticThreadAggregationSelectionField);

/** @internal */
export const SemanticThreadAggregationSelectionField$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadAggregationSelectionField> =
    SemanticThreadAggregationSelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadAggregationSelectionField$ {
  /** @deprecated use `SemanticThreadAggregationSelectionField$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadAggregationSelectionField$inboundSchema;
  /** @deprecated use `SemanticThreadAggregationSelectionField$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadAggregationSelectionField$outboundSchema;
}

/** @internal */
export const SemanticThreadAggregationSelection$inboundSchema: z.ZodType<
  SemanticThreadAggregationSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SemanticThreadAggregationSelectionType$inboundSchema,
  aggregation: SemanticThreadAggregationSelectionAggregation$inboundSchema,
  field: SemanticThreadAggregationSelectionField$inboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/** @internal */
export type SemanticThreadAggregationSelection$Outbound = {
  type: string;
  aggregation: string;
  field?: string | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const SemanticThreadAggregationSelection$outboundSchema: z.ZodType<
  SemanticThreadAggregationSelection$Outbound,
  z.ZodTypeDef,
  SemanticThreadAggregationSelection
> = z.object({
  type: SemanticThreadAggregationSelectionType$outboundSchema,
  aggregation: SemanticThreadAggregationSelectionAggregation$outboundSchema,
  field: SemanticThreadAggregationSelectionField$outboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadAggregationSelection$ {
  /** @deprecated use `SemanticThreadAggregationSelection$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadAggregationSelection$inboundSchema;
  /** @deprecated use `SemanticThreadAggregationSelection$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadAggregationSelection$outboundSchema;
  /** @deprecated use `SemanticThreadAggregationSelection$Outbound` instead. */
  export type Outbound = SemanticThreadAggregationSelection$Outbound;
}

export function semanticThreadAggregationSelectionToJSON(
  semanticThreadAggregationSelection: SemanticThreadAggregationSelection,
): string {
  return JSON.stringify(
    SemanticThreadAggregationSelection$outboundSchema.parse(
      semanticThreadAggregationSelection,
    ),
  );
}

export function semanticThreadAggregationSelectionFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadAggregationSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SemanticThreadAggregationSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadAggregationSelection' from JSON`,
  );
}
