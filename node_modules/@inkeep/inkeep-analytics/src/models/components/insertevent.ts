/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsertConversationEvent,
  InsertConversationEvent$inboundSchema,
  InsertConversationEvent$Outbound,
  InsertConversationEvent$outboundSchema,
} from "./insertconversationevent.js";
import {
  InsertMessageEvent,
  InsertMessageEvent$inboundSchema,
  InsertMessageEvent$Outbound,
  InsertMessageEvent$outboundSchema,
} from "./insertmessageevent.js";
import {
  InsertSearchEvent,
  InsertSearchEvent$inboundSchema,
  InsertSearchEvent$Outbound,
  InsertSearchEvent$outboundSchema,
} from "./insertsearchevent.js";

export type InsertEvent =
  | (InsertMessageEvent & { entityType: "message" })
  | (InsertConversationEvent & { entityType: "conversation" })
  | (InsertSearchEvent & { entityType: "search" });

/** @internal */
export const InsertEvent$inboundSchema: z.ZodType<
  InsertEvent,
  z.ZodTypeDef,
  unknown
> = z.union([
  InsertMessageEvent$inboundSchema.and(
    z.object({ entityType: z.literal("message") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  InsertConversationEvent$inboundSchema.and(
    z.object({ entityType: z.literal("conversation") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  InsertSearchEvent$inboundSchema.and(
    z.object({ entityType: z.literal("search") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
]);

/** @internal */
export type InsertEvent$Outbound =
  | (InsertMessageEvent$Outbound & { entityType: "message" })
  | (InsertConversationEvent$Outbound & { entityType: "conversation" })
  | (InsertSearchEvent$Outbound & { entityType: "search" });

/** @internal */
export const InsertEvent$outboundSchema: z.ZodType<
  InsertEvent$Outbound,
  z.ZodTypeDef,
  InsertEvent
> = z.union([
  InsertMessageEvent$outboundSchema.and(
    z.object({ entityType: z.literal("message") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  InsertConversationEvent$outboundSchema.and(
    z.object({ entityType: z.literal("conversation") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  InsertSearchEvent$outboundSchema.and(
    z.object({ entityType: z.literal("search") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertEvent$ {
  /** @deprecated use `InsertEvent$inboundSchema` instead. */
  export const inboundSchema = InsertEvent$inboundSchema;
  /** @deprecated use `InsertEvent$outboundSchema` instead. */
  export const outboundSchema = InsertEvent$outboundSchema;
  /** @deprecated use `InsertEvent$Outbound` instead. */
  export type Outbound = InsertEvent$Outbound;
}

export function insertEventToJSON(insertEvent: InsertEvent): string {
  return JSON.stringify(InsertEvent$outboundSchema.parse(insertEvent));
}

export function insertEventFromJSON(
  jsonString: string,
): SafeParseResult<InsertEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsertEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsertEvent' from JSON`,
  );
}
