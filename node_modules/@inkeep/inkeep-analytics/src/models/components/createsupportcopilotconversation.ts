/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateSupportCopilotConversationType = {
  SupportCopilot: "support_copilot",
} as const;
export type CreateSupportCopilotConversationType = ClosedEnum<
  typeof CreateSupportCopilotConversationType
>;

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type CreateSupportCopilotConversationId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const CreateSupportCopilotConversationUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationUserType = ClosedEnum<
  typeof CreateSupportCopilotConversationUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type CreateSupportCopilotConversationUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: CreateSupportCopilotConversationUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const CreateSupportCopilotConversationVisibility = {
  Private: "private",
  Public: "public",
} as const;
export type CreateSupportCopilotConversationVisibility = ClosedEnum<
  typeof CreateSupportCopilotConversationVisibility
>;

export const CreateSupportCopilotConversationType1 = {
  Documentation: "documentation",
  Site: "site",
  DiscoursePost: "discourse_post",
  GithubIssue: "github_issue",
  GithubDiscussion: "github_discussion",
  StackoverflowQuestion: "stackoverflow_question",
  DiscordForumPost: "discord_forum_post",
  DiscordMessage: "discord_message",
  CustomQuestionAnswer: "custom_question_answer",
} as const;
export type CreateSupportCopilotConversationType1 = ClosedEnum<
  typeof CreateSupportCopilotConversationType1
>;

export type CreateSupportCopilotConversationMessagesType =
  | CreateSupportCopilotConversationType1
  | string;

export type CreateSupportCopilotConversationLinks = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: CreateSupportCopilotConversationType1 | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type CreateSupportCopilotConversationMessagesId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationMessagesUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const CreateSupportCopilotConversationMessagesUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type CreateSupportCopilotConversationMessagesUserType = ClosedEnum<
  typeof CreateSupportCopilotConversationMessagesUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type CreateSupportCopilotConversationMessagesUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?:
    | CreateSupportCopilotConversationMessagesUserType
    | null
    | undefined;
  additionalProperties?: { [k: string]: any };
};

export type CreateSupportCopilotConversationMessages = {
  id?: string | undefined;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  updatedAt?: Date | null | undefined;
  role: string;
  content?: string | null | undefined;
  name?: string | null | undefined;
  links?: Array<CreateSupportCopilotConversationLinks> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?:
    | CreateSupportCopilotConversationMessagesUserProperties
    | null
    | undefined;
};

export type CreateSupportCopilotConversation = {
  id?: string | undefined;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  type: CreateSupportCopilotConversationType;
  supportTicketConversationId?: string | null | undefined;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  updatedAt?: Date | null | undefined;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?:
    | CreateSupportCopilotConversationUserProperties
    | null
    | undefined;
  tags?: Array<string> | null | undefined;
  visibility?: CreateSupportCopilotConversationVisibility | null | undefined;
  messages: Array<CreateSupportCopilotConversationMessages>;
};

/** @internal */
export const CreateSupportCopilotConversationType$inboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationType> = z.nativeEnum(
    CreateSupportCopilotConversationType,
  );

/** @internal */
export const CreateSupportCopilotConversationType$outboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationType> =
    CreateSupportCopilotConversationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationType$ {
  /** @deprecated use `CreateSupportCopilotConversationType$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationType$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationType$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationType$outboundSchema;
}

/** @internal */
export const CreateSupportCopilotConversationId$inboundSchema: z.ZodType<
  CreateSupportCopilotConversationId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CreateSupportCopilotConversationId$Outbound = string | number;

/** @internal */
export const CreateSupportCopilotConversationId$outboundSchema: z.ZodType<
  CreateSupportCopilotConversationId$Outbound,
  z.ZodTypeDef,
  CreateSupportCopilotConversationId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationId$ {
  /** @deprecated use `CreateSupportCopilotConversationId$inboundSchema` instead. */
  export const inboundSchema = CreateSupportCopilotConversationId$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationId$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationId$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationId$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversationId$Outbound;
}

export function createSupportCopilotConversationIdToJSON(
  createSupportCopilotConversationId: CreateSupportCopilotConversationId,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationId$outboundSchema.parse(
      createSupportCopilotConversationId,
    ),
  );
}

export function createSupportCopilotConversationIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateSupportCopilotConversationId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSupportCopilotConversationId' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationUserId$inboundSchema: z.ZodType<
  CreateSupportCopilotConversationUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CreateSupportCopilotConversationUserId$Outbound = string | number;

/** @internal */
export const CreateSupportCopilotConversationUserId$outboundSchema: z.ZodType<
  CreateSupportCopilotConversationUserId$Outbound,
  z.ZodTypeDef,
  CreateSupportCopilotConversationUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationUserId$ {
  /** @deprecated use `CreateSupportCopilotConversationUserId$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationUserId$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationUserId$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationUserId$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationUserId$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversationUserId$Outbound;
}

export function createSupportCopilotConversationUserIdToJSON(
  createSupportCopilotConversationUserId:
    CreateSupportCopilotConversationUserId,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationUserId$outboundSchema.parse(
      createSupportCopilotConversationUserId,
    ),
  );
}

export function createSupportCopilotConversationUserIdFromJSON(
  jsonString: string,
): SafeParseResult<CreateSupportCopilotConversationUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSupportCopilotConversationUserId' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationUserType$inboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationUserType> = z
    .nativeEnum(CreateSupportCopilotConversationUserType);

/** @internal */
export const CreateSupportCopilotConversationUserType$outboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationUserType> =
    CreateSupportCopilotConversationUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationUserType$ {
  /** @deprecated use `CreateSupportCopilotConversationUserType$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationUserType$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationUserType$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationUserType$outboundSchema;
}

/** @internal */
export const CreateSupportCopilotConversationUserProperties$inboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationUserProperties,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      id: z.nullable(z.union([z.string(), z.number()])).optional(),
      identificationType: z.nullable(z.string()).optional(),
      userId: z.nullable(z.union([z.string(), z.number()])).optional(),
      supportAgentName: z.nullable(z.string()).optional(),
      userType: z.nullable(
        CreateSupportCopilotConversationUserType$inboundSchema,
      ).optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  );

/** @internal */
export type CreateSupportCopilotConversationUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const CreateSupportCopilotConversationUserProperties$outboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationUserProperties$Outbound,
    z.ZodTypeDef,
    CreateSupportCopilotConversationUserProperties
  > = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(
      CreateSupportCopilotConversationUserType$outboundSchema,
    ).optional(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationUserProperties$ {
  /** @deprecated use `CreateSupportCopilotConversationUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationUserProperties$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationUserProperties$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationUserProperties$Outbound` instead. */
  export type Outbound =
    CreateSupportCopilotConversationUserProperties$Outbound;
}

export function createSupportCopilotConversationUserPropertiesToJSON(
  createSupportCopilotConversationUserProperties:
    CreateSupportCopilotConversationUserProperties,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationUserProperties$outboundSchema.parse(
      createSupportCopilotConversationUserProperties,
    ),
  );
}

export function createSupportCopilotConversationUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSupportCopilotConversationUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationUserProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSupportCopilotConversationUserProperties' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationVisibility$inboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationVisibility> = z
    .nativeEnum(CreateSupportCopilotConversationVisibility);

/** @internal */
export const CreateSupportCopilotConversationVisibility$outboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationVisibility> =
    CreateSupportCopilotConversationVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationVisibility$ {
  /** @deprecated use `CreateSupportCopilotConversationVisibility$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationVisibility$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationVisibility$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationVisibility$outboundSchema;
}

/** @internal */
export const CreateSupportCopilotConversationType1$inboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationType1> = z.nativeEnum(
    CreateSupportCopilotConversationType1,
  );

/** @internal */
export const CreateSupportCopilotConversationType1$outboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationType1> =
    CreateSupportCopilotConversationType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationType1$ {
  /** @deprecated use `CreateSupportCopilotConversationType1$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationType1$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationType1$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationType1$outboundSchema;
}

/** @internal */
export const CreateSupportCopilotConversationMessagesType$inboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesType,
    z.ZodTypeDef,
    unknown
  > = z.union([
    CreateSupportCopilotConversationType1$inboundSchema,
    z.string(),
  ]);

/** @internal */
export type CreateSupportCopilotConversationMessagesType$Outbound =
  | string
  | string;

/** @internal */
export const CreateSupportCopilotConversationMessagesType$outboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesType$Outbound,
    z.ZodTypeDef,
    CreateSupportCopilotConversationMessagesType
  > = z.union([
    CreateSupportCopilotConversationType1$outboundSchema,
    z.string(),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationMessagesType$ {
  /** @deprecated use `CreateSupportCopilotConversationMessagesType$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationMessagesType$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesType$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationMessagesType$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesType$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversationMessagesType$Outbound;
}

export function createSupportCopilotConversationMessagesTypeToJSON(
  createSupportCopilotConversationMessagesType:
    CreateSupportCopilotConversationMessagesType,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationMessagesType$outboundSchema.parse(
      createSupportCopilotConversationMessagesType,
    ),
  );
}

export function createSupportCopilotConversationMessagesTypeFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSupportCopilotConversationMessagesType,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationMessagesType$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSupportCopilotConversationMessagesType' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationLinks$inboundSchema: z.ZodType<
  CreateSupportCopilotConversationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([CreateSupportCopilotConversationType1$inboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type CreateSupportCopilotConversationLinks$Outbound = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

/** @internal */
export const CreateSupportCopilotConversationLinks$outboundSchema: z.ZodType<
  CreateSupportCopilotConversationLinks$Outbound,
  z.ZodTypeDef,
  CreateSupportCopilotConversationLinks
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([CreateSupportCopilotConversationType1$outboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationLinks$ {
  /** @deprecated use `CreateSupportCopilotConversationLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationLinks$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationLinks$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationLinks$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversationLinks$Outbound;
}

export function createSupportCopilotConversationLinksToJSON(
  createSupportCopilotConversationLinks: CreateSupportCopilotConversationLinks,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationLinks$outboundSchema.parse(
      createSupportCopilotConversationLinks,
    ),
  );
}

export function createSupportCopilotConversationLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateSupportCopilotConversationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSupportCopilotConversationLinks' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationMessagesId$inboundSchema:
  z.ZodType<CreateSupportCopilotConversationMessagesId, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.number()]);

/** @internal */
export type CreateSupportCopilotConversationMessagesId$Outbound =
  | string
  | number;

/** @internal */
export const CreateSupportCopilotConversationMessagesId$outboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesId$Outbound,
    z.ZodTypeDef,
    CreateSupportCopilotConversationMessagesId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationMessagesId$ {
  /** @deprecated use `CreateSupportCopilotConversationMessagesId$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationMessagesId$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesId$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationMessagesId$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesId$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversationMessagesId$Outbound;
}

export function createSupportCopilotConversationMessagesIdToJSON(
  createSupportCopilotConversationMessagesId:
    CreateSupportCopilotConversationMessagesId,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationMessagesId$outboundSchema.parse(
      createSupportCopilotConversationMessagesId,
    ),
  );
}

export function createSupportCopilotConversationMessagesIdFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSupportCopilotConversationMessagesId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationMessagesId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSupportCopilotConversationMessagesId' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationMessagesUserId$inboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesUserId,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.number()]);

/** @internal */
export type CreateSupportCopilotConversationMessagesUserId$Outbound =
  | string
  | number;

/** @internal */
export const CreateSupportCopilotConversationMessagesUserId$outboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesUserId$Outbound,
    z.ZodTypeDef,
    CreateSupportCopilotConversationMessagesUserId
  > = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationMessagesUserId$ {
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationMessagesUserId$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationMessagesUserId$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserId$Outbound` instead. */
  export type Outbound =
    CreateSupportCopilotConversationMessagesUserId$Outbound;
}

export function createSupportCopilotConversationMessagesUserIdToJSON(
  createSupportCopilotConversationMessagesUserId:
    CreateSupportCopilotConversationMessagesUserId,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationMessagesUserId$outboundSchema.parse(
      createSupportCopilotConversationMessagesUserId,
    ),
  );
}

export function createSupportCopilotConversationMessagesUserIdFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSupportCopilotConversationMessagesUserId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationMessagesUserId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSupportCopilotConversationMessagesUserId' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationMessagesUserType$inboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationMessagesUserType> = z
    .nativeEnum(CreateSupportCopilotConversationMessagesUserType);

/** @internal */
export const CreateSupportCopilotConversationMessagesUserType$outboundSchema:
  z.ZodNativeEnum<typeof CreateSupportCopilotConversationMessagesUserType> =
    CreateSupportCopilotConversationMessagesUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationMessagesUserType$ {
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserType$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationMessagesUserType$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserType$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationMessagesUserType$outboundSchema;
}

/** @internal */
export const CreateSupportCopilotConversationMessagesUserProperties$inboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesUserProperties,
    z.ZodTypeDef,
    unknown
  > = collectExtraKeys$(
    z.object({
      id: z.nullable(z.union([z.string(), z.number()])).optional(),
      identificationType: z.nullable(z.string()).optional(),
      userId: z.nullable(z.union([z.string(), z.number()])).optional(),
      supportAgentName: z.nullable(z.string()).optional(),
      userType: z.nullable(
        CreateSupportCopilotConversationMessagesUserType$inboundSchema,
      ).optional(),
    }).catchall(z.any()),
    "additionalProperties",
    true,
  );

/** @internal */
export type CreateSupportCopilotConversationMessagesUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const CreateSupportCopilotConversationMessagesUserProperties$outboundSchema:
  z.ZodType<
    CreateSupportCopilotConversationMessagesUserProperties$Outbound,
    z.ZodTypeDef,
    CreateSupportCopilotConversationMessagesUserProperties
  > = z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(
      CreateSupportCopilotConversationMessagesUserType$outboundSchema,
    ).optional(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationMessagesUserProperties$ {
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationMessagesUserProperties$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationMessagesUserProperties$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessagesUserProperties$Outbound` instead. */
  export type Outbound =
    CreateSupportCopilotConversationMessagesUserProperties$Outbound;
}

export function createSupportCopilotConversationMessagesUserPropertiesToJSON(
  createSupportCopilotConversationMessagesUserProperties:
    CreateSupportCopilotConversationMessagesUserProperties,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationMessagesUserProperties$outboundSchema.parse(
      createSupportCopilotConversationMessagesUserProperties,
    ),
  );
}

export function createSupportCopilotConversationMessagesUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSupportCopilotConversationMessagesUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationMessagesUserProperties$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateSupportCopilotConversationMessagesUserProperties' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversationMessages$inboundSchema: z.ZodType<
  CreateSupportCopilotConversationMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  role: z.string(),
  content: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(
    z.array(z.lazy(() => CreateSupportCopilotConversationLinks$inboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() =>
      CreateSupportCopilotConversationMessagesUserProperties$inboundSchema
    ),
  ).optional(),
});

/** @internal */
export type CreateSupportCopilotConversationMessages$Outbound = {
  id?: string | undefined;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  createdAt?: string | null | undefined;
  updatedAt?: string | null | undefined;
  role: string;
  content?: string | null | undefined;
  name?: string | null | undefined;
  links?:
    | Array<CreateSupportCopilotConversationLinks$Outbound>
    | null
    | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | CreateSupportCopilotConversationMessagesUserProperties$Outbound
    | null
    | undefined;
};

/** @internal */
export const CreateSupportCopilotConversationMessages$outboundSchema: z.ZodType<
  CreateSupportCopilotConversationMessages$Outbound,
  z.ZodTypeDef,
  CreateSupportCopilotConversationMessages
> = z.object({
  id: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  role: z.string(),
  content: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(
    z.array(z.lazy(() => CreateSupportCopilotConversationLinks$outboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() =>
      CreateSupportCopilotConversationMessagesUserProperties$outboundSchema
    ),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversationMessages$ {
  /** @deprecated use `CreateSupportCopilotConversationMessages$inboundSchema` instead. */
  export const inboundSchema =
    CreateSupportCopilotConversationMessages$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessages$outboundSchema` instead. */
  export const outboundSchema =
    CreateSupportCopilotConversationMessages$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversationMessages$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversationMessages$Outbound;
}

export function createSupportCopilotConversationMessagesToJSON(
  createSupportCopilotConversationMessages:
    CreateSupportCopilotConversationMessages,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversationMessages$outboundSchema.parse(
      createSupportCopilotConversationMessages,
    ),
  );
}

export function createSupportCopilotConversationMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSupportCopilotConversationMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSupportCopilotConversationMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSupportCopilotConversationMessages' from JSON`,
  );
}

/** @internal */
export const CreateSupportCopilotConversation$inboundSchema: z.ZodType<
  CreateSupportCopilotConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  type: CreateSupportCopilotConversationType$inboundSchema,
  supportTicketConversationId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  updatedAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => CreateSupportCopilotConversationUserProperties$inboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(
    CreateSupportCopilotConversationVisibility$inboundSchema,
  ).optional(),
  messages: z.array(
    z.lazy(() => CreateSupportCopilotConversationMessages$inboundSchema),
  ),
});

/** @internal */
export type CreateSupportCopilotConversation$Outbound = {
  id?: string | undefined;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  type: string;
  supportTicketConversationId?: string | null | undefined;
  createdAt?: string | null | undefined;
  updatedAt?: string | null | undefined;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | CreateSupportCopilotConversationUserProperties$Outbound
    | null
    | undefined;
  tags?: Array<string> | null | undefined;
  visibility?: string | null | undefined;
  messages: Array<CreateSupportCopilotConversationMessages$Outbound>;
};

/** @internal */
export const CreateSupportCopilotConversation$outboundSchema: z.ZodType<
  CreateSupportCopilotConversation$Outbound,
  z.ZodTypeDef,
  CreateSupportCopilotConversation
> = z.object({
  id: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  type: CreateSupportCopilotConversationType$outboundSchema,
  supportTicketConversationId: z.nullable(z.string()).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  updatedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => CreateSupportCopilotConversationUserProperties$outboundSchema),
  ).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(
    CreateSupportCopilotConversationVisibility$outboundSchema,
  ).optional(),
  messages: z.array(
    z.lazy(() => CreateSupportCopilotConversationMessages$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSupportCopilotConversation$ {
  /** @deprecated use `CreateSupportCopilotConversation$inboundSchema` instead. */
  export const inboundSchema = CreateSupportCopilotConversation$inboundSchema;
  /** @deprecated use `CreateSupportCopilotConversation$outboundSchema` instead. */
  export const outboundSchema = CreateSupportCopilotConversation$outboundSchema;
  /** @deprecated use `CreateSupportCopilotConversation$Outbound` instead. */
  export type Outbound = CreateSupportCopilotConversation$Outbound;
}

export function createSupportCopilotConversationToJSON(
  createSupportCopilotConversation: CreateSupportCopilotConversation,
): string {
  return JSON.stringify(
    CreateSupportCopilotConversation$outboundSchema.parse(
      createSupportCopilotConversation,
    ),
  );
}

export function createSupportCopilotConversationFromJSON(
  jsonString: string,
): SafeParseResult<CreateSupportCopilotConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSupportCopilotConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSupportCopilotConversation' from JSON`,
  );
}
