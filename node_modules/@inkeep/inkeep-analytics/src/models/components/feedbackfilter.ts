/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackFilterAND,
  FeedbackFilterAND$inboundSchema,
  FeedbackFilterAND$Outbound,
  FeedbackFilterAND$outboundSchema,
} from "./feedbackfilterand.js";
import {
  FeedbackFilterCondition,
  FeedbackFilterCondition$inboundSchema,
  FeedbackFilterCondition$Outbound,
  FeedbackFilterCondition$outboundSchema,
} from "./feedbackfiltercondition.js";
import {
  FeedbackFilterOR,
  FeedbackFilterOR$inboundSchema,
  FeedbackFilterOR$Outbound,
  FeedbackFilterOR$outboundSchema,
} from "./feedbackfilteror.js";

export type FeedbackFilter =
  | FeedbackFilterCondition
  | FeedbackFilterAND
  | FeedbackFilterOR;

/** @internal */
export const FeedbackFilter$inboundSchema: z.ZodType<
  FeedbackFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  FeedbackFilterCondition$inboundSchema,
  z.lazy(() => FeedbackFilterAND$inboundSchema),
  z.lazy(() => FeedbackFilterOR$inboundSchema),
]);

/** @internal */
export type FeedbackFilter$Outbound =
  | FeedbackFilterCondition$Outbound
  | FeedbackFilterAND$Outbound
  | FeedbackFilterOR$Outbound;

/** @internal */
export const FeedbackFilter$outboundSchema: z.ZodType<
  FeedbackFilter$Outbound,
  z.ZodTypeDef,
  FeedbackFilter
> = z.union([
  FeedbackFilterCondition$outboundSchema,
  z.lazy(() => FeedbackFilterAND$outboundSchema),
  z.lazy(() => FeedbackFilterOR$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilter$ {
  /** @deprecated use `FeedbackFilter$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilter$inboundSchema;
  /** @deprecated use `FeedbackFilter$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilter$outboundSchema;
  /** @deprecated use `FeedbackFilter$Outbound` instead. */
  export type Outbound = FeedbackFilter$Outbound;
}

export function feedbackFilterToJSON(feedbackFilter: FeedbackFilter): string {
  return JSON.stringify(FeedbackFilter$outboundSchema.parse(feedbackFilter));
}

export function feedbackFilterFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilter' from JSON`,
  );
}
