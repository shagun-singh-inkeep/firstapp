/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Available fields for SemanticThread
 */
export const SemanticThreadField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  Properties: "properties",
  UserProperties: "userProperties",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
/**
 * Available fields for SemanticThread
 */
export type SemanticThreadField = ClosedEnum<typeof SemanticThreadField>;

/** @internal */
export const SemanticThreadField$inboundSchema: z.ZodNativeEnum<
  typeof SemanticThreadField
> = z.nativeEnum(SemanticThreadField);

/** @internal */
export const SemanticThreadField$outboundSchema: z.ZodNativeEnum<
  typeof SemanticThreadField
> = SemanticThreadField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadField$ {
  /** @deprecated use `SemanticThreadField$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadField$inboundSchema;
  /** @deprecated use `SemanticThreadField$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadField$outboundSchema;
}
