/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenAIConversation,
  OpenAIConversation$inboundSchema,
  OpenAIConversation$Outbound,
  OpenAIConversation$outboundSchema,
} from "./openaiconversation.js";
import {
  SupportCopilotConversation,
  SupportCopilotConversation$inboundSchema,
  SupportCopilotConversation$Outbound,
  SupportCopilotConversation$outboundSchema,
} from "./supportcopilotconversation.js";
import {
  SupportTicketConversation,
  SupportTicketConversation$inboundSchema,
  SupportTicketConversation$Outbound,
  SupportTicketConversation$outboundSchema,
} from "./supportticketconversation.js";

export type Conversation =
  | (SupportTicketConversation & { type: "support_ticket" })
  | (SupportCopilotConversation & { type: "support_copilot" })
  | (OpenAIConversation & { type: "openai" });

/** @internal */
export const Conversation$inboundSchema: z.ZodType<
  Conversation,
  z.ZodTypeDef,
  unknown
> = z.union([
  SupportTicketConversation$inboundSchema.and(
    z.object({ type: z.literal("support_ticket") }).transform((v) => ({
      type: v.type,
    })),
  ),
  SupportCopilotConversation$inboundSchema.and(
    z.object({ type: z.literal("support_copilot") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OpenAIConversation$inboundSchema.and(
    z.object({ type: z.literal("openai") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type Conversation$Outbound =
  | (SupportTicketConversation$Outbound & { type: "support_ticket" })
  | (SupportCopilotConversation$Outbound & { type: "support_copilot" })
  | (OpenAIConversation$Outbound & { type: "openai" });

/** @internal */
export const Conversation$outboundSchema: z.ZodType<
  Conversation$Outbound,
  z.ZodTypeDef,
  Conversation
> = z.union([
  SupportTicketConversation$outboundSchema.and(
    z.object({ type: z.literal("support_ticket") }).transform((v) => ({
      type: v.type,
    })),
  ),
  SupportCopilotConversation$outboundSchema.and(
    z.object({ type: z.literal("support_copilot") }).transform((v) => ({
      type: v.type,
    })),
  ),
  OpenAIConversation$outboundSchema.and(
    z.object({ type: z.literal("openai") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conversation$ {
  /** @deprecated use `Conversation$inboundSchema` instead. */
  export const inboundSchema = Conversation$inboundSchema;
  /** @deprecated use `Conversation$outboundSchema` instead. */
  export const outboundSchema = Conversation$outboundSchema;
  /** @deprecated use `Conversation$Outbound` instead. */
  export type Outbound = Conversation$Outbound;
}

export function conversationToJSON(conversation: Conversation): string {
  return JSON.stringify(Conversation$outboundSchema.parse(conversation));
}

export function conversationFromJSON(
  jsonString: string,
): SafeParseResult<Conversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conversation' from JSON`,
  );
}
