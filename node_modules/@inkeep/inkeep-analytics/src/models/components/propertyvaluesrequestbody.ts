/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Which JSON field to query values from
 */
export const PropertyValuesRequestBodyField = {
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
/**
 * Which JSON field to query values from
 */
export type PropertyValuesRequestBodyField = ClosedEnum<
  typeof PropertyValuesRequestBodyField
>;

export const PropertyValuesRequestBodyViews = {
  EventsView: "events_view",
  ConversationsView: "conversations_view",
  SemanticThreadsView: "semantic_threads_view",
  FeedbackView: "feedback_view",
} as const;
export type PropertyValuesRequestBodyViews = ClosedEnum<
  typeof PropertyValuesRequestBodyViews
>;

/**
 * Query Property Values Params
 */
export type PropertyValuesRequestBody = {
  /**
   * Which JSON field to query values from
   */
  field: PropertyValuesRequestBodyField;
  /**
   * The property key to get values for
   */
  key: string;
  /**
   * Optional list of views to query (defaults to all views)
   */
  views?: Array<PropertyValuesRequestBodyViews> | undefined;
  /**
   * Maximum number of values to return
   */
  limit?: number | undefined;
};

/** @internal */
export const PropertyValuesRequestBodyField$inboundSchema: z.ZodNativeEnum<
  typeof PropertyValuesRequestBodyField
> = z.nativeEnum(PropertyValuesRequestBodyField);

/** @internal */
export const PropertyValuesRequestBodyField$outboundSchema: z.ZodNativeEnum<
  typeof PropertyValuesRequestBodyField
> = PropertyValuesRequestBodyField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyValuesRequestBodyField$ {
  /** @deprecated use `PropertyValuesRequestBodyField$inboundSchema` instead. */
  export const inboundSchema = PropertyValuesRequestBodyField$inboundSchema;
  /** @deprecated use `PropertyValuesRequestBodyField$outboundSchema` instead. */
  export const outboundSchema = PropertyValuesRequestBodyField$outboundSchema;
}

/** @internal */
export const PropertyValuesRequestBodyViews$inboundSchema: z.ZodNativeEnum<
  typeof PropertyValuesRequestBodyViews
> = z.nativeEnum(PropertyValuesRequestBodyViews);

/** @internal */
export const PropertyValuesRequestBodyViews$outboundSchema: z.ZodNativeEnum<
  typeof PropertyValuesRequestBodyViews
> = PropertyValuesRequestBodyViews$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyValuesRequestBodyViews$ {
  /** @deprecated use `PropertyValuesRequestBodyViews$inboundSchema` instead. */
  export const inboundSchema = PropertyValuesRequestBodyViews$inboundSchema;
  /** @deprecated use `PropertyValuesRequestBodyViews$outboundSchema` instead. */
  export const outboundSchema = PropertyValuesRequestBodyViews$outboundSchema;
}

/** @internal */
export const PropertyValuesRequestBody$inboundSchema: z.ZodType<
  PropertyValuesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: PropertyValuesRequestBodyField$inboundSchema,
  key: z.string(),
  views: z.array(PropertyValuesRequestBodyViews$inboundSchema).optional(),
  limit: z.number().default(100),
});

/** @internal */
export type PropertyValuesRequestBody$Outbound = {
  field: string;
  key: string;
  views?: Array<string> | undefined;
  limit: number;
};

/** @internal */
export const PropertyValuesRequestBody$outboundSchema: z.ZodType<
  PropertyValuesRequestBody$Outbound,
  z.ZodTypeDef,
  PropertyValuesRequestBody
> = z.object({
  field: PropertyValuesRequestBodyField$outboundSchema,
  key: z.string(),
  views: z.array(PropertyValuesRequestBodyViews$outboundSchema).optional(),
  limit: z.number().default(100),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyValuesRequestBody$ {
  /** @deprecated use `PropertyValuesRequestBody$inboundSchema` instead. */
  export const inboundSchema = PropertyValuesRequestBody$inboundSchema;
  /** @deprecated use `PropertyValuesRequestBody$outboundSchema` instead. */
  export const outboundSchema = PropertyValuesRequestBody$outboundSchema;
  /** @deprecated use `PropertyValuesRequestBody$Outbound` instead. */
  export type Outbound = PropertyValuesRequestBody$Outbound;
}

export function propertyValuesRequestBodyToJSON(
  propertyValuesRequestBody: PropertyValuesRequestBody,
): string {
  return JSON.stringify(
    PropertyValuesRequestBody$outboundSchema.parse(propertyValuesRequestBody),
  );
}

export function propertyValuesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PropertyValuesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyValuesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyValuesRequestBody' from JSON`,
  );
}
