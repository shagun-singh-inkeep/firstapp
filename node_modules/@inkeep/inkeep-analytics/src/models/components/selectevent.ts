/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SelectConversationEvent,
  SelectConversationEvent$inboundSchema,
  SelectConversationEvent$Outbound,
  SelectConversationEvent$outboundSchema,
} from "./selectconversationevent.js";
import {
  SelectMessageEvent,
  SelectMessageEvent$inboundSchema,
  SelectMessageEvent$Outbound,
  SelectMessageEvent$outboundSchema,
} from "./selectmessageevent.js";
import {
  SelectSearchEvent,
  SelectSearchEvent$inboundSchema,
  SelectSearchEvent$Outbound,
  SelectSearchEvent$outboundSchema,
} from "./selectsearchevent.js";

export type SelectEvent =
  | (SelectMessageEvent & { entityType: "message" })
  | (SelectConversationEvent & { entityType: "conversation" })
  | (SelectSearchEvent & { entityType: "search" });

/** @internal */
export const SelectEvent$inboundSchema: z.ZodType<
  SelectEvent,
  z.ZodTypeDef,
  unknown
> = z.union([
  SelectMessageEvent$inboundSchema.and(
    z.object({ entityType: z.literal("message") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  SelectConversationEvent$inboundSchema.and(
    z.object({ entityType: z.literal("conversation") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  SelectSearchEvent$inboundSchema.and(
    z.object({ entityType: z.literal("search") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
]);

/** @internal */
export type SelectEvent$Outbound =
  | (SelectMessageEvent$Outbound & { entityType: "message" })
  | (SelectConversationEvent$Outbound & { entityType: "conversation" })
  | (SelectSearchEvent$Outbound & { entityType: "search" });

/** @internal */
export const SelectEvent$outboundSchema: z.ZodType<
  SelectEvent$Outbound,
  z.ZodTypeDef,
  SelectEvent
> = z.union([
  SelectMessageEvent$outboundSchema.and(
    z.object({ entityType: z.literal("message") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  SelectConversationEvent$outboundSchema.and(
    z.object({ entityType: z.literal("conversation") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
  SelectSearchEvent$outboundSchema.and(
    z.object({ entityType: z.literal("search") }).transform((v) => ({
      entityType: v.entityType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectEvent$ {
  /** @deprecated use `SelectEvent$inboundSchema` instead. */
  export const inboundSchema = SelectEvent$inboundSchema;
  /** @deprecated use `SelectEvent$outboundSchema` instead. */
  export const outboundSchema = SelectEvent$outboundSchema;
  /** @deprecated use `SelectEvent$Outbound` instead. */
  export type Outbound = SelectEvent$Outbound;
}

export function selectEventToJSON(selectEvent: SelectEvent): string {
  return JSON.stringify(SelectEvent$outboundSchema.parse(selectEvent));
}

export function selectEventFromJSON(
  jsonString: string,
): SafeParseResult<SelectEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectEvent' from JSON`,
  );
}
