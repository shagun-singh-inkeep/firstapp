/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SemanticThreadSimpleFieldSelectionType = {
  Field: "field",
} as const;
export type SemanticThreadSimpleFieldSelectionType = ClosedEnum<
  typeof SemanticThreadSimpleFieldSelectionType
>;

export const SemanticThreadSimpleFieldSelectionField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  Properties: "properties",
  UserProperties: "userProperties",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type SemanticThreadSimpleFieldSelectionField = ClosedEnum<
  typeof SemanticThreadSimpleFieldSelectionField
>;

export type SemanticThreadSimpleFieldSelection = {
  type: SemanticThreadSimpleFieldSelectionType;
  field: SemanticThreadSimpleFieldSelectionField;
  path?: Array<string> | undefined;
};

/** @internal */
export const SemanticThreadSimpleFieldSelectionType$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionType> = z.nativeEnum(
    SemanticThreadSimpleFieldSelectionType,
  );

/** @internal */
export const SemanticThreadSimpleFieldSelectionType$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionType> =
    SemanticThreadSimpleFieldSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadSimpleFieldSelectionType$ {
  /** @deprecated use `SemanticThreadSimpleFieldSelectionType$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadSimpleFieldSelectionType$inboundSchema;
  /** @deprecated use `SemanticThreadSimpleFieldSelectionType$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadSimpleFieldSelectionType$outboundSchema;
}

/** @internal */
export const SemanticThreadSimpleFieldSelectionField$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionField> = z
    .nativeEnum(SemanticThreadSimpleFieldSelectionField);

/** @internal */
export const SemanticThreadSimpleFieldSelectionField$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadSimpleFieldSelectionField> =
    SemanticThreadSimpleFieldSelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadSimpleFieldSelectionField$ {
  /** @deprecated use `SemanticThreadSimpleFieldSelectionField$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadSimpleFieldSelectionField$inboundSchema;
  /** @deprecated use `SemanticThreadSimpleFieldSelectionField$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadSimpleFieldSelectionField$outboundSchema;
}

/** @internal */
export const SemanticThreadSimpleFieldSelection$inboundSchema: z.ZodType<
  SemanticThreadSimpleFieldSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SemanticThreadSimpleFieldSelectionType$inboundSchema,
  field: SemanticThreadSimpleFieldSelectionField$inboundSchema,
  path: z.array(z.string()).optional(),
});

/** @internal */
export type SemanticThreadSimpleFieldSelection$Outbound = {
  type: string;
  field: string;
  path?: Array<string> | undefined;
};

/** @internal */
export const SemanticThreadSimpleFieldSelection$outboundSchema: z.ZodType<
  SemanticThreadSimpleFieldSelection$Outbound,
  z.ZodTypeDef,
  SemanticThreadSimpleFieldSelection
> = z.object({
  type: SemanticThreadSimpleFieldSelectionType$outboundSchema,
  field: SemanticThreadSimpleFieldSelectionField$outboundSchema,
  path: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadSimpleFieldSelection$ {
  /** @deprecated use `SemanticThreadSimpleFieldSelection$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadSimpleFieldSelection$inboundSchema;
  /** @deprecated use `SemanticThreadSimpleFieldSelection$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadSimpleFieldSelection$outboundSchema;
  /** @deprecated use `SemanticThreadSimpleFieldSelection$Outbound` instead. */
  export type Outbound = SemanticThreadSimpleFieldSelection$Outbound;
}

export function semanticThreadSimpleFieldSelectionToJSON(
  semanticThreadSimpleFieldSelection: SemanticThreadSimpleFieldSelection,
): string {
  return JSON.stringify(
    SemanticThreadSimpleFieldSelection$outboundSchema.parse(
      semanticThreadSimpleFieldSelection,
    ),
  );
}

export function semanticThreadSimpleFieldSelectionFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadSimpleFieldSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SemanticThreadSimpleFieldSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadSimpleFieldSelection' from JSON`,
  );
}
