/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SemanticThreadField,
  SemanticThreadField$inboundSchema,
  SemanticThreadField$outboundSchema,
} from "./semanticthreadfield.js";

/**
 * Group by options for semantic threads
 */
export type SemanticThreadGroupBy = {
  /**
   * Available fields for SemanticThread
   */
  field: SemanticThreadField;
  path?: Array<string> | undefined;
  includeInSelect?: boolean | undefined;
};

/** @internal */
export const SemanticThreadGroupBy$inboundSchema: z.ZodType<
  SemanticThreadGroupBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: SemanticThreadField$inboundSchema,
  path: z.array(z.string()).optional(),
  includeInSelect: z.boolean().default(true),
});

/** @internal */
export type SemanticThreadGroupBy$Outbound = {
  field: string;
  path?: Array<string> | undefined;
  includeInSelect: boolean;
};

/** @internal */
export const SemanticThreadGroupBy$outboundSchema: z.ZodType<
  SemanticThreadGroupBy$Outbound,
  z.ZodTypeDef,
  SemanticThreadGroupBy
> = z.object({
  field: SemanticThreadField$outboundSchema,
  path: z.array(z.string()).optional(),
  includeInSelect: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadGroupBy$ {
  /** @deprecated use `SemanticThreadGroupBy$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadGroupBy$inboundSchema;
  /** @deprecated use `SemanticThreadGroupBy$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadGroupBy$outboundSchema;
  /** @deprecated use `SemanticThreadGroupBy$Outbound` instead. */
  export type Outbound = SemanticThreadGroupBy$Outbound;
}

export function semanticThreadGroupByToJSON(
  semanticThreadGroupBy: SemanticThreadGroupBy,
): string {
  return JSON.stringify(
    SemanticThreadGroupBy$outboundSchema.parse(semanticThreadGroupBy),
  );
}

export function semanticThreadGroupByFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadGroupBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadGroupBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadGroupBy' from JSON`,
  );
}
