/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsFilter,
  ConversationsFilter$inboundSchema,
  ConversationsFilter$Outbound,
  ConversationsFilter$outboundSchema,
} from "./conversationsfilter.js";

export type And = ConversationsFilter;

/**
 * ConversationsFilter AND operator
 */
export type ConversationsFilterAND = {
  /**
   * ConversationsFilter AND condition
   */
  and: Array<ConversationsFilter>;
};

/** @internal */
export const And$inboundSchema: z.ZodType<And, z.ZodTypeDef, unknown> = z.lazy(
  () => ConversationsFilter$inboundSchema
);

/** @internal */
export type And$Outbound = ConversationsFilter$Outbound;

/** @internal */
export const And$outboundSchema: z.ZodType<And$Outbound, z.ZodTypeDef, And> = z
  .lazy(() => ConversationsFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace And$ {
  /** @deprecated use `And$inboundSchema` instead. */
  export const inboundSchema = And$inboundSchema;
  /** @deprecated use `And$outboundSchema` instead. */
  export const outboundSchema = And$outboundSchema;
  /** @deprecated use `And$Outbound` instead. */
  export type Outbound = And$Outbound;
}

export function andToJSON(and: And): string {
  return JSON.stringify(And$outboundSchema.parse(and));
}

export function andFromJSON(
  jsonString: string,
): SafeParseResult<And, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => And$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'And' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterAND$inboundSchema: z.ZodType<
  ConversationsFilterAND,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(z.lazy(() => ConversationsFilter$inboundSchema)),
});

/** @internal */
export type ConversationsFilterAND$Outbound = {
  and: Array<ConversationsFilter$Outbound>;
};

/** @internal */
export const ConversationsFilterAND$outboundSchema: z.ZodType<
  ConversationsFilterAND$Outbound,
  z.ZodTypeDef,
  ConversationsFilterAND
> = z.object({
  and: z.array(z.lazy(() => ConversationsFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterAND$ {
  /** @deprecated use `ConversationsFilterAND$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterAND$inboundSchema;
  /** @deprecated use `ConversationsFilterAND$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterAND$outboundSchema;
  /** @deprecated use `ConversationsFilterAND$Outbound` instead. */
  export type Outbound = ConversationsFilterAND$Outbound;
}

export function conversationsFilterANDToJSON(
  conversationsFilterAND: ConversationsFilterAND,
): string {
  return JSON.stringify(
    ConversationsFilterAND$outboundSchema.parse(conversationsFilterAND),
  );
}

export function conversationsFilterANDFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterAND' from JSON`,
  );
}
