/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsFilterAND,
  ConversationsFilterAND$inboundSchema,
  ConversationsFilterAND$Outbound,
  ConversationsFilterAND$outboundSchema,
} from "./conversationsfilterand.js";
import {
  ConversationsFilterCondition,
  ConversationsFilterCondition$inboundSchema,
  ConversationsFilterCondition$Outbound,
  ConversationsFilterCondition$outboundSchema,
} from "./conversationsfiltercondition.js";
import {
  ConversationsFilterOR,
  ConversationsFilterOR$inboundSchema,
  ConversationsFilterOR$Outbound,
  ConversationsFilterOR$outboundSchema,
} from "./conversationsfilteror.js";
import {
  EventsFilterAND,
  EventsFilterAND$inboundSchema,
  EventsFilterAND$Outbound,
  EventsFilterAND$outboundSchema,
} from "./eventsfilterand.js";
import {
  EventsFilterCondition,
  EventsFilterCondition$inboundSchema,
  EventsFilterCondition$Outbound,
  EventsFilterCondition$outboundSchema,
} from "./eventsfiltercondition.js";
import {
  EventsFilterOR,
  EventsFilterOR$inboundSchema,
  EventsFilterOR$Outbound,
  EventsFilterOR$outboundSchema,
} from "./eventsfilteror.js";
import {
  FeedbackFilterAND,
  FeedbackFilterAND$inboundSchema,
  FeedbackFilterAND$Outbound,
  FeedbackFilterAND$outboundSchema,
} from "./feedbackfilterand.js";
import {
  FeedbackFilterCondition,
  FeedbackFilterCondition$inboundSchema,
  FeedbackFilterCondition$Outbound,
  FeedbackFilterCondition$outboundSchema,
} from "./feedbackfiltercondition.js";
import {
  FeedbackFilterOR,
  FeedbackFilterOR$inboundSchema,
  FeedbackFilterOR$Outbound,
  FeedbackFilterOR$outboundSchema,
} from "./feedbackfilteror.js";
import {
  SemanticThreadFilterAND,
  SemanticThreadFilterAND$inboundSchema,
  SemanticThreadFilterAND$Outbound,
  SemanticThreadFilterAND$outboundSchema,
} from "./semanticthreadfilterand.js";
import {
  SemanticThreadFilterCondition,
  SemanticThreadFilterCondition$inboundSchema,
  SemanticThreadFilterCondition$Outbound,
  SemanticThreadFilterCondition$outboundSchema,
} from "./semanticthreadfiltercondition.js";
import {
  SemanticThreadFilterOR,
  SemanticThreadFilterOR$inboundSchema,
  SemanticThreadFilterOR$Outbound,
  SemanticThreadFilterOR$outboundSchema,
} from "./semanticthreadfilteror.js";

export const PropertyKeysRequestBodyField = {
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
export type PropertyKeysRequestBodyField = ClosedEnum<
  typeof PropertyKeysRequestBodyField
>;

export const Views = {
  EventsView: "events_view",
  ConversationsView: "conversations_view",
  SemanticThreadsView: "semantic_threads_view",
  FeedbackView: "feedback_view",
} as const;
export type Views = ClosedEnum<typeof Views>;

export type Where =
  | EventsFilterCondition
  | EventsFilterAND
  | EventsFilterOR
  | ConversationsFilterCondition
  | ConversationsFilterAND
  | ConversationsFilterOR
  | SemanticThreadFilterCondition
  | SemanticThreadFilterAND
  | SemanticThreadFilterOR
  | FeedbackFilterCondition
  | FeedbackFilterAND
  | FeedbackFilterOR;

/**
 * Query Property Keys Params
 */
export type PropertyKeysRequestBody = {
  field: PropertyKeysRequestBodyField;
  /**
   * Optional list of views to query (defaults to all views)
   */
  views?: Array<Views> | undefined;
  where?:
    | EventsFilterCondition
    | EventsFilterAND
    | EventsFilterOR
    | ConversationsFilterCondition
    | ConversationsFilterAND
    | ConversationsFilterOR
    | SemanticThreadFilterCondition
    | SemanticThreadFilterAND
    | SemanticThreadFilterOR
    | FeedbackFilterCondition
    | FeedbackFilterAND
    | FeedbackFilterOR
    | undefined;
};

/** @internal */
export const PropertyKeysRequestBodyField$inboundSchema: z.ZodNativeEnum<
  typeof PropertyKeysRequestBodyField
> = z.nativeEnum(PropertyKeysRequestBodyField);

/** @internal */
export const PropertyKeysRequestBodyField$outboundSchema: z.ZodNativeEnum<
  typeof PropertyKeysRequestBodyField
> = PropertyKeysRequestBodyField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKeysRequestBodyField$ {
  /** @deprecated use `PropertyKeysRequestBodyField$inboundSchema` instead. */
  export const inboundSchema = PropertyKeysRequestBodyField$inboundSchema;
  /** @deprecated use `PropertyKeysRequestBodyField$outboundSchema` instead. */
  export const outboundSchema = PropertyKeysRequestBodyField$outboundSchema;
}

/** @internal */
export const Views$inboundSchema: z.ZodNativeEnum<typeof Views> = z.nativeEnum(
  Views,
);

/** @internal */
export const Views$outboundSchema: z.ZodNativeEnum<typeof Views> =
  Views$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Views$ {
  /** @deprecated use `Views$inboundSchema` instead. */
  export const inboundSchema = Views$inboundSchema;
  /** @deprecated use `Views$outboundSchema` instead. */
  export const outboundSchema = Views$outboundSchema;
}

/** @internal */
export const Where$inboundSchema: z.ZodType<Where, z.ZodTypeDef, unknown> = z
  .union([
    EventsFilterCondition$inboundSchema,
    EventsFilterAND$inboundSchema,
    EventsFilterOR$inboundSchema,
    ConversationsFilterCondition$inboundSchema,
    ConversationsFilterAND$inboundSchema,
    ConversationsFilterOR$inboundSchema,
    SemanticThreadFilterCondition$inboundSchema,
    SemanticThreadFilterAND$inboundSchema,
    SemanticThreadFilterOR$inboundSchema,
    FeedbackFilterCondition$inboundSchema,
    FeedbackFilterAND$inboundSchema,
    FeedbackFilterOR$inboundSchema,
  ]);

/** @internal */
export type Where$Outbound =
  | EventsFilterCondition$Outbound
  | EventsFilterAND$Outbound
  | EventsFilterOR$Outbound
  | ConversationsFilterCondition$Outbound
  | ConversationsFilterAND$Outbound
  | ConversationsFilterOR$Outbound
  | SemanticThreadFilterCondition$Outbound
  | SemanticThreadFilterAND$Outbound
  | SemanticThreadFilterOR$Outbound
  | FeedbackFilterCondition$Outbound
  | FeedbackFilterAND$Outbound
  | FeedbackFilterOR$Outbound;

/** @internal */
export const Where$outboundSchema: z.ZodType<
  Where$Outbound,
  z.ZodTypeDef,
  Where
> = z.union([
  EventsFilterCondition$outboundSchema,
  EventsFilterAND$outboundSchema,
  EventsFilterOR$outboundSchema,
  ConversationsFilterCondition$outboundSchema,
  ConversationsFilterAND$outboundSchema,
  ConversationsFilterOR$outboundSchema,
  SemanticThreadFilterCondition$outboundSchema,
  SemanticThreadFilterAND$outboundSchema,
  SemanticThreadFilterOR$outboundSchema,
  FeedbackFilterCondition$outboundSchema,
  FeedbackFilterAND$outboundSchema,
  FeedbackFilterOR$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Where$ {
  /** @deprecated use `Where$inboundSchema` instead. */
  export const inboundSchema = Where$inboundSchema;
  /** @deprecated use `Where$outboundSchema` instead. */
  export const outboundSchema = Where$outboundSchema;
  /** @deprecated use `Where$Outbound` instead. */
  export type Outbound = Where$Outbound;
}

export function whereToJSON(where: Where): string {
  return JSON.stringify(Where$outboundSchema.parse(where));
}

export function whereFromJSON(
  jsonString: string,
): SafeParseResult<Where, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Where$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Where' from JSON`,
  );
}

/** @internal */
export const PropertyKeysRequestBody$inboundSchema: z.ZodType<
  PropertyKeysRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: PropertyKeysRequestBodyField$inboundSchema,
  views: z.array(Views$inboundSchema).optional(),
  where: z.union([
    EventsFilterCondition$inboundSchema,
    EventsFilterAND$inboundSchema,
    EventsFilterOR$inboundSchema,
    ConversationsFilterCondition$inboundSchema,
    ConversationsFilterAND$inboundSchema,
    ConversationsFilterOR$inboundSchema,
    SemanticThreadFilterCondition$inboundSchema,
    SemanticThreadFilterAND$inboundSchema,
    SemanticThreadFilterOR$inboundSchema,
    FeedbackFilterCondition$inboundSchema,
    FeedbackFilterAND$inboundSchema,
    FeedbackFilterOR$inboundSchema,
  ]).optional(),
});

/** @internal */
export type PropertyKeysRequestBody$Outbound = {
  field: string;
  views?: Array<string> | undefined;
  where?:
    | EventsFilterCondition$Outbound
    | EventsFilterAND$Outbound
    | EventsFilterOR$Outbound
    | ConversationsFilterCondition$Outbound
    | ConversationsFilterAND$Outbound
    | ConversationsFilterOR$Outbound
    | SemanticThreadFilterCondition$Outbound
    | SemanticThreadFilterAND$Outbound
    | SemanticThreadFilterOR$Outbound
    | FeedbackFilterCondition$Outbound
    | FeedbackFilterAND$Outbound
    | FeedbackFilterOR$Outbound
    | undefined;
};

/** @internal */
export const PropertyKeysRequestBody$outboundSchema: z.ZodType<
  PropertyKeysRequestBody$Outbound,
  z.ZodTypeDef,
  PropertyKeysRequestBody
> = z.object({
  field: PropertyKeysRequestBodyField$outboundSchema,
  views: z.array(Views$outboundSchema).optional(),
  where: z.union([
    EventsFilterCondition$outboundSchema,
    EventsFilterAND$outboundSchema,
    EventsFilterOR$outboundSchema,
    ConversationsFilterCondition$outboundSchema,
    ConversationsFilterAND$outboundSchema,
    ConversationsFilterOR$outboundSchema,
    SemanticThreadFilterCondition$outboundSchema,
    SemanticThreadFilterAND$outboundSchema,
    SemanticThreadFilterOR$outboundSchema,
    FeedbackFilterCondition$outboundSchema,
    FeedbackFilterAND$outboundSchema,
    FeedbackFilterOR$outboundSchema,
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKeysRequestBody$ {
  /** @deprecated use `PropertyKeysRequestBody$inboundSchema` instead. */
  export const inboundSchema = PropertyKeysRequestBody$inboundSchema;
  /** @deprecated use `PropertyKeysRequestBody$outboundSchema` instead. */
  export const outboundSchema = PropertyKeysRequestBody$outboundSchema;
  /** @deprecated use `PropertyKeysRequestBody$Outbound` instead. */
  export type Outbound = PropertyKeysRequestBody$Outbound;
}

export function propertyKeysRequestBodyToJSON(
  propertyKeysRequestBody: PropertyKeysRequestBody,
): string {
  return JSON.stringify(
    PropertyKeysRequestBody$outboundSchema.parse(propertyKeysRequestBody),
  );
}

export function propertyKeysRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PropertyKeysRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyKeysRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyKeysRequestBody' from JSON`,
  );
}
