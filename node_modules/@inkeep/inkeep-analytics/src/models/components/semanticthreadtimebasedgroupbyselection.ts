/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TimeUnit,
  TimeUnit$inboundSchema,
  TimeUnit$outboundSchema,
} from "./timeunit.js";

export const SemanticThreadTimeBasedGroupBySelectionType = {
  Time: "time",
} as const;
export type SemanticThreadTimeBasedGroupBySelectionType = ClosedEnum<
  typeof SemanticThreadTimeBasedGroupBySelectionType
>;

export const SemanticThreadTimeBasedGroupBySelectionField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  Properties: "properties",
  UserProperties: "userProperties",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type SemanticThreadTimeBasedGroupBySelectionField = ClosedEnum<
  typeof SemanticThreadTimeBasedGroupBySelectionField
>;

export type SemanticThreadTimeBasedGroupBySelection = {
  type: SemanticThreadTimeBasedGroupBySelectionType;
  /**
   * Valid time units for time-based operations
   */
  timeUnit: TimeUnit;
  field?: SemanticThreadTimeBasedGroupBySelectionField | undefined;
};

/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionType$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadTimeBasedGroupBySelectionType> = z
    .nativeEnum(SemanticThreadTimeBasedGroupBySelectionType);

/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionType$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadTimeBasedGroupBySelectionType> =
    SemanticThreadTimeBasedGroupBySelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadTimeBasedGroupBySelectionType$ {
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionType$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadTimeBasedGroupBySelectionType$inboundSchema;
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionType$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadTimeBasedGroupBySelectionType$outboundSchema;
}

/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionField$inboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadTimeBasedGroupBySelectionField> = z
    .nativeEnum(SemanticThreadTimeBasedGroupBySelectionField);

/** @internal */
export const SemanticThreadTimeBasedGroupBySelectionField$outboundSchema:
  z.ZodNativeEnum<typeof SemanticThreadTimeBasedGroupBySelectionField> =
    SemanticThreadTimeBasedGroupBySelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadTimeBasedGroupBySelectionField$ {
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionField$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadTimeBasedGroupBySelectionField$inboundSchema;
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelectionField$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadTimeBasedGroupBySelectionField$outboundSchema;
}

/** @internal */
export const SemanticThreadTimeBasedGroupBySelection$inboundSchema: z.ZodType<
  SemanticThreadTimeBasedGroupBySelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SemanticThreadTimeBasedGroupBySelectionType$inboundSchema,
  timeUnit: TimeUnit$inboundSchema,
  field: SemanticThreadTimeBasedGroupBySelectionField$inboundSchema.optional(),
});

/** @internal */
export type SemanticThreadTimeBasedGroupBySelection$Outbound = {
  type: string;
  timeUnit: string;
  field?: string | undefined;
};

/** @internal */
export const SemanticThreadTimeBasedGroupBySelection$outboundSchema: z.ZodType<
  SemanticThreadTimeBasedGroupBySelection$Outbound,
  z.ZodTypeDef,
  SemanticThreadTimeBasedGroupBySelection
> = z.object({
  type: SemanticThreadTimeBasedGroupBySelectionType$outboundSchema,
  timeUnit: TimeUnit$outboundSchema,
  field: SemanticThreadTimeBasedGroupBySelectionField$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadTimeBasedGroupBySelection$ {
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelection$inboundSchema` instead. */
  export const inboundSchema =
    SemanticThreadTimeBasedGroupBySelection$inboundSchema;
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelection$outboundSchema` instead. */
  export const outboundSchema =
    SemanticThreadTimeBasedGroupBySelection$outboundSchema;
  /** @deprecated use `SemanticThreadTimeBasedGroupBySelection$Outbound` instead. */
  export type Outbound = SemanticThreadTimeBasedGroupBySelection$Outbound;
}

export function semanticThreadTimeBasedGroupBySelectionToJSON(
  semanticThreadTimeBasedGroupBySelection:
    SemanticThreadTimeBasedGroupBySelection,
): string {
  return JSON.stringify(
    SemanticThreadTimeBasedGroupBySelection$outboundSchema.parse(
      semanticThreadTimeBasedGroupBySelection,
    ),
  );
}

export function semanticThreadTimeBasedGroupBySelectionFromJSON(
  jsonString: string,
): SafeParseResult<
  SemanticThreadTimeBasedGroupBySelection,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SemanticThreadTimeBasedGroupBySelection$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SemanticThreadTimeBasedGroupBySelection' from JSON`,
  );
}
