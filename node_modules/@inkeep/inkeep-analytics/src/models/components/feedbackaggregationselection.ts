/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FeedbackAggregationSelectionType = {
  Aggregation: "aggregation",
} as const;
export type FeedbackAggregationSelectionType = ClosedEnum<
  typeof FeedbackAggregationSelectionType
>;

export const FeedbackAggregationSelectionAggregation = {
  Sum: "sum",
  Count: "count",
  CountDistinct: "countDistinct",
  Avg: "avg",
  Min: "min",
  Max: "max",
} as const;
export type FeedbackAggregationSelectionAggregation = ClosedEnum<
  typeof FeedbackAggregationSelectionAggregation
>;

export const FeedbackAggregationSelectionField = {
  Id: "id",
  Type: "type",
  MessageId: "messageId",
  CreatedAt: "createdAt",
  OrganizationId: "organizationId",
  Reasons: "reasons",
  Properties: "properties",
  UserProperties: "userProperties",
  ConversationId: "conversationId",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  UpdatedAt: "updatedAt",
  Status: "status",
} as const;
export type FeedbackAggregationSelectionField = ClosedEnum<
  typeof FeedbackAggregationSelectionField
>;

export type FeedbackAggregationSelection = {
  type: FeedbackAggregationSelectionType;
  aggregation: FeedbackAggregationSelectionAggregation;
  field?: FeedbackAggregationSelectionField | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const FeedbackAggregationSelectionType$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackAggregationSelectionType
> = z.nativeEnum(FeedbackAggregationSelectionType);

/** @internal */
export const FeedbackAggregationSelectionType$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackAggregationSelectionType
> = FeedbackAggregationSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackAggregationSelectionType$ {
  /** @deprecated use `FeedbackAggregationSelectionType$inboundSchema` instead. */
  export const inboundSchema = FeedbackAggregationSelectionType$inboundSchema;
  /** @deprecated use `FeedbackAggregationSelectionType$outboundSchema` instead. */
  export const outboundSchema = FeedbackAggregationSelectionType$outboundSchema;
}

/** @internal */
export const FeedbackAggregationSelectionAggregation$inboundSchema:
  z.ZodNativeEnum<typeof FeedbackAggregationSelectionAggregation> = z
    .nativeEnum(FeedbackAggregationSelectionAggregation);

/** @internal */
export const FeedbackAggregationSelectionAggregation$outboundSchema:
  z.ZodNativeEnum<typeof FeedbackAggregationSelectionAggregation> =
    FeedbackAggregationSelectionAggregation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackAggregationSelectionAggregation$ {
  /** @deprecated use `FeedbackAggregationSelectionAggregation$inboundSchema` instead. */
  export const inboundSchema =
    FeedbackAggregationSelectionAggregation$inboundSchema;
  /** @deprecated use `FeedbackAggregationSelectionAggregation$outboundSchema` instead. */
  export const outboundSchema =
    FeedbackAggregationSelectionAggregation$outboundSchema;
}

/** @internal */
export const FeedbackAggregationSelectionField$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackAggregationSelectionField
> = z.nativeEnum(FeedbackAggregationSelectionField);

/** @internal */
export const FeedbackAggregationSelectionField$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackAggregationSelectionField
> = FeedbackAggregationSelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackAggregationSelectionField$ {
  /** @deprecated use `FeedbackAggregationSelectionField$inboundSchema` instead. */
  export const inboundSchema = FeedbackAggregationSelectionField$inboundSchema;
  /** @deprecated use `FeedbackAggregationSelectionField$outboundSchema` instead. */
  export const outboundSchema =
    FeedbackAggregationSelectionField$outboundSchema;
}

/** @internal */
export const FeedbackAggregationSelection$inboundSchema: z.ZodType<
  FeedbackAggregationSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FeedbackAggregationSelectionType$inboundSchema,
  aggregation: FeedbackAggregationSelectionAggregation$inboundSchema,
  field: FeedbackAggregationSelectionField$inboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/** @internal */
export type FeedbackAggregationSelection$Outbound = {
  type: string;
  aggregation: string;
  field?: string | undefined;
  path?: Array<string> | undefined;
};

/** @internal */
export const FeedbackAggregationSelection$outboundSchema: z.ZodType<
  FeedbackAggregationSelection$Outbound,
  z.ZodTypeDef,
  FeedbackAggregationSelection
> = z.object({
  type: FeedbackAggregationSelectionType$outboundSchema,
  aggregation: FeedbackAggregationSelectionAggregation$outboundSchema,
  field: FeedbackAggregationSelectionField$outboundSchema.optional(),
  path: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackAggregationSelection$ {
  /** @deprecated use `FeedbackAggregationSelection$inboundSchema` instead. */
  export const inboundSchema = FeedbackAggregationSelection$inboundSchema;
  /** @deprecated use `FeedbackAggregationSelection$outboundSchema` instead. */
  export const outboundSchema = FeedbackAggregationSelection$outboundSchema;
  /** @deprecated use `FeedbackAggregationSelection$Outbound` instead. */
  export type Outbound = FeedbackAggregationSelection$Outbound;
}

export function feedbackAggregationSelectionToJSON(
  feedbackAggregationSelection: FeedbackAggregationSelection,
): string {
  return JSON.stringify(
    FeedbackAggregationSelection$outboundSchema.parse(
      feedbackAggregationSelection,
    ),
  );
}

export function feedbackAggregationSelectionFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackAggregationSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackAggregationSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackAggregationSelection' from JSON`,
  );
}
