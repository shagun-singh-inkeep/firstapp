/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackFilter,
  FeedbackFilter$inboundSchema,
  FeedbackFilter$Outbound,
  FeedbackFilter$outboundSchema,
} from "./feedbackfilter.js";
import {
  FeedbackGroupBy,
  FeedbackGroupBy$inboundSchema,
  FeedbackGroupBy$Outbound,
  FeedbackGroupBy$outboundSchema,
} from "./feedbackgroupby.js";
import {
  FeedbackOrderBy,
  FeedbackOrderBy$inboundSchema,
  FeedbackOrderBy$Outbound,
  FeedbackOrderBy$outboundSchema,
} from "./feedbackorderby.js";
import {
  FeedbackSelection,
  FeedbackSelection$inboundSchema,
  FeedbackSelection$Outbound,
  FeedbackSelection$outboundSchema,
} from "./feedbackselection.js";

/**
 * Query Feedback Params
 */
export type QueryFeedbackRequestBody = {
  select?: Array<FeedbackSelection> | undefined;
  groupBy?: Array<FeedbackGroupBy> | undefined;
  where?: FeedbackFilter | undefined;
  orderBy?: Array<FeedbackOrderBy> | undefined;
  /**
   * Notes are not persisted, but may be useful for your debugging purposes
   */
  notes?: string | undefined;
};

/** @internal */
export const QueryFeedbackRequestBody$inboundSchema: z.ZodType<
  QueryFeedbackRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  select: z.array(FeedbackSelection$inboundSchema).optional(),
  groupBy: z.array(FeedbackGroupBy$inboundSchema).optional(),
  where: FeedbackFilter$inboundSchema.optional(),
  orderBy: z.array(FeedbackOrderBy$inboundSchema).optional(),
  notes: z.string().optional(),
});

/** @internal */
export type QueryFeedbackRequestBody$Outbound = {
  select?: Array<FeedbackSelection$Outbound> | undefined;
  groupBy?: Array<FeedbackGroupBy$Outbound> | undefined;
  where?: FeedbackFilter$Outbound | undefined;
  orderBy?: Array<FeedbackOrderBy$Outbound> | undefined;
  notes?: string | undefined;
};

/** @internal */
export const QueryFeedbackRequestBody$outboundSchema: z.ZodType<
  QueryFeedbackRequestBody$Outbound,
  z.ZodTypeDef,
  QueryFeedbackRequestBody
> = z.object({
  select: z.array(FeedbackSelection$outboundSchema).optional(),
  groupBy: z.array(FeedbackGroupBy$outboundSchema).optional(),
  where: FeedbackFilter$outboundSchema.optional(),
  orderBy: z.array(FeedbackOrderBy$outboundSchema).optional(),
  notes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryFeedbackRequestBody$ {
  /** @deprecated use `QueryFeedbackRequestBody$inboundSchema` instead. */
  export const inboundSchema = QueryFeedbackRequestBody$inboundSchema;
  /** @deprecated use `QueryFeedbackRequestBody$outboundSchema` instead. */
  export const outboundSchema = QueryFeedbackRequestBody$outboundSchema;
  /** @deprecated use `QueryFeedbackRequestBody$Outbound` instead. */
  export type Outbound = QueryFeedbackRequestBody$Outbound;
}

export function queryFeedbackRequestBodyToJSON(
  queryFeedbackRequestBody: QueryFeedbackRequestBody,
): string {
  return JSON.stringify(
    QueryFeedbackRequestBody$outboundSchema.parse(queryFeedbackRequestBody),
  );
}

export function queryFeedbackRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<QueryFeedbackRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryFeedbackRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryFeedbackRequestBody' from JSON`,
  );
}
