/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SupportCopilotMessageType = {
  SupportCopilot: "support_copilot",
} as const;
export type SupportCopilotMessageType = ClosedEnum<
  typeof SupportCopilotMessageType
>;

export const SupportCopilotMessageType1 = {
  Documentation: "documentation",
  Site: "site",
  DiscoursePost: "discourse_post",
  GithubIssue: "github_issue",
  GithubDiscussion: "github_discussion",
  StackoverflowQuestion: "stackoverflow_question",
  DiscordForumPost: "discord_forum_post",
  DiscordMessage: "discord_message",
  CustomQuestionAnswer: "custom_question_answer",
} as const;
export type SupportCopilotMessageType1 = ClosedEnum<
  typeof SupportCopilotMessageType1
>;

export type SupportCopilotMessageLinksType =
  | SupportCopilotMessageType1
  | string;

export type SupportCopilotMessageLinks = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: SupportCopilotMessageType1 | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type SupportCopilotMessageId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SupportCopilotMessageUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const SupportCopilotMessageUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type SupportCopilotMessageUserType = ClosedEnum<
  typeof SupportCopilotMessageUserType
>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type SupportCopilotMessageUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: SupportCopilotMessageUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export type SupportCopilotMessage = {
  id: string;
  type: SupportCopilotMessageType;
  externalId: string | null;
  externalUrl: string | null;
  conversationId: string;
  createdAt: string;
  updatedAt: string;
  role: string;
  content: string | null;
  name?: string | null | undefined;
  links?: Array<SupportCopilotMessageLinks> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: SupportCopilotMessageUserProperties | null | undefined;
};

/** @internal */
export const SupportCopilotMessageType$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType
> = z.nativeEnum(SupportCopilotMessageType);

/** @internal */
export const SupportCopilotMessageType$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType
> = SupportCopilotMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageType$ {
  /** @deprecated use `SupportCopilotMessageType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageType$inboundSchema;
  /** @deprecated use `SupportCopilotMessageType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageType$outboundSchema;
}

/** @internal */
export const SupportCopilotMessageType1$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType1
> = z.nativeEnum(SupportCopilotMessageType1);

/** @internal */
export const SupportCopilotMessageType1$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType1
> = SupportCopilotMessageType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageType1$ {
  /** @deprecated use `SupportCopilotMessageType1$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageType1$inboundSchema;
  /** @deprecated use `SupportCopilotMessageType1$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageType1$outboundSchema;
}

/** @internal */
export const SupportCopilotMessageLinksType$inboundSchema: z.ZodType<
  SupportCopilotMessageLinksType,
  z.ZodTypeDef,
  unknown
> = z.union([SupportCopilotMessageType1$inboundSchema, z.string()]);

/** @internal */
export type SupportCopilotMessageLinksType$Outbound = string | string;

/** @internal */
export const SupportCopilotMessageLinksType$outboundSchema: z.ZodType<
  SupportCopilotMessageLinksType$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageLinksType
> = z.union([SupportCopilotMessageType1$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageLinksType$ {
  /** @deprecated use `SupportCopilotMessageLinksType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageLinksType$inboundSchema;
  /** @deprecated use `SupportCopilotMessageLinksType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageLinksType$outboundSchema;
  /** @deprecated use `SupportCopilotMessageLinksType$Outbound` instead. */
  export type Outbound = SupportCopilotMessageLinksType$Outbound;
}

export function supportCopilotMessageLinksTypeToJSON(
  supportCopilotMessageLinksType: SupportCopilotMessageLinksType,
): string {
  return JSON.stringify(
    SupportCopilotMessageLinksType$outboundSchema.parse(
      supportCopilotMessageLinksType,
    ),
  );
}

export function supportCopilotMessageLinksTypeFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageLinksType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageLinksType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageLinksType' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageLinks$inboundSchema: z.ZodType<
  SupportCopilotMessageLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([SupportCopilotMessageType1$inboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type SupportCopilotMessageLinks$Outbound = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

/** @internal */
export const SupportCopilotMessageLinks$outboundSchema: z.ZodType<
  SupportCopilotMessageLinks$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageLinks
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([SupportCopilotMessageType1$outboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageLinks$ {
  /** @deprecated use `SupportCopilotMessageLinks$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageLinks$inboundSchema;
  /** @deprecated use `SupportCopilotMessageLinks$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageLinks$outboundSchema;
  /** @deprecated use `SupportCopilotMessageLinks$Outbound` instead. */
  export type Outbound = SupportCopilotMessageLinks$Outbound;
}

export function supportCopilotMessageLinksToJSON(
  supportCopilotMessageLinks: SupportCopilotMessageLinks,
): string {
  return JSON.stringify(
    SupportCopilotMessageLinks$outboundSchema.parse(supportCopilotMessageLinks),
  );
}

export function supportCopilotMessageLinksFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageLinks' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageId$inboundSchema: z.ZodType<
  SupportCopilotMessageId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SupportCopilotMessageId$Outbound = string | number;

/** @internal */
export const SupportCopilotMessageId$outboundSchema: z.ZodType<
  SupportCopilotMessageId$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageId$ {
  /** @deprecated use `SupportCopilotMessageId$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageId$inboundSchema;
  /** @deprecated use `SupportCopilotMessageId$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageId$outboundSchema;
  /** @deprecated use `SupportCopilotMessageId$Outbound` instead. */
  export type Outbound = SupportCopilotMessageId$Outbound;
}

export function supportCopilotMessageIdToJSON(
  supportCopilotMessageId: SupportCopilotMessageId,
): string {
  return JSON.stringify(
    SupportCopilotMessageId$outboundSchema.parse(supportCopilotMessageId),
  );
}

export function supportCopilotMessageIdFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageId' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageUserId$inboundSchema: z.ZodType<
  SupportCopilotMessageUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type SupportCopilotMessageUserId$Outbound = string | number;

/** @internal */
export const SupportCopilotMessageUserId$outboundSchema: z.ZodType<
  SupportCopilotMessageUserId$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageUserId$ {
  /** @deprecated use `SupportCopilotMessageUserId$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageUserId$inboundSchema;
  /** @deprecated use `SupportCopilotMessageUserId$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageUserId$outboundSchema;
  /** @deprecated use `SupportCopilotMessageUserId$Outbound` instead. */
  export type Outbound = SupportCopilotMessageUserId$Outbound;
}

export function supportCopilotMessageUserIdToJSON(
  supportCopilotMessageUserId: SupportCopilotMessageUserId,
): string {
  return JSON.stringify(
    SupportCopilotMessageUserId$outboundSchema.parse(
      supportCopilotMessageUserId,
    ),
  );
}

export function supportCopilotMessageUserIdFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageUserId' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageUserType$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageUserType
> = z.nativeEnum(SupportCopilotMessageUserType);

/** @internal */
export const SupportCopilotMessageUserType$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageUserType
> = SupportCopilotMessageUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageUserType$ {
  /** @deprecated use `SupportCopilotMessageUserType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageUserType$inboundSchema;
  /** @deprecated use `SupportCopilotMessageUserType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageUserType$outboundSchema;
}

/** @internal */
export const SupportCopilotMessageUserProperties$inboundSchema: z.ZodType<
  SupportCopilotMessageUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(SupportCopilotMessageUserType$inboundSchema)
      .optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type SupportCopilotMessageUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SupportCopilotMessageUserProperties$outboundSchema: z.ZodType<
  SupportCopilotMessageUserProperties$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(SupportCopilotMessageUserType$outboundSchema).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageUserProperties$ {
  /** @deprecated use `SupportCopilotMessageUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotMessageUserProperties$inboundSchema;
  /** @deprecated use `SupportCopilotMessageUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotMessageUserProperties$outboundSchema;
  /** @deprecated use `SupportCopilotMessageUserProperties$Outbound` instead. */
  export type Outbound = SupportCopilotMessageUserProperties$Outbound;
}

export function supportCopilotMessageUserPropertiesToJSON(
  supportCopilotMessageUserProperties: SupportCopilotMessageUserProperties,
): string {
  return JSON.stringify(
    SupportCopilotMessageUserProperties$outboundSchema.parse(
      supportCopilotMessageUserProperties,
    ),
  );
}

export function supportCopilotMessageUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SupportCopilotMessageUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageUserProperties' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessage$inboundSchema: z.ZodType<
  SupportCopilotMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: SupportCopilotMessageType$inboundSchema,
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  conversationId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: z.string(),
  content: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(
    z.array(z.lazy(() => SupportCopilotMessageLinks$inboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotMessageUserProperties$inboundSchema),
  ).optional(),
});

/** @internal */
export type SupportCopilotMessage$Outbound = {
  id: string;
  type: string;
  externalId: string | null;
  externalUrl: string | null;
  conversationId: string;
  createdAt: string;
  updatedAt: string;
  role: string;
  content: string | null;
  name?: string | null | undefined;
  links?: Array<SupportCopilotMessageLinks$Outbound> | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?:
    | SupportCopilotMessageUserProperties$Outbound
    | null
    | undefined;
};

/** @internal */
export const SupportCopilotMessage$outboundSchema: z.ZodType<
  SupportCopilotMessage$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessage
> = z.object({
  id: z.string(),
  type: SupportCopilotMessageType$outboundSchema,
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  conversationId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: z.string(),
  content: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(
    z.array(z.lazy(() => SupportCopilotMessageLinks$outboundSchema)),
  ).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotMessageUserProperties$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessage$ {
  /** @deprecated use `SupportCopilotMessage$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessage$inboundSchema;
  /** @deprecated use `SupportCopilotMessage$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessage$outboundSchema;
  /** @deprecated use `SupportCopilotMessage$Outbound` instead. */
  export type Outbound = SupportCopilotMessage$Outbound;
}

export function supportCopilotMessageToJSON(
  supportCopilotMessage: SupportCopilotMessage,
): string {
  return JSON.stringify(
    SupportCopilotMessage$outboundSchema.parse(supportCopilotMessage),
  );
}

export function supportCopilotMessageFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessage' from JSON`,
  );
}
