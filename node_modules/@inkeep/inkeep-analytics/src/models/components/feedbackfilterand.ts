/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedbackFilter,
  FeedbackFilter$inboundSchema,
  FeedbackFilter$Outbound,
  FeedbackFilter$outboundSchema,
} from "./feedbackfilter.js";

export type FeedbackFilterANDAND = FeedbackFilter;

/**
 * FeedbackFilter AND operator
 */
export type FeedbackFilterAND = {
  /**
   * FeedbackFilter AND condition
   */
  and: Array<FeedbackFilter>;
};

/** @internal */
export const FeedbackFilterANDAND$inboundSchema: z.ZodType<
  FeedbackFilterANDAND,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => FeedbackFilter$inboundSchema);

/** @internal */
export type FeedbackFilterANDAND$Outbound = FeedbackFilter$Outbound;

/** @internal */
export const FeedbackFilterANDAND$outboundSchema: z.ZodType<
  FeedbackFilterANDAND$Outbound,
  z.ZodTypeDef,
  FeedbackFilterANDAND
> = z.lazy(() => FeedbackFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterANDAND$ {
  /** @deprecated use `FeedbackFilterANDAND$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterANDAND$inboundSchema;
  /** @deprecated use `FeedbackFilterANDAND$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterANDAND$outboundSchema;
  /** @deprecated use `FeedbackFilterANDAND$Outbound` instead. */
  export type Outbound = FeedbackFilterANDAND$Outbound;
}

export function feedbackFilterANDANDToJSON(
  feedbackFilterANDAND: FeedbackFilterANDAND,
): string {
  return JSON.stringify(
    FeedbackFilterANDAND$outboundSchema.parse(feedbackFilterANDAND),
  );
}

export function feedbackFilterANDANDFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterANDAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterANDAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterANDAND' from JSON`,
  );
}

/** @internal */
export const FeedbackFilterAND$inboundSchema: z.ZodType<
  FeedbackFilterAND,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(z.lazy(() => FeedbackFilter$inboundSchema)),
});

/** @internal */
export type FeedbackFilterAND$Outbound = {
  and: Array<FeedbackFilter$Outbound>;
};

/** @internal */
export const FeedbackFilterAND$outboundSchema: z.ZodType<
  FeedbackFilterAND$Outbound,
  z.ZodTypeDef,
  FeedbackFilterAND
> = z.object({
  and: z.array(z.lazy(() => FeedbackFilter$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackFilterAND$ {
  /** @deprecated use `FeedbackFilterAND$inboundSchema` instead. */
  export const inboundSchema = FeedbackFilterAND$inboundSchema;
  /** @deprecated use `FeedbackFilterAND$outboundSchema` instead. */
  export const outboundSchema = FeedbackFilterAND$outboundSchema;
  /** @deprecated use `FeedbackFilterAND$Outbound` instead. */
  export type Outbound = FeedbackFilterAND$Outbound;
}

export function feedbackFilterANDToJSON(
  feedbackFilterAND: FeedbackFilterAND,
): string {
  return JSON.stringify(
    FeedbackFilterAND$outboundSchema.parse(feedbackFilterAND),
  );
}

export function feedbackFilterANDFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackFilterAND, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackFilterAND$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackFilterAND' from JSON`,
  );
}
