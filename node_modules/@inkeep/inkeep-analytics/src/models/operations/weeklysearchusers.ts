/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WeeklySearchUsersRequest = {
  after?: string | undefined;
  projectId?: string | undefined;
};

export type WeeklySearchUsersResult = {
  week: string;
  uniqueUsers: string;
};

export type WeeklySearchUsersData = {
  result: Array<WeeklySearchUsersResult>;
  total: number;
};

/**
 * Weekly search users
 */
export type WeeklySearchUsersResponseBody = {
  data: WeeklySearchUsersData;
};

/** @internal */
export const WeeklySearchUsersRequest$inboundSchema: z.ZodType<
  WeeklySearchUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  project_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type WeeklySearchUsersRequest$Outbound = {
  after?: string | undefined;
  project_id?: string | undefined;
};

/** @internal */
export const WeeklySearchUsersRequest$outboundSchema: z.ZodType<
  WeeklySearchUsersRequest$Outbound,
  z.ZodTypeDef,
  WeeklySearchUsersRequest
> = z.object({
  after: z.string().optional(),
  projectId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklySearchUsersRequest$ {
  /** @deprecated use `WeeklySearchUsersRequest$inboundSchema` instead. */
  export const inboundSchema = WeeklySearchUsersRequest$inboundSchema;
  /** @deprecated use `WeeklySearchUsersRequest$outboundSchema` instead. */
  export const outboundSchema = WeeklySearchUsersRequest$outboundSchema;
  /** @deprecated use `WeeklySearchUsersRequest$Outbound` instead. */
  export type Outbound = WeeklySearchUsersRequest$Outbound;
}

export function weeklySearchUsersRequestToJSON(
  weeklySearchUsersRequest: WeeklySearchUsersRequest,
): string {
  return JSON.stringify(
    WeeklySearchUsersRequest$outboundSchema.parse(weeklySearchUsersRequest),
  );
}

export function weeklySearchUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<WeeklySearchUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeeklySearchUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklySearchUsersRequest' from JSON`,
  );
}

/** @internal */
export const WeeklySearchUsersResult$inboundSchema: z.ZodType<
  WeeklySearchUsersResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  week: z.string(),
  unique_users: z.string(),
}).transform((v) => {
  return remap$(v, {
    "unique_users": "uniqueUsers",
  });
});

/** @internal */
export type WeeklySearchUsersResult$Outbound = {
  week: string;
  unique_users: string;
};

/** @internal */
export const WeeklySearchUsersResult$outboundSchema: z.ZodType<
  WeeklySearchUsersResult$Outbound,
  z.ZodTypeDef,
  WeeklySearchUsersResult
> = z.object({
  week: z.string(),
  uniqueUsers: z.string(),
}).transform((v) => {
  return remap$(v, {
    uniqueUsers: "unique_users",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklySearchUsersResult$ {
  /** @deprecated use `WeeklySearchUsersResult$inboundSchema` instead. */
  export const inboundSchema = WeeklySearchUsersResult$inboundSchema;
  /** @deprecated use `WeeklySearchUsersResult$outboundSchema` instead. */
  export const outboundSchema = WeeklySearchUsersResult$outboundSchema;
  /** @deprecated use `WeeklySearchUsersResult$Outbound` instead. */
  export type Outbound = WeeklySearchUsersResult$Outbound;
}

export function weeklySearchUsersResultToJSON(
  weeklySearchUsersResult: WeeklySearchUsersResult,
): string {
  return JSON.stringify(
    WeeklySearchUsersResult$outboundSchema.parse(weeklySearchUsersResult),
  );
}

export function weeklySearchUsersResultFromJSON(
  jsonString: string,
): SafeParseResult<WeeklySearchUsersResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeeklySearchUsersResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklySearchUsersResult' from JSON`,
  );
}

/** @internal */
export const WeeklySearchUsersData$inboundSchema: z.ZodType<
  WeeklySearchUsersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: z.array(z.lazy(() => WeeklySearchUsersResult$inboundSchema)),
  total: z.number(),
});

/** @internal */
export type WeeklySearchUsersData$Outbound = {
  result: Array<WeeklySearchUsersResult$Outbound>;
  total: number;
};

/** @internal */
export const WeeklySearchUsersData$outboundSchema: z.ZodType<
  WeeklySearchUsersData$Outbound,
  z.ZodTypeDef,
  WeeklySearchUsersData
> = z.object({
  result: z.array(z.lazy(() => WeeklySearchUsersResult$outboundSchema)),
  total: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklySearchUsersData$ {
  /** @deprecated use `WeeklySearchUsersData$inboundSchema` instead. */
  export const inboundSchema = WeeklySearchUsersData$inboundSchema;
  /** @deprecated use `WeeklySearchUsersData$outboundSchema` instead. */
  export const outboundSchema = WeeklySearchUsersData$outboundSchema;
  /** @deprecated use `WeeklySearchUsersData$Outbound` instead. */
  export type Outbound = WeeklySearchUsersData$Outbound;
}

export function weeklySearchUsersDataToJSON(
  weeklySearchUsersData: WeeklySearchUsersData,
): string {
  return JSON.stringify(
    WeeklySearchUsersData$outboundSchema.parse(weeklySearchUsersData),
  );
}

export function weeklySearchUsersDataFromJSON(
  jsonString: string,
): SafeParseResult<WeeklySearchUsersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeeklySearchUsersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklySearchUsersData' from JSON`,
  );
}

/** @internal */
export const WeeklySearchUsersResponseBody$inboundSchema: z.ZodType<
  WeeklySearchUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => WeeklySearchUsersData$inboundSchema),
});

/** @internal */
export type WeeklySearchUsersResponseBody$Outbound = {
  data: WeeklySearchUsersData$Outbound;
};

/** @internal */
export const WeeklySearchUsersResponseBody$outboundSchema: z.ZodType<
  WeeklySearchUsersResponseBody$Outbound,
  z.ZodTypeDef,
  WeeklySearchUsersResponseBody
> = z.object({
  data: z.lazy(() => WeeklySearchUsersData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklySearchUsersResponseBody$ {
  /** @deprecated use `WeeklySearchUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema = WeeklySearchUsersResponseBody$inboundSchema;
  /** @deprecated use `WeeklySearchUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema = WeeklySearchUsersResponseBody$outboundSchema;
  /** @deprecated use `WeeklySearchUsersResponseBody$Outbound` instead. */
  export type Outbound = WeeklySearchUsersResponseBody$Outbound;
}

export function weeklySearchUsersResponseBodyToJSON(
  weeklySearchUsersResponseBody: WeeklySearchUsersResponseBody,
): string {
  return JSON.stringify(
    WeeklySearchUsersResponseBody$outboundSchema.parse(
      weeklySearchUsersResponseBody,
    ),
  );
}

export function weeklySearchUsersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<WeeklySearchUsersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeeklySearchUsersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklySearchUsersResponseBody' from JSON`,
  );
}
