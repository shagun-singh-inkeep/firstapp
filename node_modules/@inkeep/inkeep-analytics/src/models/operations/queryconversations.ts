/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type QueryConversationsSecurity = {
  webIntegrationKey?: string | undefined;
  apiIntegrationKey?: string | undefined;
};

/** @internal */
export const QueryConversationsSecurity$inboundSchema: z.ZodType<
  QueryConversationsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  WebIntegrationKey: z.string().optional(),
  ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "WebIntegrationKey": "webIntegrationKey",
    "ApiIntegrationKey": "apiIntegrationKey",
  });
});

/** @internal */
export type QueryConversationsSecurity$Outbound = {
  WebIntegrationKey?: string | undefined;
  ApiIntegrationKey?: string | undefined;
};

/** @internal */
export const QueryConversationsSecurity$outboundSchema: z.ZodType<
  QueryConversationsSecurity$Outbound,
  z.ZodTypeDef,
  QueryConversationsSecurity
> = z.object({
  webIntegrationKey: z.string().optional(),
  apiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    webIntegrationKey: "WebIntegrationKey",
    apiIntegrationKey: "ApiIntegrationKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryConversationsSecurity$ {
  /** @deprecated use `QueryConversationsSecurity$inboundSchema` instead. */
  export const inboundSchema = QueryConversationsSecurity$inboundSchema;
  /** @deprecated use `QueryConversationsSecurity$outboundSchema` instead. */
  export const outboundSchema = QueryConversationsSecurity$outboundSchema;
  /** @deprecated use `QueryConversationsSecurity$Outbound` instead. */
  export type Outbound = QueryConversationsSecurity$Outbound;
}

export function queryConversationsSecurityToJSON(
  queryConversationsSecurity: QueryConversationsSecurity,
): string {
  return JSON.stringify(
    QueryConversationsSecurity$outboundSchema.parse(queryConversationsSecurity),
  );
}

export function queryConversationsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<QueryConversationsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryConversationsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryConversationsSecurity' from JSON`,
  );
}
