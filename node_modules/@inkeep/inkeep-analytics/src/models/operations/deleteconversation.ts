/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteConversationSecurity = {
  webIntegrationKey?: string | undefined;
  apiIntegrationKey?: string | undefined;
};

export type DeleteConversationRequest = {
  id: string;
};

/**
 * Conversation deleted successfully
 */
export type DeleteConversationResponseBody = {
  success: boolean;
  message: string;
};

/** @internal */
export const DeleteConversationSecurity$inboundSchema: z.ZodType<
  DeleteConversationSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  WebIntegrationKey: z.string().optional(),
  ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "WebIntegrationKey": "webIntegrationKey",
    "ApiIntegrationKey": "apiIntegrationKey",
  });
});

/** @internal */
export type DeleteConversationSecurity$Outbound = {
  WebIntegrationKey?: string | undefined;
  ApiIntegrationKey?: string | undefined;
};

/** @internal */
export const DeleteConversationSecurity$outboundSchema: z.ZodType<
  DeleteConversationSecurity$Outbound,
  z.ZodTypeDef,
  DeleteConversationSecurity
> = z.object({
  webIntegrationKey: z.string().optional(),
  apiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    webIntegrationKey: "WebIntegrationKey",
    apiIntegrationKey: "ApiIntegrationKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConversationSecurity$ {
  /** @deprecated use `DeleteConversationSecurity$inboundSchema` instead. */
  export const inboundSchema = DeleteConversationSecurity$inboundSchema;
  /** @deprecated use `DeleteConversationSecurity$outboundSchema` instead. */
  export const outboundSchema = DeleteConversationSecurity$outboundSchema;
  /** @deprecated use `DeleteConversationSecurity$Outbound` instead. */
  export type Outbound = DeleteConversationSecurity$Outbound;
}

export function deleteConversationSecurityToJSON(
  deleteConversationSecurity: DeleteConversationSecurity,
): string {
  return JSON.stringify(
    DeleteConversationSecurity$outboundSchema.parse(deleteConversationSecurity),
  );
}

export function deleteConversationSecurityFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConversationSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteConversationSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConversationSecurity' from JSON`,
  );
}

/** @internal */
export const DeleteConversationRequest$inboundSchema: z.ZodType<
  DeleteConversationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteConversationRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteConversationRequest$outboundSchema: z.ZodType<
  DeleteConversationRequest$Outbound,
  z.ZodTypeDef,
  DeleteConversationRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConversationRequest$ {
  /** @deprecated use `DeleteConversationRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteConversationRequest$inboundSchema;
  /** @deprecated use `DeleteConversationRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteConversationRequest$outboundSchema;
  /** @deprecated use `DeleteConversationRequest$Outbound` instead. */
  export type Outbound = DeleteConversationRequest$Outbound;
}

export function deleteConversationRequestToJSON(
  deleteConversationRequest: DeleteConversationRequest,
): string {
  return JSON.stringify(
    DeleteConversationRequest$outboundSchema.parse(deleteConversationRequest),
  );
}

export function deleteConversationRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConversationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteConversationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConversationRequest' from JSON`,
  );
}

/** @internal */
export const DeleteConversationResponseBody$inboundSchema: z.ZodType<
  DeleteConversationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  message: z.string(),
});

/** @internal */
export type DeleteConversationResponseBody$Outbound = {
  success: boolean;
  message: string;
};

/** @internal */
export const DeleteConversationResponseBody$outboundSchema: z.ZodType<
  DeleteConversationResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteConversationResponseBody
> = z.object({
  success: z.boolean(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConversationResponseBody$ {
  /** @deprecated use `DeleteConversationResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteConversationResponseBody$inboundSchema;
  /** @deprecated use `DeleteConversationResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteConversationResponseBody$outboundSchema;
  /** @deprecated use `DeleteConversationResponseBody$Outbound` instead. */
  export type Outbound = DeleteConversationResponseBody$Outbound;
}

export function deleteConversationResponseBodyToJSON(
  deleteConversationResponseBody: DeleteConversationResponseBody,
): string {
  return JSON.stringify(
    DeleteConversationResponseBody$outboundSchema.parse(
      deleteConversationResponseBody,
    ),
  );
}

export function deleteConversationResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConversationResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteConversationResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConversationResponseBody' from JSON`,
  );
}
