/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type QueryEventsSecurity = {
  webIntegrationKey?: string | undefined;
  apiIntegrationKey?: string | undefined;
};

/** @internal */
export const QueryEventsSecurity$inboundSchema: z.ZodType<
  QueryEventsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  WebIntegrationKey: z.string().optional(),
  ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "WebIntegrationKey": "webIntegrationKey",
    "ApiIntegrationKey": "apiIntegrationKey",
  });
});

/** @internal */
export type QueryEventsSecurity$Outbound = {
  WebIntegrationKey?: string | undefined;
  ApiIntegrationKey?: string | undefined;
};

/** @internal */
export const QueryEventsSecurity$outboundSchema: z.ZodType<
  QueryEventsSecurity$Outbound,
  z.ZodTypeDef,
  QueryEventsSecurity
> = z.object({
  webIntegrationKey: z.string().optional(),
  apiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    webIntegrationKey: "WebIntegrationKey",
    apiIntegrationKey: "ApiIntegrationKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryEventsSecurity$ {
  /** @deprecated use `QueryEventsSecurity$inboundSchema` instead. */
  export const inboundSchema = QueryEventsSecurity$inboundSchema;
  /** @deprecated use `QueryEventsSecurity$outboundSchema` instead. */
  export const outboundSchema = QueryEventsSecurity$outboundSchema;
  /** @deprecated use `QueryEventsSecurity$Outbound` instead. */
  export type Outbound = QueryEventsSecurity$Outbound;
}

export function queryEventsSecurityToJSON(
  queryEventsSecurity: QueryEventsSecurity,
): string {
  return JSON.stringify(
    QueryEventsSecurity$outboundSchema.parse(queryEventsSecurity),
  );
}

export function queryEventsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<QueryEventsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryEventsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryEventsSecurity' from JSON`,
  );
}
