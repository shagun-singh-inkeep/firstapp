/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopSearchQueriesRequest = {
  after?: string | undefined;
  projectId?: string | undefined;
};

export type Result = {
  searchQuery: string;
  count: string;
};

export type Data = {
  result: Array<Result>;
  total: number;
};

/**
 * Top search queries
 */
export type TopSearchQueriesResponseBody = {
  data: Data;
};

/** @internal */
export const TopSearchQueriesRequest$inboundSchema: z.ZodType<
  TopSearchQueriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  project_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type TopSearchQueriesRequest$Outbound = {
  after?: string | undefined;
  project_id?: string | undefined;
};

/** @internal */
export const TopSearchQueriesRequest$outboundSchema: z.ZodType<
  TopSearchQueriesRequest$Outbound,
  z.ZodTypeDef,
  TopSearchQueriesRequest
> = z.object({
  after: z.string().optional(),
  projectId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopSearchQueriesRequest$ {
  /** @deprecated use `TopSearchQueriesRequest$inboundSchema` instead. */
  export const inboundSchema = TopSearchQueriesRequest$inboundSchema;
  /** @deprecated use `TopSearchQueriesRequest$outboundSchema` instead. */
  export const outboundSchema = TopSearchQueriesRequest$outboundSchema;
  /** @deprecated use `TopSearchQueriesRequest$Outbound` instead. */
  export type Outbound = TopSearchQueriesRequest$Outbound;
}

export function topSearchQueriesRequestToJSON(
  topSearchQueriesRequest: TopSearchQueriesRequest,
): string {
  return JSON.stringify(
    TopSearchQueriesRequest$outboundSchema.parse(topSearchQueriesRequest),
  );
}

export function topSearchQueriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<TopSearchQueriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopSearchQueriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopSearchQueriesRequest' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    search_query: z.string(),
    count: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "search_query": "searchQuery",
    });
  });

/** @internal */
export type Result$Outbound = {
  search_query: string;
  count: string;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  searchQuery: z.string(),
  count: z.string(),
}).transform((v) => {
  return remap$(v, {
    searchQuery: "search_query",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    result: z.array(z.lazy(() => Result$inboundSchema)),
    total: z.number(),
  });

/** @internal */
export type Data$Outbound = {
  result: Array<Result$Outbound>;
  total: number;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    result: z.array(z.lazy(() => Result$outboundSchema)),
    total: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const TopSearchQueriesResponseBody$inboundSchema: z.ZodType<
  TopSearchQueriesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type TopSearchQueriesResponseBody$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const TopSearchQueriesResponseBody$outboundSchema: z.ZodType<
  TopSearchQueriesResponseBody$Outbound,
  z.ZodTypeDef,
  TopSearchQueriesResponseBody
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopSearchQueriesResponseBody$ {
  /** @deprecated use `TopSearchQueriesResponseBody$inboundSchema` instead. */
  export const inboundSchema = TopSearchQueriesResponseBody$inboundSchema;
  /** @deprecated use `TopSearchQueriesResponseBody$outboundSchema` instead. */
  export const outboundSchema = TopSearchQueriesResponseBody$outboundSchema;
  /** @deprecated use `TopSearchQueriesResponseBody$Outbound` instead. */
  export type Outbound = TopSearchQueriesResponseBody$Outbound;
}

export function topSearchQueriesResponseBodyToJSON(
  topSearchQueriesResponseBody: TopSearchQueriesResponseBody,
): string {
  return JSON.stringify(
    TopSearchQueriesResponseBody$outboundSchema.parse(
      topSearchQueriesResponseBody,
    ),
  );
}

export function topSearchQueriesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TopSearchQueriesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopSearchQueriesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopSearchQueriesResponseBody' from JSON`,
  );
}
