/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Positive: "positive",
  Negative: "negative",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type Reasons = {
  label: string;
  details: string;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type Id = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type UserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const UserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type UserType = ClosedEnum<typeof UserType>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type UserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: UserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * Note: The maximum size of the request body is 2 MB.
 */
export type LogFeedbackRequestBody = {
  id?: string | undefined;
  type: Type;
  messageId: string;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  reasons?: Array<Reasons> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: UserProperties | null | undefined;
};

export const LogFeedbackType = {
  Positive: "positive",
  Negative: "negative",
} as const;
export type LogFeedbackType = ClosedEnum<typeof LogFeedbackType>;

export type LogFeedbackReasons = {
  label: string;
  details: string;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type LogFeedbackId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type LogFeedbackUserId = string | number;

/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export const LogFeedbackUserType = {
  User: "user",
  Member: "member",
} as const;
/**
 * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type LogFeedbackUserType = ClosedEnum<typeof LogFeedbackUserType>;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type LogFeedbackUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: LogFeedbackUserType | null | undefined;
  additionalProperties?: { [k: string]: any };
};

/**
 * Feedback provided successfully
 */
export type LogFeedbackResponseBody = {
  id: string;
  type: LogFeedbackType;
  messageId: string;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  reasons?: Array<LogFeedbackReasons> | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: LogFeedbackUserProperties | null | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Reasons$inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown> =
  z.object({
    label: z.string(),
    details: z.string(),
  });

/** @internal */
export type Reasons$Outbound = {
  label: string;
  details: string;
};

/** @internal */
export const Reasons$outboundSchema: z.ZodType<
  Reasons$Outbound,
  z.ZodTypeDef,
  Reasons
> = z.object({
  label: z.string(),
  details: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reasons$ {
  /** @deprecated use `Reasons$inboundSchema` instead. */
  export const inboundSchema = Reasons$inboundSchema;
  /** @deprecated use `Reasons$outboundSchema` instead. */
  export const outboundSchema = Reasons$outboundSchema;
  /** @deprecated use `Reasons$Outbound` instead. */
  export type Outbound = Reasons$Outbound;
}

export function reasonsToJSON(reasons: Reasons): string {
  return JSON.stringify(Reasons$outboundSchema.parse(reasons));
}

export function reasonsFromJSON(
  jsonString: string,
): SafeParseResult<Reasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reasons' from JSON`,
  );
}

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.union([
  z.string(),
  z.number(),
]);

/** @internal */
export type Id$Outbound = string | number;

/** @internal */
export const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id> = z
  .union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
  /** @deprecated use `Id$Outbound` instead. */
  export type Outbound = Id$Outbound;
}

export function idToJSON(id: Id): string {
  return JSON.stringify(Id$outboundSchema.parse(id));
}

export function idFromJSON(
  jsonString: string,
): SafeParseResult<Id, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Id$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Id' from JSON`,
  );
}

/** @internal */
export const UserId$inboundSchema: z.ZodType<UserId, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type UserId$Outbound = string | number;

/** @internal */
export const UserId$outboundSchema: z.ZodType<
  UserId$Outbound,
  z.ZodTypeDef,
  UserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserId$ {
  /** @deprecated use `UserId$inboundSchema` instead. */
  export const inboundSchema = UserId$inboundSchema;
  /** @deprecated use `UserId$outboundSchema` instead. */
  export const outboundSchema = UserId$outboundSchema;
  /** @deprecated use `UserId$Outbound` instead. */
  export type Outbound = UserId$Outbound;
}

export function userIdToJSON(userId: UserId): string {
  return JSON.stringify(UserId$outboundSchema.parse(userId));
}

export function userIdFromJSON(
  jsonString: string,
): SafeParseResult<UserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserId' from JSON`,
  );
}

/** @internal */
export const UserType$inboundSchema: z.ZodNativeEnum<typeof UserType> = z
  .nativeEnum(UserType);

/** @internal */
export const UserType$outboundSchema: z.ZodNativeEnum<typeof UserType> =
  UserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserType$ {
  /** @deprecated use `UserType$inboundSchema` instead. */
  export const inboundSchema = UserType$inboundSchema;
  /** @deprecated use `UserType$outboundSchema` instead. */
  export const outboundSchema = UserType$outboundSchema;
}

/** @internal */
export const UserProperties$inboundSchema: z.ZodType<
  UserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(UserType$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type UserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const UserProperties$outboundSchema: z.ZodType<
  UserProperties$Outbound,
  z.ZodTypeDef,
  UserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(UserType$outboundSchema).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserProperties$ {
  /** @deprecated use `UserProperties$inboundSchema` instead. */
  export const inboundSchema = UserProperties$inboundSchema;
  /** @deprecated use `UserProperties$outboundSchema` instead. */
  export const outboundSchema = UserProperties$outboundSchema;
  /** @deprecated use `UserProperties$Outbound` instead. */
  export type Outbound = UserProperties$Outbound;
}

export function userPropertiesToJSON(userProperties: UserProperties): string {
  return JSON.stringify(UserProperties$outboundSchema.parse(userProperties));
}

export function userPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<UserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserProperties' from JSON`,
  );
}

/** @internal */
export const LogFeedbackRequestBody$inboundSchema: z.ZodType<
  LogFeedbackRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: Type$inboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reasons: z.nullable(z.array(z.lazy(() => Reasons$inboundSchema))).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(z.lazy(() => UserProperties$inboundSchema))
    .optional(),
});

/** @internal */
export type LogFeedbackRequestBody$Outbound = {
  id?: string | undefined;
  type: string;
  messageId: string;
  createdAt?: string | null | undefined;
  reasons?: Array<Reasons$Outbound> | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?: UserProperties$Outbound | null | undefined;
};

/** @internal */
export const LogFeedbackRequestBody$outboundSchema: z.ZodType<
  LogFeedbackRequestBody$Outbound,
  z.ZodTypeDef,
  LogFeedbackRequestBody
> = z.object({
  id: z.string().optional(),
  type: Type$outboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reasons: z.nullable(z.array(z.lazy(() => Reasons$outboundSchema))).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(z.lazy(() => UserProperties$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackRequestBody$ {
  /** @deprecated use `LogFeedbackRequestBody$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackRequestBody$inboundSchema;
  /** @deprecated use `LogFeedbackRequestBody$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackRequestBody$outboundSchema;
  /** @deprecated use `LogFeedbackRequestBody$Outbound` instead. */
  export type Outbound = LogFeedbackRequestBody$Outbound;
}

export function logFeedbackRequestBodyToJSON(
  logFeedbackRequestBody: LogFeedbackRequestBody,
): string {
  return JSON.stringify(
    LogFeedbackRequestBody$outboundSchema.parse(logFeedbackRequestBody),
  );
}

export function logFeedbackRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<LogFeedbackRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogFeedbackRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogFeedbackRequestBody' from JSON`,
  );
}

/** @internal */
export const LogFeedbackType$inboundSchema: z.ZodNativeEnum<
  typeof LogFeedbackType
> = z.nativeEnum(LogFeedbackType);

/** @internal */
export const LogFeedbackType$outboundSchema: z.ZodNativeEnum<
  typeof LogFeedbackType
> = LogFeedbackType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackType$ {
  /** @deprecated use `LogFeedbackType$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackType$inboundSchema;
  /** @deprecated use `LogFeedbackType$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackType$outboundSchema;
}

/** @internal */
export const LogFeedbackReasons$inboundSchema: z.ZodType<
  LogFeedbackReasons,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  details: z.string(),
});

/** @internal */
export type LogFeedbackReasons$Outbound = {
  label: string;
  details: string;
};

/** @internal */
export const LogFeedbackReasons$outboundSchema: z.ZodType<
  LogFeedbackReasons$Outbound,
  z.ZodTypeDef,
  LogFeedbackReasons
> = z.object({
  label: z.string(),
  details: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackReasons$ {
  /** @deprecated use `LogFeedbackReasons$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackReasons$inboundSchema;
  /** @deprecated use `LogFeedbackReasons$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackReasons$outboundSchema;
  /** @deprecated use `LogFeedbackReasons$Outbound` instead. */
  export type Outbound = LogFeedbackReasons$Outbound;
}

export function logFeedbackReasonsToJSON(
  logFeedbackReasons: LogFeedbackReasons,
): string {
  return JSON.stringify(
    LogFeedbackReasons$outboundSchema.parse(logFeedbackReasons),
  );
}

export function logFeedbackReasonsFromJSON(
  jsonString: string,
): SafeParseResult<LogFeedbackReasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogFeedbackReasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogFeedbackReasons' from JSON`,
  );
}

/** @internal */
export const LogFeedbackId$inboundSchema: z.ZodType<
  LogFeedbackId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type LogFeedbackId$Outbound = string | number;

/** @internal */
export const LogFeedbackId$outboundSchema: z.ZodType<
  LogFeedbackId$Outbound,
  z.ZodTypeDef,
  LogFeedbackId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackId$ {
  /** @deprecated use `LogFeedbackId$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackId$inboundSchema;
  /** @deprecated use `LogFeedbackId$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackId$outboundSchema;
  /** @deprecated use `LogFeedbackId$Outbound` instead. */
  export type Outbound = LogFeedbackId$Outbound;
}

export function logFeedbackIdToJSON(logFeedbackId: LogFeedbackId): string {
  return JSON.stringify(LogFeedbackId$outboundSchema.parse(logFeedbackId));
}

export function logFeedbackIdFromJSON(
  jsonString: string,
): SafeParseResult<LogFeedbackId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogFeedbackId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogFeedbackId' from JSON`,
  );
}

/** @internal */
export const LogFeedbackUserId$inboundSchema: z.ZodType<
  LogFeedbackUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type LogFeedbackUserId$Outbound = string | number;

/** @internal */
export const LogFeedbackUserId$outboundSchema: z.ZodType<
  LogFeedbackUserId$Outbound,
  z.ZodTypeDef,
  LogFeedbackUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackUserId$ {
  /** @deprecated use `LogFeedbackUserId$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackUserId$inboundSchema;
  /** @deprecated use `LogFeedbackUserId$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackUserId$outboundSchema;
  /** @deprecated use `LogFeedbackUserId$Outbound` instead. */
  export type Outbound = LogFeedbackUserId$Outbound;
}

export function logFeedbackUserIdToJSON(
  logFeedbackUserId: LogFeedbackUserId,
): string {
  return JSON.stringify(
    LogFeedbackUserId$outboundSchema.parse(logFeedbackUserId),
  );
}

export function logFeedbackUserIdFromJSON(
  jsonString: string,
): SafeParseResult<LogFeedbackUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogFeedbackUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogFeedbackUserId' from JSON`,
  );
}

/** @internal */
export const LogFeedbackUserType$inboundSchema: z.ZodNativeEnum<
  typeof LogFeedbackUserType
> = z.nativeEnum(LogFeedbackUserType);

/** @internal */
export const LogFeedbackUserType$outboundSchema: z.ZodNativeEnum<
  typeof LogFeedbackUserType
> = LogFeedbackUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackUserType$ {
  /** @deprecated use `LogFeedbackUserType$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackUserType$inboundSchema;
  /** @deprecated use `LogFeedbackUserType$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackUserType$outboundSchema;
}

/** @internal */
export const LogFeedbackUserProperties$inboundSchema: z.ZodType<
  LogFeedbackUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(LogFeedbackUserType$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type LogFeedbackUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const LogFeedbackUserProperties$outboundSchema: z.ZodType<
  LogFeedbackUserProperties$Outbound,
  z.ZodTypeDef,
  LogFeedbackUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(LogFeedbackUserType$outboundSchema).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackUserProperties$ {
  /** @deprecated use `LogFeedbackUserProperties$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackUserProperties$inboundSchema;
  /** @deprecated use `LogFeedbackUserProperties$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackUserProperties$outboundSchema;
  /** @deprecated use `LogFeedbackUserProperties$Outbound` instead. */
  export type Outbound = LogFeedbackUserProperties$Outbound;
}

export function logFeedbackUserPropertiesToJSON(
  logFeedbackUserProperties: LogFeedbackUserProperties,
): string {
  return JSON.stringify(
    LogFeedbackUserProperties$outboundSchema.parse(logFeedbackUserProperties),
  );
}

export function logFeedbackUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<LogFeedbackUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogFeedbackUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogFeedbackUserProperties' from JSON`,
  );
}

/** @internal */
export const LogFeedbackResponseBody$inboundSchema: z.ZodType<
  LogFeedbackResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: LogFeedbackType$inboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  reasons: z.nullable(z.array(z.lazy(() => LogFeedbackReasons$inboundSchema)))
    .optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => LogFeedbackUserProperties$inboundSchema),
  ).optional(),
});

/** @internal */
export type LogFeedbackResponseBody$Outbound = {
  id: string;
  type: string;
  messageId: string;
  createdAt?: string | null | undefined;
  reasons?: Array<LogFeedbackReasons$Outbound> | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?: LogFeedbackUserProperties$Outbound | null | undefined;
};

/** @internal */
export const LogFeedbackResponseBody$outboundSchema: z.ZodType<
  LogFeedbackResponseBody$Outbound,
  z.ZodTypeDef,
  LogFeedbackResponseBody
> = z.object({
  id: z.string(),
  type: LogFeedbackType$outboundSchema,
  messageId: z.string(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  reasons: z.nullable(z.array(z.lazy(() => LogFeedbackReasons$outboundSchema)))
    .optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => LogFeedbackUserProperties$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogFeedbackResponseBody$ {
  /** @deprecated use `LogFeedbackResponseBody$inboundSchema` instead. */
  export const inboundSchema = LogFeedbackResponseBody$inboundSchema;
  /** @deprecated use `LogFeedbackResponseBody$outboundSchema` instead. */
  export const outboundSchema = LogFeedbackResponseBody$outboundSchema;
  /** @deprecated use `LogFeedbackResponseBody$Outbound` instead. */
  export type Outbound = LogFeedbackResponseBody$Outbound;
}

export function logFeedbackResponseBodyToJSON(
  logFeedbackResponseBody: LogFeedbackResponseBody,
): string {
  return JSON.stringify(
    LogFeedbackResponseBody$outboundSchema.parse(logFeedbackResponseBody),
  );
}

export function logFeedbackResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LogFeedbackResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogFeedbackResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogFeedbackResponseBody' from JSON`,
  );
}
