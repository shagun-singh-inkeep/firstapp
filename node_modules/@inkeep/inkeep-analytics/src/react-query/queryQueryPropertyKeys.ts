/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { queryQueryPropertyKeys } from "../funcs/queryQueryPropertyKeys.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type QueryQueryPropertyKeysMutationVariables = {
  request?: components.PropertyKeysRequestBody | undefined;
  options?: RequestOptions;
};

export type QueryQueryPropertyKeysMutationData =
  components.PropertyKeysResponseBody;

/**
 * Query Property Keys
 */
export function useQueryQueryPropertyKeysMutation(
  options?: MutationHookOptions<
    QueryQueryPropertyKeysMutationData,
    Error,
    QueryQueryPropertyKeysMutationVariables
  >,
): UseMutationResult<
  QueryQueryPropertyKeysMutationData,
  Error,
  QueryQueryPropertyKeysMutationVariables
> {
  const client = useInkeepAnalyticsContext();
  return useMutation({
    ...buildQueryQueryPropertyKeysMutation(client, options),
    ...options,
  });
}

export function mutationKeyQueryQueryPropertyKeys(): MutationKey {
  return ["@inkeep/inkeep-analytics", "Query", "queryPropertyKeys"];
}

export function buildQueryQueryPropertyKeysMutation(
  client$: InkeepAnalyticsCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: QueryQueryPropertyKeysMutationVariables,
  ) => Promise<QueryQueryPropertyKeysMutationData>;
} {
  return {
    mutationKey: mutationKeyQueryQueryPropertyKeys(),
    mutationFn: function queryQueryPropertyKeysMutationFn({
      request,
      options,
    }): Promise<QueryQueryPropertyKeysMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(queryQueryPropertyKeys(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
