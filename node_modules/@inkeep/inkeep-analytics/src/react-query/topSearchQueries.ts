/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { topSearchQueries } from "../funcs/topSearchQueries.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TopSearchQueriesQueryData = operations.TopSearchQueriesResponseBody;

/**
 * Top Search Queries
 */
export function useTopSearchQueries(
  request: operations.TopSearchQueriesRequest,
  options?: QueryHookOptions<TopSearchQueriesQueryData>,
): UseQueryResult<TopSearchQueriesQueryData, Error> {
  const client = useInkeepAnalyticsContext();
  return useQuery({
    ...buildTopSearchQueriesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Top Search Queries
 */
export function useTopSearchQueriesSuspense(
  request: operations.TopSearchQueriesRequest,
  options?: SuspenseQueryHookOptions<TopSearchQueriesQueryData>,
): UseSuspenseQueryResult<TopSearchQueriesQueryData, Error> {
  const client = useInkeepAnalyticsContext();
  return useSuspenseQuery({
    ...buildTopSearchQueriesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTopSearchQueries(
  queryClient: QueryClient,
  client$: InkeepAnalyticsCore,
  request: operations.TopSearchQueriesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTopSearchQueriesQuery(
      client$,
      request,
    ),
  });
}

export function setTopSearchQueriesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: { after?: string | undefined; projectId?: string | undefined },
  ],
  data: TopSearchQueriesQueryData,
): TopSearchQueriesQueryData | undefined {
  const key = queryKeyTopSearchQueries(...queryKeyBase);

  return client.setQueryData<TopSearchQueriesQueryData>(key, data);
}

export function invalidateTopSearchQueries(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { after?: string | undefined; projectId?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@inkeep/inkeep-analytics", "topSearchQueries", ...queryKeyBase],
  });
}

export function invalidateAllTopSearchQueries(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@inkeep/inkeep-analytics", "topSearchQueries"],
  });
}

export function buildTopSearchQueriesQuery(
  client$: InkeepAnalyticsCore,
  request: operations.TopSearchQueriesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<TopSearchQueriesQueryData>;
} {
  return {
    queryKey: queryKeyTopSearchQueries({
      after: request.after,
      projectId: request.projectId,
    }),
    queryFn: async function topSearchQueriesQueryFn(
      ctx,
    ): Promise<TopSearchQueriesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(topSearchQueries(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTopSearchQueries(
  parameters: { after?: string | undefined; projectId?: string | undefined },
): QueryKey {
  return ["@inkeep/inkeep-analytics", "topSearchQueries", parameters];
}
