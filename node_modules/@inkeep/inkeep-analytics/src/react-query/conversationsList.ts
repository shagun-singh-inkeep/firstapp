/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { conversationsList } from "../funcs/conversationsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ConversationsListQueryData =
  operations.GetAllConversationResponseBody;

/**
 * Get All Conversations
 */
export function useConversationsList(
  request: operations.GetAllConversationRequest,
  options?: QueryHookOptions<ConversationsListQueryData>,
): UseQueryResult<ConversationsListQueryData, Error> {
  const client = useInkeepAnalyticsContext();
  return useQuery({
    ...buildConversationsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get All Conversations
 */
export function useConversationsListSuspense(
  request: operations.GetAllConversationRequest,
  options?: SuspenseQueryHookOptions<ConversationsListQueryData>,
): UseSuspenseQueryResult<ConversationsListQueryData, Error> {
  const client = useInkeepAnalyticsContext();
  return useSuspenseQuery({
    ...buildConversationsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchConversationsList(
  queryClient: QueryClient,
  client$: InkeepAnalyticsCore,
  request: operations.GetAllConversationRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildConversationsListQuery(
      client$,
      request,
    ),
  });
}

export function setConversationsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      limit?: number | null | undefined;
      offset?: number | null | undefined;
    },
  ],
  data: ConversationsListQueryData,
): ConversationsListQueryData | undefined {
  const key = queryKeyConversationsList(...queryKeyBase);

  return client.setQueryData<ConversationsListQueryData>(key, data);
}

export function invalidateConversationsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      limit?: number | null | undefined;
      offset?: number | null | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@inkeep/inkeep-analytics",
      "conversations",
      "list",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllConversationsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@inkeep/inkeep-analytics", "conversations", "list"],
  });
}

export function buildConversationsListQuery(
  client$: InkeepAnalyticsCore,
  request: operations.GetAllConversationRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ConversationsListQueryData>;
} {
  return {
    queryKey: queryKeyConversationsList({
      limit: request.limit,
      offset: request.offset,
    }),
    queryFn: async function conversationsListQueryFn(
      ctx,
    ): Promise<ConversationsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(conversationsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyConversationsList(
  parameters: {
    limit?: number | null | undefined;
    offset?: number | null | undefined;
  },
): QueryKey {
  return ["@inkeep/inkeep-analytics", "conversations", "list", parameters];
}
