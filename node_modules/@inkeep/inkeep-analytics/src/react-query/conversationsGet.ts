/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { conversationsGet } from "../funcs/conversationsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ConversationsGetQueryData = components.Conversation;

/**
 * Get Conversation
 */
export function useConversationsGet(
  security: operations.GetConversationSecurity,
  request: operations.GetConversationRequest,
  options?: QueryHookOptions<ConversationsGetQueryData>,
): UseQueryResult<ConversationsGetQueryData, Error> {
  const client = useInkeepAnalyticsContext();
  return useQuery({
    ...buildConversationsGetQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get Conversation
 */
export function useConversationsGetSuspense(
  security: operations.GetConversationSecurity,
  request: operations.GetConversationRequest,
  options?: SuspenseQueryHookOptions<ConversationsGetQueryData>,
): UseSuspenseQueryResult<ConversationsGetQueryData, Error> {
  const client = useInkeepAnalyticsContext();
  return useSuspenseQuery({
    ...buildConversationsGetQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchConversationsGet(
  queryClient: QueryClient,
  client$: InkeepAnalyticsCore,
  security: operations.GetConversationSecurity,
  request: operations.GetConversationRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildConversationsGetQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setConversationsGetData(
  client: QueryClient,
  queryKeyBase: [id: string],
  data: ConversationsGetQueryData,
): ConversationsGetQueryData | undefined {
  const key = queryKeyConversationsGet(...queryKeyBase);

  return client.setQueryData<ConversationsGetQueryData>(key, data);
}

export function invalidateConversationsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[id: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@inkeep/inkeep-analytics",
      "conversations",
      "get",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllConversationsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@inkeep/inkeep-analytics", "conversations", "get"],
  });
}

export function buildConversationsGetQuery(
  client$: InkeepAnalyticsCore,
  security: operations.GetConversationSecurity,
  request: operations.GetConversationRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ConversationsGetQueryData>;
} {
  return {
    queryKey: queryKeyConversationsGet(request.id),
    queryFn: async function conversationsGetQueryFn(
      ctx,
    ): Promise<ConversationsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(conversationsGet(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyConversationsGet(id: string): QueryKey {
  return ["@inkeep/inkeep-analytics", "conversations", "get", id];
}
