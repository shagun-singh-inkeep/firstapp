/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { queryExportSemanticThreadsQueryResults } from "../funcs/queryExportSemanticThreadsQueryResults.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type QueryExportSemanticThreadsQueryResultsMutationVariables = {
  request: components.QuerySemanticThreadsRequestBody;
  options?: RequestOptions;
};

export type QueryExportSemanticThreadsQueryResultsMutationData = ReadableStream<
  Uint8Array
>;

/**
 * Export Semantic Threads Query Results
 */
export function useQueryExportSemanticThreadsQueryResultsMutation(
  options?: MutationHookOptions<
    QueryExportSemanticThreadsQueryResultsMutationData,
    Error,
    QueryExportSemanticThreadsQueryResultsMutationVariables
  >,
): UseMutationResult<
  QueryExportSemanticThreadsQueryResultsMutationData,
  Error,
  QueryExportSemanticThreadsQueryResultsMutationVariables
> {
  const client = useInkeepAnalyticsContext();
  return useMutation({
    ...buildQueryExportSemanticThreadsQueryResultsMutation(client, options),
    ...options,
  });
}

export function mutationKeyQueryExportSemanticThreadsQueryResults(): MutationKey {
  return [
    "@inkeep/inkeep-analytics",
    "Query",
    "exportSemanticThreadsQueryResults",
  ];
}

export function buildQueryExportSemanticThreadsQueryResultsMutation(
  client$: InkeepAnalyticsCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: QueryExportSemanticThreadsQueryResultsMutationVariables,
  ) => Promise<QueryExportSemanticThreadsQueryResultsMutationData>;
} {
  return {
    mutationKey: mutationKeyQueryExportSemanticThreadsQueryResults(),
    mutationFn: function queryExportSemanticThreadsQueryResultsMutationFn({
      request,
      options,
    }): Promise<QueryExportSemanticThreadsQueryResultsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(queryExportSemanticThreadsQueryResults(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
