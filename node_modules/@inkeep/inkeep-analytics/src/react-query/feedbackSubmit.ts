/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { InkeepAnalyticsCore } from "../core.js";
import { feedbackSubmit } from "../funcs/feedbackSubmit.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useInkeepAnalyticsContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type FeedbackSubmitMutationVariables = {
  request: operations.LogFeedbackRequestBody;
  options?: RequestOptions;
};

export type FeedbackSubmitMutationData = operations.LogFeedbackResponseBody;

/**
 * Log Feedback
 *
 * @remarks
 * Logs new feedback or updates an existing one.
 *
 * **API Key Types:** `API`
 */
export function useFeedbackSubmitMutation(
  options?: MutationHookOptions<
    FeedbackSubmitMutationData,
    Error,
    FeedbackSubmitMutationVariables
  >,
): UseMutationResult<
  FeedbackSubmitMutationData,
  Error,
  FeedbackSubmitMutationVariables
> {
  const client = useInkeepAnalyticsContext();
  return useMutation({
    ...buildFeedbackSubmitMutation(client, options),
    ...options,
  });
}

export function mutationKeyFeedbackSubmit(): MutationKey {
  return ["@inkeep/inkeep-analytics", "feedback", "submit"];
}

export function buildFeedbackSubmitMutation(
  client$: InkeepAnalyticsCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: FeedbackSubmitMutationVariables,
  ) => Promise<FeedbackSubmitMutationData>;
} {
  return {
    mutationKey: mutationKeyFeedbackSubmit(),
    mutationFn: function feedbackSubmitMutationFn({
      request,
      options,
    }): Promise<FeedbackSubmitMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(feedbackSubmit(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
