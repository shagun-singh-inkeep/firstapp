{
  "version": 3,
  "sources": ["../dist-src/index.js", "../dist-src/version.js"],
  "sourcesContent": ["import { resolve } from \"path\";\nimport { existsSync, readdirSync, readFileSync } from \"fs\";\nimport { VERSION } from \"./version\";\nconst pkcs1Begin = \"-----BEGIN RSA PRIVATE KEY-----\";\nconst pkcs1End = \"-----END RSA PRIVATE KEY-----\";\nconst pkcs8Begin = \"-----BEGIN PRIVATE KEY-----\";\nconst pkcs8End = \"-----END PRIVATE KEY-----\";\nfunction isPKCS1(privateKey) {\n  return privateKey.includes(pkcs1Begin) && privateKey.includes(pkcs1End);\n}\nfunction isPKCS8(privateKey) {\n  return privateKey.includes(pkcs8Begin) && privateKey.includes(pkcs8End);\n}\nfunction getPrivateKey(options = {}) {\n  const env = options.env || process.env;\n  const cwd = options.cwd || process.cwd();\n  if (options.filepath) {\n    return readFileSync(resolve(cwd, options.filepath), \"utf-8\");\n  }\n  if (env.PRIVATE_KEY) {\n    let privateKey = env.PRIVATE_KEY;\n    if (isBase64(privateKey)) {\n      privateKey = Buffer.from(privateKey, \"base64\").toString();\n    }\n    if (privateKey.indexOf(\"\\\\n\") !== -1) {\n      privateKey = privateKey.replace(/\\\\n/g, \"\\n\");\n    }\n    if (isPKCS1(privateKey)) {\n      if (privateKey.indexOf(\"\\n\") === -1) {\n        privateKey = addNewlines({\n          privateKey,\n          begin: pkcs1Begin,\n          end: pkcs1End\n        });\n      }\n      return privateKey;\n    }\n    if (isPKCS8(privateKey)) {\n      if (privateKey.indexOf(\"\\n\") === -1) {\n        privateKey = addNewlines({\n          privateKey,\n          begin: pkcs8Begin,\n          end: pkcs8End\n        });\n      }\n      return privateKey;\n    }\n    throw new Error(\n      `[@probot/get-private-key] The contents of \"env.PRIVATE_KEY\" could not be validated. Please check to ensure you have copied the contents of the .pem file correctly.`\n    );\n  }\n  if (env.PRIVATE_KEY_PATH) {\n    const filepath = resolve(cwd, env.PRIVATE_KEY_PATH);\n    if (existsSync(filepath)) {\n      return readFileSync(filepath, \"utf-8\");\n    } else {\n      throw new Error(\n        `[@probot/get-private-key] Private key does not exists at path: \"${env.PRIVATE_KEY_PATH}\". Please check to ensure that \"env.PRIVATE_KEY_PATH\" is correct.`\n      );\n    }\n  }\n  const pemFiles = readdirSync(cwd).filter((path) => path.endsWith(\".pem\"));\n  if (pemFiles.length > 1) {\n    const paths = pemFiles.join(\", \");\n    throw new Error(\n      `[@probot/get-private-key] More than one file found: \"${paths}\". Set { filepath } option or set one of the environment variables: PRIVATE_KEY, PRIVATE_KEY_PATH`\n    );\n  } else if (pemFiles[0]) {\n    return getPrivateKey({ filepath: pemFiles[0], cwd });\n  }\n  return null;\n}\nfunction isBase64(str) {\n  return Buffer.from(str, \"base64\").toString(\"base64\") === str;\n}\nfunction addNewlines({\n  privateKey,\n  begin,\n  end\n}) {\n  const middleLength = privateKey.length - begin.length - end.length - 2;\n  const middle = privateKey.substr(begin.length + 1, middleLength);\n  return `${begin}\n${middle.trim().replace(/\\s+/g, \"\\n\")}\n${end}`;\n}\ngetPrivateKey.VERSION = VERSION;\nexport {\n  getPrivateKey\n};\n", "const VERSION = \"1.2.1\";\nexport {\n  VERSION\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAwB;AACxB,gBAAsD;;;ACDtD,IAAM,UAAU;;;ADGhB,IAAM,aAAa;AACnB,IAAM,WAAW;AACjB,IAAM,aAAa;AACnB,IAAM,WAAW;AACjB,SAAS,QAAQ,YAAY;AAC3B,SAAO,WAAW,SAAS,UAAU,KAAK,WAAW,SAAS,QAAQ;AACxE;AACA,SAAS,QAAQ,YAAY;AAC3B,SAAO,WAAW,SAAS,UAAU,KAAK,WAAW,SAAS,QAAQ;AACxE;AACA,SAAS,cAAc,UAAU,CAAC,GAAG;AACnC,QAAM,MAAM,QAAQ,OAAO,QAAQ;AACnC,QAAM,MAAM,QAAQ,OAAO,QAAQ,IAAI;AACvC,MAAI,QAAQ,UAAU;AACpB,eAAO,4BAAa,qBAAQ,KAAK,QAAQ,QAAQ,GAAG,OAAO;AAAA,EAC7D;AACA,MAAI,IAAI,aAAa;AACnB,QAAI,aAAa,IAAI;AACrB,QAAI,SAAS,UAAU,GAAG;AACxB,mBAAa,OAAO,KAAK,YAAY,QAAQ,EAAE,SAAS;AAAA,IAC1D;AACA,QAAI,WAAW,QAAQ,KAAK,MAAM,IAAI;AACpC,mBAAa,WAAW,QAAQ,QAAQ,IAAI;AAAA,IAC9C;AACA,QAAI,QAAQ,UAAU,GAAG;AACvB,UAAI,WAAW,QAAQ,IAAI,MAAM,IAAI;AACnC,qBAAa,YAAY;AAAA,UACvB;AAAA,UACA,OAAO;AAAA,UACP,KAAK;AAAA,QACP,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AACA,QAAI,QAAQ,UAAU,GAAG;AACvB,UAAI,WAAW,QAAQ,IAAI,MAAM,IAAI;AACnC,qBAAa,YAAY;AAAA,UACvB;AAAA,UACA,OAAO;AAAA,UACP,KAAK;AAAA,QACP,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AACA,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,MAAI,IAAI,kBAAkB;AACxB,UAAM,eAAW,qBAAQ,KAAK,IAAI,gBAAgB;AAClD,YAAI,sBAAW,QAAQ,GAAG;AACxB,iBAAO,wBAAa,UAAU,OAAO;AAAA,IACvC,OAAO;AACL,YAAM,IAAI;AAAA,QACR,mEAAmE,IAAI,gBAAgB;AAAA,MACzF;AAAA,IACF;AAAA,EACF;AACA,QAAM,eAAW,uBAAY,GAAG,EAAE,OAAO,CAAC,SAAS,KAAK,SAAS,MAAM,CAAC;AACxE,MAAI,SAAS,SAAS,GAAG;AACvB,UAAM,QAAQ,SAAS,KAAK,IAAI;AAChC,UAAM,IAAI;AAAA,MACR,wDAAwD,KAAK;AAAA,IAC/D;AAAA,EACF,WAAW,SAAS,CAAC,GAAG;AACtB,WAAO,cAAc,EAAE,UAAU,SAAS,CAAC,GAAG,IAAI,CAAC;AAAA,EACrD;AACA,SAAO;AACT;AACA,SAAS,SAAS,KAAK;AACrB,SAAO,OAAO,KAAK,KAAK,QAAQ,EAAE,SAAS,QAAQ,MAAM;AAC3D;AACA,SAAS,YAAY;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,QAAM,eAAe,WAAW,SAAS,MAAM,SAAS,IAAI,SAAS;AACrE,QAAM,SAAS,WAAW,OAAO,MAAM,SAAS,GAAG,YAAY;AAC/D,SAAO,GAAG,KAAK;AAAA,EACf,OAAO,KAAK,EAAE,QAAQ,QAAQ,IAAI,CAAC;AAAA,EACnC,GAAG;AACL;AACA,cAAc,UAAU;",
  "names": []
}
